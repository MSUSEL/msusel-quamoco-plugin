// Generated from csharp/CSharp5.g4 by ANTLR 4.5.1
package net.siliconcode.parsers.csharp;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CSharp5Parser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Pp_directive=1, BYTE_ORDER_MARK=2, SINGLE_LINE_DOC_COMMENT=3, DELIMITED_DOC_COMMENT=4, 
		NEW_LINE=5, SINGLE_LINE_COMMENT=6, DELIMITED_COMMENT=7, WHITESPACE=8, 
		ABSTRACT=9, ADD=10, ALIAS=11, ARGLIST=12, AS=13, ASCENDING=14, ASYNC=15, 
		AWAIT=16, BASE=17, BOOL=18, BREAK=19, BY=20, BYTE=21, CASE=22, CATCH=23, 
		CHAR=24, CHECKED=25, CLASS=26, CONST=27, CONTINUE=28, DECIMAL=29, DEFAULT=30, 
		DELEGATE=31, DESCENDING=32, DO=33, DOUBLE=34, DYNAMIC=35, ELSE=36, ENUM=37, 
		EQUALS=38, EVENT=39, EXPLICIT=40, EXTERN=41, FALSE=42, FINALLY=43, FIXED=44, 
		FLOAT=45, FOR=46, FOREACH=47, FROM=48, GET=49, GOTO=50, GROUP=51, IF=52, 
		IMPLICIT=53, IN=54, INT=55, INTERFACE=56, INTERNAL=57, INTO=58, IS=59, 
		JOIN=60, LET=61, LOCK=62, LONG=63, NAMESPACE=64, NEW=65, NULL=66, OBJECT=67, 
		ON=68, OPERATOR=69, ORDERBY=70, OUT=71, OVERRIDE=72, PARAMS=73, PARTIAL=74, 
		PRIVATE=75, PROTECTED=76, PUBLIC=77, READONLY=78, REF=79, REMOVE=80, RETURN=81, 
		SBYTE=82, SEALED=83, SELECT=84, SET=85, SHORT=86, SIZEOF=87, STACKALLOC=88, 
		STATIC=89, STRING=90, STRUCT=91, SWITCH=92, THIS=93, THROW=94, TRUE=95, 
		TRY=96, TYPEOF=97, UINT=98, ULONG=99, UNCHECKED=100, UNSAFE=101, USHORT=102, 
		USING=103, VIRTUAL=104, VOID=105, VOLATILE=106, WHERE=107, WHILE=108, 
		YIELD=109, IDENTIFIER=110, INTEGER_LITERAL=111, LiteralAccess=112, REAL_LITERAL=113, 
		CHARACTER_LITERAL=114, STRING_LITERAL=115, OPEN_BRACE=116, CLOSE_BRACE=117, 
		OPEN_BRACKET=118, CLOSE_BRACKET=119, OPEN_PARENS=120, CLOSE_PARENS=121, 
		DOT=122, COMMA=123, COLON=124, SEMICOLON=125, PLUS=126, MINUS=127, STAR=128, 
		DIV=129, PERCENT=130, AMP=131, BITWISE_OR=132, CARET=133, BANG=134, TILDE=135, 
		ASSIGNMENT=136, LT=137, GT=138, INTERR=139, DOUBLE_COLON=140, OP_COALESCING=141, 
		OP_INC=142, OP_DEC=143, OP_AND=144, OP_OR=145, OP_PTR=146, OP_EQ=147, 
		OP_NE=148, OP_LE=149, OP_GE=150, OP_ADD_ASSIGNMENT=151, OP_SUB_ASSIGNMENT=152, 
		OP_MULT_ASSIGNMENT=153, OP_DIV_ASSIGNMENT=154, OP_MOD_ASSIGNMENT=155, 
		OP_AND_ASSIGNMENT=156, OP_OR_ASSIGNMENT=157, OP_XOR_ASSIGNMENT=158, OP_LEFT_SHIFT=159, 
		OP_LEFT_SHIFT_ASSIGNMENT=160, QUOTE=161, DOUBLE_QUOTE=162, BACK_SLASH=163, 
		DOUBLE_BACK_SLASH=164, SHARP=165;
	public static final int
		RULE_namespace_name = 0, RULE_type_name = 1, RULE_identifier = 2, RULE_namespace_or_type_name = 3, 
		RULE_type_argument_list_opt = 4, RULE_type = 5, RULE_base_type = 6, RULE_simple_type = 7, 
		RULE_numeric_type = 8, RULE_integral_type = 9, RULE_floating_point_type = 10, 
		RULE_nullable_type = 11, RULE_non_nullable_value_type = 12, RULE_reference_type = 13, 
		RULE_class_type = 14, RULE_interface_type = 15, RULE_delegate_type = 16, 
		RULE_type_argument_list = 17, RULE_type_arguments = 18, RULE_type_argument = 19, 
		RULE_type_void = 20, RULE_variable_reference = 21, RULE_argument_list = 22, 
		RULE_argument = 23, RULE_argument_name = 24, RULE_argument_value = 25, 
		RULE_primary_expression = 26, RULE_primary_expression_start = 27, RULE_bracket_expression = 28, 
		RULE_simple_name = 29, RULE_parenthesized_expression = 30, RULE_member_access = 31, 
		RULE_predefined_type = 32, RULE_expression_list = 33, RULE_this_access = 34, 
		RULE_base_access = 35, RULE_object_creation_expression = 36, RULE_object_or_collection_initializer = 37, 
		RULE_object_initializer = 38, RULE_member_initializer_list = 39, RULE_member_initializer = 40, 
		RULE_initializer_value = 41, RULE_collection_initializer = 42, RULE_element_initializer_list = 43, 
		RULE_element_initializer = 44, RULE_array_creation_expression = 45, RULE_delegate_creation_expression = 46, 
		RULE_anonymous_object_creation_expression = 47, RULE_anonymous_object_initializer = 48, 
		RULE_member_declarator_list = 49, RULE_member_declarator = 50, RULE_typeof_expression = 51, 
		RULE_unbound_type_name = 52, RULE_generic_dimension_specifier = 53, RULE_commas = 54, 
		RULE_checked_expression = 55, RULE_unchecked_expression = 56, RULE_default_value_expression = 57, 
		RULE_unary_expression = 58, RULE_scan_for_cast_generic_precedence = 59, 
		RULE_cast_disambiguation_token = 60, RULE_pre_increment_expression = 61, 
		RULE_pre_decrement_expression = 62, RULE_cast_expression = 63, RULE_multiplicative_expression = 64, 
		RULE_additive_expression = 65, RULE_shift_expression = 66, RULE_relational_expression = 67, 
		RULE_scan_for_shift_generic_precedence = 68, RULE_shift_disambiguation_token = 69, 
		RULE_isType = 70, RULE_is_disambiguation_token = 71, RULE_equality_expression = 72, 
		RULE_and_expression = 73, RULE_exclusive_or_expression = 74, RULE_inclusive_or_expression = 75, 
		RULE_conditional_and_expression = 76, RULE_conditional_or_expression = 77, 
		RULE_null_coalescing_expression = 78, RULE_conditional_expression = 79, 
		RULE_lambda_expression = 80, RULE_anonymous_method_expression = 81, RULE_anonymous_function_signature = 82, 
		RULE_explicit_anonymous_function_signature = 83, RULE_explicit_anonymous_function_parameter_list = 84, 
		RULE_explicit_anonymous_function_parameter = 85, RULE_anonymous_function_parameter_modifier = 86, 
		RULE_implicit_anonymous_function_signature = 87, RULE_implicit_anonymous_function_parameter_list = 88, 
		RULE_implicit_anonymous_function_parameter = 89, RULE_anonymous_function_body = 90, 
		RULE_query_expression = 91, RULE_from_clause = 92, RULE_query_body = 93, 
		RULE_query_body_clauses = 94, RULE_query_body_clause = 95, RULE_let_clause = 96, 
		RULE_where_clause = 97, RULE_join_clause = 98, RULE_join_into_clause = 99, 
		RULE_combined_join_clause = 100, RULE_orderby_clause = 101, RULE_orderings = 102, 
		RULE_ordering = 103, RULE_ordering_direction = 104, RULE_select_or_group_clause = 105, 
		RULE_select_clause = 106, RULE_group_clause = 107, RULE_query_continuation = 108, 
		RULE_assignment = 109, RULE_assignment_operator = 110, RULE_expression = 111, 
		RULE_non_assignment_expression = 112, RULE_constant_expression = 113, 
		RULE_boolean_expression = 114, RULE_statement = 115, RULE_embedded_statement = 116, 
		RULE_simple_embedded_statement = 117, RULE_block = 118, RULE_statement_list = 119, 
		RULE_empty_statement = 120, RULE_labeled_statement = 121, RULE_declaration_statement = 122, 
		RULE_local_variable_declaration = 123, RULE_local_variable_type = 124, 
		RULE_local_variable_declarators = 125, RULE_local_variable_declarator = 126, 
		RULE_local_variable_initializer = 127, RULE_local_constant_declaration = 128, 
		RULE_expression_statement = 129, RULE_statement_expression = 130, RULE_selection_statement = 131, 
		RULE_if_body = 132, RULE_if_statement = 133, RULE_switch_statement = 134, 
		RULE_switch_block = 135, RULE_switch_sections = 136, RULE_switch_section = 137, 
		RULE_switch_labels = 138, RULE_switch_label = 139, RULE_iteration_statement = 140, 
		RULE_while_statement = 141, RULE_do_statement = 142, RULE_for_statement = 143, 
		RULE_for_initializer = 144, RULE_for_condition = 145, RULE_for_iterator = 146, 
		RULE_statement_expression_list = 147, RULE_foreach_statement = 148, RULE_jump_statement = 149, 
		RULE_break_statement = 150, RULE_continue_statement = 151, RULE_goto_statement = 152, 
		RULE_return_statement = 153, RULE_throw_statement = 154, RULE_try_statement = 155, 
		RULE_catch_clauses = 156, RULE_specific_catch_clauses = 157, RULE_specific_catch_clause = 158, 
		RULE_general_catch_clause = 159, RULE_finally_clause = 160, RULE_checked_statement = 161, 
		RULE_unchecked_statement = 162, RULE_lock_statement = 163, RULE_using_statement = 164, 
		RULE_resource_acquisition = 165, RULE_yield_statement = 166, RULE_compilation_unit = 167, 
		RULE_namespace_declaration = 168, RULE_qualified_identifier = 169, RULE_namespace_body = 170, 
		RULE_extern_alias_directives = 171, RULE_extern_alias_directive = 172, 
		RULE_using_directives = 173, RULE_using_directive = 174, RULE_using_alias_directive = 175, 
		RULE_using_namespace_directive = 176, RULE_namespace_member_declarations = 177, 
		RULE_namespace_member_declaration = 178, RULE_type_declaration = 179, 
		RULE_qualified_alias_member = 180, RULE_class_declaration = 181, RULE_class_modifiers = 182, 
		RULE_class_modifier = 183, RULE_type_parameter_list = 184, RULE_type_parameters = 185, 
		RULE_type_parameter = 186, RULE_class_base = 187, RULE_interface_type_list = 188, 
		RULE_type_parameter_constraints_clauses = 189, RULE_type_parameter_constraints_clause = 190, 
		RULE_type_parameter_constraints = 191, RULE_primary_constraint = 192, 
		RULE_secondary_constraints = 193, RULE_constructor_constraint = 194, RULE_class_body = 195, 
		RULE_class_member_declarations = 196, RULE_class_member_declaration = 197, 
		RULE_all_member_modifiers = 198, RULE_all_member_modifier = 199, RULE_common_member_declaration = 200, 
		RULE_typed_member_declaration = 201, RULE_constant_declarators = 202, 
		RULE_constant_declarator = 203, RULE_variable_declarators = 204, RULE_variable_declarator = 205, 
		RULE_variable_initializer = 206, RULE_method_declaration = 207, RULE_method_header = 208, 
		RULE_method_modifiers = 209, RULE_method_modifier = 210, RULE_return_type = 211, 
		RULE_member_name = 212, RULE_method_body = 213, RULE_formal_parameter_list = 214, 
		RULE_fixed_parameters = 215, RULE_fixed_parameter = 216, RULE_default_argument = 217, 
		RULE_parameter_modifier = 218, RULE_parameter_array = 219, RULE_property_declaration = 220, 
		RULE_property_modifiers = 221, RULE_property_modifier = 222, RULE_accessor_declarations = 223, 
		RULE_get_accessor_declaration = 224, RULE_set_accessor_declaration = 225, 
		RULE_accessor_modifier = 226, RULE_accessor_body = 227, RULE_event_declaration = 228, 
		RULE_event_modifiers = 229, RULE_event_modifier = 230, RULE_event_accessor_declarations = 231, 
		RULE_add_accessor_declaration = 232, RULE_remove_accessor_declaration = 233, 
		RULE_indexer_declaration = 234, RULE_indexer_modifiers = 235, RULE_indexer_modifier = 236, 
		RULE_indexer_declarator = 237, RULE_operator_declaration = 238, RULE_operator_modifiers = 239, 
		RULE_operator_modifier = 240, RULE_operator_declarator = 241, RULE_unary_operator_declarator = 242, 
		RULE_overloadable_unary_operator = 243, RULE_binary_operator_declarator = 244, 
		RULE_overloadable_binary_operator = 245, RULE_overloadable_operator = 246, 
		RULE_conversion_operator_declarator = 247, RULE_operator_body = 248, RULE_constructor_declaration = 249, 
		RULE_constructor_modifiers = 250, RULE_constructor_modifier = 251, RULE_constructor_declarator = 252, 
		RULE_constructor_initializer = 253, RULE_constructor_body = 254, RULE_static_constructor_declaration = 255, 
		RULE_static_constructor_modifiers = 256, RULE_static_constructor_body = 257, 
		RULE_destructor_declaration = 258, RULE_destructor_body = 259, RULE_body = 260, 
		RULE_struct_declaration = 261, RULE_struct_modifiers = 262, RULE_struct_modifier = 263, 
		RULE_struct_interfaces = 264, RULE_struct_body = 265, RULE_struct_member_declarations = 266, 
		RULE_struct_member_declaration = 267, RULE_array_type = 268, RULE_non_array_type = 269, 
		RULE_rank_specifiers = 270, RULE_rank_specifier = 271, RULE_dim_separators = 272, 
		RULE_array_initializer = 273, RULE_variable_initializer_list = 274, RULE_interface_declaration = 275, 
		RULE_interface_modifiers = 276, RULE_interface_modifier = 277, RULE_variant_type_parameter_list = 278, 
		RULE_variant_type_parameters = 279, RULE_variance_annotation = 280, RULE_interface_base = 281, 
		RULE_interface_body = 282, RULE_interface_member_declarations = 283, RULE_interface_member_declaration = 284, 
		RULE_interface_method_declaration = 285, RULE_interface_property_declaration = 286, 
		RULE_interface_accessors = 287, RULE_interface_event_declaration = 288, 
		RULE_interface_indexer_declaration = 289, RULE_enum_declaration = 290, 
		RULE_enum_base = 291, RULE_enum_body = 292, RULE_enum_modifiers = 293, 
		RULE_enum_modifier = 294, RULE_enum_member_declarations = 295, RULE_enum_member_declaration = 296, 
		RULE_delegate_declaration = 297, RULE_delegate_modifiers = 298, RULE_delegate_modifier = 299, 
		RULE_global_attributes = 300, RULE_global_attribute_sections = 301, RULE_global_attribute_section = 302, 
		RULE_global_attribute_target_specifier = 303, RULE_global_attribute_target = 304, 
		RULE_attributes = 305, RULE_attribute_sections = 306, RULE_attribute_section = 307, 
		RULE_attribute_target_specifier = 308, RULE_attribute_target = 309, RULE_attribute_list = 310, 
		RULE_attribute = 311, RULE_attribute_name = 312, RULE_attribute_arguments = 313, 
		RULE_positional_argument_list = 314, RULE_positional_argument = 315, RULE_named_argument_list = 316, 
		RULE_named_argument = 317, RULE_attribute_argument_expression = 318, RULE_class_modifier_unsafe = 319, 
		RULE_struct_modifier_unsafe = 320, RULE_interface_modifier_unsafe = 321, 
		RULE_delegate_modifier_unsafe = 322, RULE_field_modifier_unsafe = 323, 
		RULE_method_modifier_unsafe = 324, RULE_property_modifier_unsafe = 325, 
		RULE_event_modifier_unsafe = 326, RULE_indexer_modifier_unsafe = 327, 
		RULE_operator_modifier_unsafe = 328, RULE_constructor_modifier_unsafe = 329, 
		RULE_destructor_declaration_unsafe = 330, RULE_static_constructor_modifiers_unsafe = 331, 
		RULE_embedded_statement_unsafe = 332, RULE_unsafe_statement = 333, RULE_type_unsafe = 334, 
		RULE_pointer_type = 335, RULE_unmanaged_type = 336, RULE_primary_no_array_creation_expression_unsafe = 337, 
		RULE_unary_expression_unsafe = 338, RULE_pointer_indirection_expression = 339, 
		RULE_addressof_expression = 340, RULE_sizeof_expression = 341, RULE_fixed_statement = 342, 
		RULE_fixed_pointer_declarators = 343, RULE_fixed_pointer_declarator = 344, 
		RULE_fixed_pointer_initializer = 345, RULE_struct_member_declaration_unsafe = 346, 
		RULE_fixed_size_buffer_declaration = 347, RULE_fixed_size_buffer_modifiers = 348, 
		RULE_fixed_size_buffer_modifier = 349, RULE_buffer_element_type = 350, 
		RULE_fixed_size_buffer_declarators = 351, RULE_fixed_size_buffer_declarator = 352, 
		RULE_local_variable_initializer_unsafe = 353, RULE_stackalloc_initializer = 354, 
		RULE_from_contextual_keyword = 355, RULE_let_contextual_keyword = 356, 
		RULE_where_contextual_keyword = 357, RULE_join_contextual_keyword = 358, 
		RULE_on_contextual_keyword = 359, RULE_equals_contextual_keyword = 360, 
		RULE_into_contextual_keyword = 361, RULE_orderby_contextual_keyword = 362, 
		RULE_ascending_contextual_keyword = 363, RULE_descending_contextual_keyword = 364, 
		RULE_select_contextual_keyword = 365, RULE_group_contextual_keyword = 366, 
		RULE_by_contextual_keyword = 367, RULE_partial_contextual_keyword = 368, 
		RULE_alias_contextual_keyword = 369, RULE_yield_contextual_keyword = 370, 
		RULE_get_contextual_keyword = 371, RULE_set_contextual_keyword = 372, 
		RULE_add_contextual_keyword = 373, RULE_remove_contextual_keyword = 374, 
		RULE_dynamic_contextual_keyword = 375, RULE_arglist = 376, RULE_right_arrow = 377, 
		RULE_right_shift = 378, RULE_right_shift_assignment = 379, RULE_literal = 380, 
		RULE_boolean_literal = 381, RULE_keyword = 382, RULE_class_definition = 383, 
		RULE_struct_definition = 384, RULE_interface_definition = 385, RULE_enum_definition = 386, 
		RULE_delegate_definition = 387, RULE_event_declaration2 = 388, RULE_field_declaration2 = 389, 
		RULE_property_declaration2 = 390, RULE_constant_declaration2 = 391, RULE_indexer_declaration2 = 392, 
		RULE_destructor_definition = 393, RULE_constructor_declaration2 = 394, 
		RULE_method_declaration2 = 395, RULE_method_member_name = 396, RULE_method_member_name2 = 397, 
		RULE_operator_declaration2 = 398, RULE_interface_method_declaration2 = 399, 
		RULE_interface_property_declaration2 = 400, RULE_interface_event_declaration2 = 401, 
		RULE_interface_indexer_declaration2 = 402, RULE_member_access2 = 403, 
		RULE_method_invocation2 = 404, RULE_object_creation_expression2 = 405;
	public static final String[] ruleNames = {
		"namespace_name", "type_name", "identifier", "namespace_or_type_name", 
		"type_argument_list_opt", "type", "base_type", "simple_type", "numeric_type", 
		"integral_type", "floating_point_type", "nullable_type", "non_nullable_value_type", 
		"reference_type", "class_type", "interface_type", "delegate_type", "type_argument_list", 
		"type_arguments", "type_argument", "type_void", "variable_reference", 
		"argument_list", "argument", "argument_name", "argument_value", "primary_expression", 
		"primary_expression_start", "bracket_expression", "simple_name", "parenthesized_expression", 
		"member_access", "predefined_type", "expression_list", "this_access", 
		"base_access", "object_creation_expression", "object_or_collection_initializer", 
		"object_initializer", "member_initializer_list", "member_initializer", 
		"initializer_value", "collection_initializer", "element_initializer_list", 
		"element_initializer", "array_creation_expression", "delegate_creation_expression", 
		"anonymous_object_creation_expression", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "typeof_expression", "unbound_type_name", 
		"generic_dimension_specifier", "commas", "checked_expression", "unchecked_expression", 
		"default_value_expression", "unary_expression", "scan_for_cast_generic_precedence", 
		"cast_disambiguation_token", "pre_increment_expression", "pre_decrement_expression", 
		"cast_expression", "multiplicative_expression", "additive_expression", 
		"shift_expression", "relational_expression", "scan_for_shift_generic_precedence", 
		"shift_disambiguation_token", "isType", "is_disambiguation_token", "equality_expression", 
		"and_expression", "exclusive_or_expression", "inclusive_or_expression", 
		"conditional_and_expression", "conditional_or_expression", "null_coalescing_expression", 
		"conditional_expression", "lambda_expression", "anonymous_method_expression", 
		"anonymous_function_signature", "explicit_anonymous_function_signature", 
		"explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
		"anonymous_function_parameter_modifier", "implicit_anonymous_function_signature", 
		"implicit_anonymous_function_parameter_list", "implicit_anonymous_function_parameter", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clauses", "query_body_clause", "let_clause", "where_clause", 
		"join_clause", "join_into_clause", "combined_join_clause", "orderby_clause", 
		"orderings", "ordering", "ordering_direction", "select_or_group_clause", 
		"select_clause", "group_clause", "query_continuation", "assignment", "assignment_operator", 
		"expression", "non_assignment_expression", "constant_expression", "boolean_expression", 
		"statement", "embedded_statement", "simple_embedded_statement", "block", 
		"statement_list", "empty_statement", "labeled_statement", "declaration_statement", 
		"local_variable_declaration", "local_variable_type", "local_variable_declarators", 
		"local_variable_declarator", "local_variable_initializer", "local_constant_declaration", 
		"expression_statement", "statement_expression", "selection_statement", 
		"if_body", "if_statement", "switch_statement", "switch_block", "switch_sections", 
		"switch_section", "switch_labels", "switch_label", "iteration_statement", 
		"while_statement", "do_statement", "for_statement", "for_initializer", 
		"for_condition", "for_iterator", "statement_expression_list", "foreach_statement", 
		"jump_statement", "break_statement", "continue_statement", "goto_statement", 
		"return_statement", "throw_statement", "try_statement", "catch_clauses", 
		"specific_catch_clauses", "specific_catch_clause", "general_catch_clause", 
		"finally_clause", "checked_statement", "unchecked_statement", "lock_statement", 
		"using_statement", "resource_acquisition", "yield_statement", "compilation_unit", 
		"namespace_declaration", "qualified_identifier", "namespace_body", "extern_alias_directives", 
		"extern_alias_directive", "using_directives", "using_directive", "using_alias_directive", 
		"using_namespace_directive", "namespace_member_declarations", "namespace_member_declaration", 
		"type_declaration", "qualified_alias_member", "class_declaration", "class_modifiers", 
		"class_modifier", "type_parameter_list", "type_parameters", "type_parameter", 
		"class_base", "interface_type_list", "type_parameter_constraints_clauses", 
		"type_parameter_constraints_clause", "type_parameter_constraints", "primary_constraint", 
		"secondary_constraints", "constructor_constraint", "class_body", "class_member_declarations", 
		"class_member_declaration", "all_member_modifiers", "all_member_modifier", 
		"common_member_declaration", "typed_member_declaration", "constant_declarators", 
		"constant_declarator", "variable_declarators", "variable_declarator", 
		"variable_initializer", "method_declaration", "method_header", "method_modifiers", 
		"method_modifier", "return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "default_argument", "parameter_modifier", 
		"parameter_array", "property_declaration", "property_modifiers", "property_modifier", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_declaration", "event_modifiers", 
		"event_modifier", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "indexer_declaration", "indexer_modifiers", 
		"indexer_modifier", "indexer_declarator", "operator_declaration", "operator_modifiers", 
		"operator_modifier", "operator_declarator", "unary_operator_declarator", 
		"overloadable_unary_operator", "binary_operator_declarator", "overloadable_binary_operator", 
		"overloadable_operator", "conversion_operator_declarator", "operator_body", 
		"constructor_declaration", "constructor_modifiers", "constructor_modifier", 
		"constructor_declarator", "constructor_initializer", "constructor_body", 
		"static_constructor_declaration", "static_constructor_modifiers", "static_constructor_body", 
		"destructor_declaration", "destructor_body", "body", "struct_declaration", 
		"struct_modifiers", "struct_modifier", "struct_interfaces", "struct_body", 
		"struct_member_declarations", "struct_member_declaration", "array_type", 
		"non_array_type", "rank_specifiers", "rank_specifier", "dim_separators", 
		"array_initializer", "variable_initializer_list", "interface_declaration", 
		"interface_modifiers", "interface_modifier", "variant_type_parameter_list", 
		"variant_type_parameters", "variance_annotation", "interface_base", "interface_body", 
		"interface_member_declarations", "interface_member_declaration", "interface_method_declaration", 
		"interface_property_declaration", "interface_accessors", "interface_event_declaration", 
		"interface_indexer_declaration", "enum_declaration", "enum_base", "enum_body", 
		"enum_modifiers", "enum_modifier", "enum_member_declarations", "enum_member_declaration", 
		"delegate_declaration", "delegate_modifiers", "delegate_modifier", "global_attributes", 
		"global_attribute_sections", "global_attribute_section", "global_attribute_target_specifier", 
		"global_attribute_target", "attributes", "attribute_sections", "attribute_section", 
		"attribute_target_specifier", "attribute_target", "attribute_list", "attribute", 
		"attribute_name", "attribute_arguments", "positional_argument_list", "positional_argument", 
		"named_argument_list", "named_argument", "attribute_argument_expression", 
		"class_modifier_unsafe", "struct_modifier_unsafe", "interface_modifier_unsafe", 
		"delegate_modifier_unsafe", "field_modifier_unsafe", "method_modifier_unsafe", 
		"property_modifier_unsafe", "event_modifier_unsafe", "indexer_modifier_unsafe", 
		"operator_modifier_unsafe", "constructor_modifier_unsafe", "destructor_declaration_unsafe", 
		"static_constructor_modifiers_unsafe", "embedded_statement_unsafe", "unsafe_statement", 
		"type_unsafe", "pointer_type", "unmanaged_type", "primary_no_array_creation_expression_unsafe", 
		"unary_expression_unsafe", "pointer_indirection_expression", "addressof_expression", 
		"sizeof_expression", "fixed_statement", "fixed_pointer_declarators", "fixed_pointer_declarator", 
		"fixed_pointer_initializer", "struct_member_declaration_unsafe", "fixed_size_buffer_declaration", 
		"fixed_size_buffer_modifiers", "fixed_size_buffer_modifier", "buffer_element_type", 
		"fixed_size_buffer_declarators", "fixed_size_buffer_declarator", "local_variable_initializer_unsafe", 
		"stackalloc_initializer", "from_contextual_keyword", "let_contextual_keyword", 
		"where_contextual_keyword", "join_contextual_keyword", "on_contextual_keyword", 
		"equals_contextual_keyword", "into_contextual_keyword", "orderby_contextual_keyword", 
		"ascending_contextual_keyword", "descending_contextual_keyword", "select_contextual_keyword", 
		"group_contextual_keyword", "by_contextual_keyword", "partial_contextual_keyword", 
		"alias_contextual_keyword", "yield_contextual_keyword", "get_contextual_keyword", 
		"set_contextual_keyword", "add_contextual_keyword", "remove_contextual_keyword", 
		"dynamic_contextual_keyword", "arglist", "right_arrow", "right_shift", 
		"right_shift_assignment", "literal", "boolean_literal", "keyword", "class_definition", 
		"struct_definition", "interface_definition", "enum_definition", "delegate_definition", 
		"event_declaration2", "field_declaration2", "property_declaration2", "constant_declaration2", 
		"indexer_declaration2", "destructor_definition", "constructor_declaration2", 
		"method_declaration2", "method_member_name", "method_member_name2", "operator_declaration2", 
		"interface_method_declaration2", "interface_property_declaration2", "interface_event_declaration2", 
		"interface_indexer_declaration2", "member_access2", "method_invocation2", 
		"object_creation_expression2"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, "'\\u00EF\\u00BB\\u00BF'", null, null, null, null, null, null, 
		"'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
		"'async'", "'await'", "'base'", "'bool'", "'break'", "'by'", "'byte'", 
		"'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", 
		"'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", 
		"'dynamic'", "'else'", "'enum'", "'equals'", "'event'", "'explicit'", 
		"'extern'", "'false'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
		"'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", "'in'", 
		"'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", 
		"'lock'", "'long'", "'namespace'", "'new'", "'null'", "'object'", "'on'", 
		"'operator'", "'orderby'", "'out'", "'override'", "'params'", "'partial'", 
		"'private'", "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", 
		"'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", 
		"'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", "'this'", 
		"'throw'", "'true'", "'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", 
		"'unsafe'", "'ushort'", "'using'", "'virtual'", "'void'", "'volatile'", 
		"'where'", "'while'", "'yield'", null, null, null, null, null, null, "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", 
		"'<'", "'>'", "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", 
		"'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'<<'", "'<<='", "'''", "'\"'", "'\\'", "'\\\\'", 
		"'#'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "Pp_directive", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"NEW_LINE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACE", 
		"ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", "AWAIT", 
		"BASE", "BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
		"CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", 
		"DO", "DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", 
		"EXTERN", "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", 
		"GET", "GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
		"INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "NAMESPACE", "NEW", "NULL", 
		"OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", "PARTIAL", 
		"PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", "RETURN", 
		"SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", "STATIC", 
		"STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
		"UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", "USING", "VIRTUAL", 
		"VOID", "VOLATILE", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "INTEGER_LITERAL", 
		"LiteralAccess", "REAL_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "QUOTE", "DOUBLE_QUOTE", 
		"BACK_SLASH", "DOUBLE_BACK_SLASH", "SHARP"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "CSharp5.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public CSharp5Parser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Namespace_nameContext extends ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return getRuleContext(Namespace_or_type_nameContext.class,0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamespace_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamespace_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamespace_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Namespace_nameContext namespace_name() throws RecognitionException {
		Namespace_nameContext _localctx = new Namespace_nameContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_namespace_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(812);
			namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return getRuleContext(Namespace_or_type_nameContext.class,0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_type_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(814);
			namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(CSharp5Parser.IDENTIFIER, 0); }
		public TerminalNode FROM() { return getToken(CSharp5Parser.FROM, 0); }
		public TerminalNode LET() { return getToken(CSharp5Parser.LET, 0); }
		public TerminalNode WHERE() { return getToken(CSharp5Parser.WHERE, 0); }
		public TerminalNode JOIN() { return getToken(CSharp5Parser.JOIN, 0); }
		public TerminalNode ON() { return getToken(CSharp5Parser.ON, 0); }
		public TerminalNode EQUALS() { return getToken(CSharp5Parser.EQUALS, 0); }
		public TerminalNode INTO() { return getToken(CSharp5Parser.INTO, 0); }
		public TerminalNode ORDERBY() { return getToken(CSharp5Parser.ORDERBY, 0); }
		public TerminalNode ASCENDING() { return getToken(CSharp5Parser.ASCENDING, 0); }
		public TerminalNode DESCENDING() { return getToken(CSharp5Parser.DESCENDING, 0); }
		public TerminalNode SELECT() { return getToken(CSharp5Parser.SELECT, 0); }
		public TerminalNode GROUP() { return getToken(CSharp5Parser.GROUP, 0); }
		public TerminalNode BY() { return getToken(CSharp5Parser.BY, 0); }
		public TerminalNode PARTIAL() { return getToken(CSharp5Parser.PARTIAL, 0); }
		public TerminalNode ALIAS() { return getToken(CSharp5Parser.ALIAS, 0); }
		public TerminalNode YIELD() { return getToken(CSharp5Parser.YIELD, 0); }
		public TerminalNode GET() { return getToken(CSharp5Parser.GET, 0); }
		public TerminalNode SET() { return getToken(CSharp5Parser.SET, 0); }
		public TerminalNode ADD() { return getToken(CSharp5Parser.ADD, 0); }
		public TerminalNode REMOVE() { return getToken(CSharp5Parser.REMOVE, 0); }
		public TerminalNode DYNAMIC() { return getToken(CSharp5Parser.DYNAMIC, 0); }
		public TerminalNode ARGLIST() { return getToken(CSharp5Parser.ARGLIST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(816);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Namespace_or_type_nameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<Type_argument_list_optContext> type_argument_list_opt() {
			return getRuleContexts(Type_argument_list_optContext.class);
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return getRuleContext(Type_argument_list_optContext.class,i);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return getRuleContext(Qualified_alias_memberContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(CSharp5Parser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CSharp5Parser.DOT, i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_or_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamespace_or_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamespace_or_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamespace_or_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Namespace_or_type_nameContext namespace_or_type_name() throws RecognitionException {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_namespace_or_type_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(822);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(818);
				identifier();
				setState(819);
				type_argument_list_opt();
				}
				break;
			case 2:
				{
				setState(821);
				qualified_alias_member();
				}
				break;
			}
			setState(830);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(824);
					match(DOT);
					setState(825);
					identifier();
					setState(826);
					type_argument_list_opt();
					}
					} 
				}
				setState(832);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_argument_list_optContext extends ParserRuleContext {
		public Type_argument_listContext type_argument_list() {
			return getRuleContext(Type_argument_listContext.class,0);
		}
		public Type_argument_list_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_argument_list_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_argument_list_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_argument_list_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_argument_list_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_argument_list_optContext type_argument_list_opt() throws RecognitionException {
		Type_argument_list_optContext _localctx = new Type_argument_list_optContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_type_argument_list_opt);
		try {
			setState(835);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(833);
				type_argument_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeContext extends ParserRuleContext {
		public Base_typeContext base_type() {
			return getRuleContext(Base_typeContext.class,0);
		}
		public List<TerminalNode> INTERR() { return getTokens(CSharp5Parser.INTERR); }
		public TerminalNode INTERR(int i) {
			return getToken(CSharp5Parser.INTERR, i);
		}
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(CSharp5Parser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CSharp5Parser.STAR, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_type);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(837);
			base_type();
			setState(843);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(841);
					switch (_input.LA(1)) {
					case INTERR:
						{
						setState(838);
						match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						setState(839);
						rank_specifier();
						}
						break;
					case STAR:
						{
						setState(840);
						match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(845);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Base_typeContext extends ParserRuleContext {
		public Simple_typeContext simple_type() {
			return getRuleContext(Simple_typeContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public TerminalNode STAR() { return getToken(CSharp5Parser.STAR, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_base_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBase_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBase_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBase_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Base_typeContext base_type() throws RecognitionException {
		Base_typeContext _localctx = new Base_typeContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_base_type);
		try {
			setState(850);
			switch (_input.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(846);
				simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(847);
				class_type();
				}
				break;
			case VOID:
				enterOuterAlt(_localctx, 3);
				{
				setState(848);
				match(VOID);
				setState(849);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_typeContext extends ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public TerminalNode BOOL() { return getToken(CSharp5Parser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSimple_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSimple_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSimple_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_typeContext simple_type() throws RecognitionException {
		Simple_typeContext _localctx = new Simple_typeContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_simple_type);
		try {
			setState(854);
			switch (_input.LA(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(852);
				numeric_type();
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(853);
				match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_typeContext extends ParserRuleContext {
		public Integral_typeContext integral_type() {
			return getRuleContext(Integral_typeContext.class,0);
		}
		public Floating_point_typeContext floating_point_type() {
			return getRuleContext(Floating_point_typeContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(CSharp5Parser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNumeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNumeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNumeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_typeContext numeric_type() throws RecognitionException {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_numeric_type);
		try {
			setState(859);
			switch (_input.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(856);
				integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(857);
				floating_point_type();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(858);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Integral_typeContext extends ParserRuleContext {
		public TerminalNode SBYTE() { return getToken(CSharp5Parser.SBYTE, 0); }
		public TerminalNode BYTE() { return getToken(CSharp5Parser.BYTE, 0); }
		public TerminalNode SHORT() { return getToken(CSharp5Parser.SHORT, 0); }
		public TerminalNode USHORT() { return getToken(CSharp5Parser.USHORT, 0); }
		public TerminalNode INT() { return getToken(CSharp5Parser.INT, 0); }
		public TerminalNode UINT() { return getToken(CSharp5Parser.UINT, 0); }
		public TerminalNode LONG() { return getToken(CSharp5Parser.LONG, 0); }
		public TerminalNode ULONG() { return getToken(CSharp5Parser.ULONG, 0); }
		public TerminalNode CHAR() { return getToken(CSharp5Parser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integral_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIntegral_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIntegral_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIntegral_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Integral_typeContext integral_type() throws RecognitionException {
		Integral_typeContext _localctx = new Integral_typeContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_integral_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(861);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (SBYTE - 82)) | (1L << (SHORT - 82)) | (1L << (UINT - 82)) | (1L << (ULONG - 82)) | (1L << (USHORT - 82)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Floating_point_typeContext extends ParserRuleContext {
		public TerminalNode FLOAT() { return getToken(CSharp5Parser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(CSharp5Parser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floating_point_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFloating_point_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFloating_point_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFloating_point_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Floating_point_typeContext floating_point_type() throws RecognitionException {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_floating_point_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(863);
			_la = _input.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nullable_typeContext extends ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return getRuleContext(Non_nullable_value_typeContext.class,0);
		}
		public TerminalNode INTERR() { return getToken(CSharp5Parser.INTERR, 0); }
		public Nullable_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullable_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNullable_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNullable_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNullable_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nullable_typeContext nullable_type() throws RecognitionException {
		Nullable_typeContext _localctx = new Nullable_typeContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_nullable_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(865);
			non_nullable_value_type();
			setState(866);
			match(INTERR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_nullable_value_typeContext extends ParserRuleContext {
		public Base_typeContext base_type() {
			return getRuleContext(Base_typeContext.class,0);
		}
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(CSharp5Parser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CSharp5Parser.STAR, i);
		}
		public Non_nullable_value_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_nullable_value_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNon_nullable_value_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNon_nullable_value_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNon_nullable_value_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_nullable_value_typeContext non_nullable_value_type() throws RecognitionException {
		Non_nullable_value_typeContext _localctx = new Non_nullable_value_typeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_non_nullable_value_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(868);
			base_type();
			setState(873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OPEN_BRACKET || _la==STAR) {
				{
				setState(871);
				switch (_input.LA(1)) {
				case OPEN_BRACKET:
					{
					setState(869);
					rank_specifier();
					}
					break;
				case STAR:
					{
					setState(870);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(875);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_typeContext extends ParserRuleContext {
		public Simple_typeContext simple_type() {
			return getRuleContext(Simple_typeContext.class,0);
		}
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(CSharp5Parser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CSharp5Parser.STAR, i);
		}
		public List<TerminalNode> INTERR() { return getTokens(CSharp5Parser.INTERR); }
		public TerminalNode INTERR(int i) {
			return getToken(CSharp5Parser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public Reference_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterReference_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitReference_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitReference_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_typeContext reference_type() throws RecognitionException {
		Reference_typeContext _localctx = new Reference_typeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_reference_type);
		int _la;
		try {
			int _alt;
			setState(931);
			switch (_input.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(876);
				simple_type();
				setState(886);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(880);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							setState(877);
							_la = _input.LA(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							}
							setState(882);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(883);
						rank_specifier();
						}
						} 
					}
					setState(888);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,11,_ctx);
				}
				setState(892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					setState(889);
					_la = _input.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					}
					setState(894);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(895);
				rank_specifier();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(897);
				class_type();
				setState(907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (OPEN_BRACKET - 118)) | (1L << (STAR - 118)) | (1L << (INTERR - 118)))) != 0)) {
					{
					{
					setState(901);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==STAR || _la==INTERR) {
						{
						{
						setState(898);
						_la = _input.LA(1);
						if ( !(_la==STAR || _la==INTERR) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						}
						setState(903);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(904);
					rank_specifier();
					}
					}
					setState(909);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case VOID:
				enterOuterAlt(_localctx, 3);
				{
				setState(910);
				match(VOID);
				setState(911);
				match(STAR);
				setState(921);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(915);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							setState(912);
							_la = _input.LA(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							}
							setState(917);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(918);
						rank_specifier();
						}
						} 
					}
					setState(923);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
				}
				setState(927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					setState(924);
					_la = _input.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					}
					setState(929);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(930);
				rank_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OBJECT() { return getToken(CSharp5Parser.OBJECT, 0); }
		public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
			return getRuleContext(Dynamic_contextual_keywordContext.class,0);
		}
		public TerminalNode STRING() { return getToken(CSharp5Parser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_class_type);
		try {
			setState(937);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(933);
				type_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(934);
				match(OBJECT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(935);
				dynamic_contextual_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(936);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_typeContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Interface_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_typeContext interface_type() throws RecognitionException {
		Interface_typeContext _localctx = new Interface_typeContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_interface_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(939);
			type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_typeContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Delegate_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_typeContext delegate_type() throws RecognitionException {
		Delegate_typeContext _localctx = new Delegate_typeContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_delegate_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(941);
			type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_argument_listContext extends ParserRuleContext {
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public Type_argumentsContext type_arguments() {
			return getRuleContext(Type_argumentsContext.class,0);
		}
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public Type_argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_argument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_argument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_argument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_argument_listContext type_argument_list() throws RecognitionException {
		Type_argument_listContext _localctx = new Type_argument_listContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_type_argument_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(943);
			match(LT);
			setState(944);
			type_arguments();
			setState(945);
			match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_argumentsContext extends ParserRuleContext {
		public List<Type_argumentContext> type_argument() {
			return getRuleContexts(Type_argumentContext.class);
		}
		public Type_argumentContext type_argument(int i) {
			return getRuleContext(Type_argumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Type_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_argumentsContext type_arguments() throws RecognitionException {
		Type_argumentsContext _localctx = new Type_argumentsContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_type_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(947);
			type_argument();
			setState(952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(948);
				match(COMMA);
				setState(949);
				type_argument();
				}
				}
				setState(954);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_argumentContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Type_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_argumentContext type_argument() throws RecognitionException {
		Type_argumentContext _localctx = new Type_argumentContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_type_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(955);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_voidContext extends ParserRuleContext {
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public Type_voidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_void; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_void(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_void(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_void(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_voidContext type_void() throws RecognitionException {
		Type_voidContext _localctx = new Type_voidContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_type_void);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(957);
			match(VOID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_referenceContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Variable_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariable_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariable_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_referenceContext variable_reference() throws RecognitionException {
		Variable_referenceContext _localctx = new Variable_referenceContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_variable_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(959);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_listContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArgument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArgument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArgument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_listContext argument_list() throws RecognitionException {
		Argument_listContext _localctx = new Argument_listContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(961);
			argument();
			setState(966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(962);
				match(COMMA);
				setState(963);
				argument();
				}
				}
				setState(968);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Argument_valueContext argument_value() {
			return getRuleContext(Argument_valueContext.class,0);
		}
		public Argument_nameContext argument_name() {
			return getRuleContext(Argument_nameContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(970);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(969);
				argument_name();
				}
				break;
			}
			setState(972);
			argument_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Argument_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArgument_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArgument_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArgument_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_nameContext argument_name() throws RecognitionException {
		Argument_nameContext _localctx = new Argument_nameContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_argument_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(974);
			identifier();
			setState(975);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_valueContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode REF() { return getToken(CSharp5Parser.REF, 0); }
		public Variable_referenceContext variable_reference() {
			return getRuleContext(Variable_referenceContext.class,0);
		}
		public TerminalNode OUT() { return getToken(CSharp5Parser.OUT, 0); }
		public Argument_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArgument_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArgument_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArgument_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_valueContext argument_value() throws RecognitionException {
		Argument_valueContext _localctx = new Argument_valueContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_argument_value);
		try {
			setState(982);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(977);
				expression();
				}
				break;
			case REF:
				enterOuterAlt(_localctx, 2);
				{
				setState(978);
				match(REF);
				setState(979);
				variable_reference();
				}
				break;
			case OUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(980);
				match(OUT);
				setState(981);
				variable_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_expressionContext extends ParserRuleContext {
		public Primary_expression_startContext pe;
		public Primary_expression_startContext primary_expression_start() {
			return getRuleContext(Primary_expression_startContext.class,0);
		}
		public TerminalNode AWAIT() { return getToken(CSharp5Parser.AWAIT, 0); }
		public List<Bracket_expressionContext> bracket_expression() {
			return getRuleContexts(Bracket_expressionContext.class);
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return getRuleContext(Bracket_expressionContext.class,i);
		}
		public List<Member_access2Context> member_access2() {
			return getRuleContexts(Member_access2Context.class);
		}
		public Member_access2Context member_access2(int i) {
			return getRuleContext(Member_access2Context.class,i);
		}
		public List<Method_invocation2Context> method_invocation2() {
			return getRuleContexts(Method_invocation2Context.class);
		}
		public Method_invocation2Context method_invocation2(int i) {
			return getRuleContext(Method_invocation2Context.class,i);
		}
		public List<TerminalNode> OP_INC() { return getTokens(CSharp5Parser.OP_INC); }
		public TerminalNode OP_INC(int i) {
			return getToken(CSharp5Parser.OP_INC, i);
		}
		public List<TerminalNode> OP_DEC() { return getTokens(CSharp5Parser.OP_DEC); }
		public TerminalNode OP_DEC(int i) {
			return getToken(CSharp5Parser.OP_DEC, i);
		}
		public List<TerminalNode> OP_PTR() { return getTokens(CSharp5Parser.OP_PTR); }
		public TerminalNode OP_PTR(int i) {
			return getToken(CSharp5Parser.OP_PTR, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPrimary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPrimary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPrimary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_expressionContext primary_expression() throws RecognitionException {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_primary_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(985);
			_la = _input.LA(1);
			if (_la==AWAIT) {
				{
				setState(984);
				match(AWAIT);
				}
			}

			setState(987);
			((Primary_expressionContext)_localctx).pe = primary_expression_start();
			setState(991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				setState(988);
				bracket_expression();
				}
				}
				setState(993);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (OPEN_PARENS - 120)) | (1L << (DOT - 120)) | (1L << (OP_INC - 120)) | (1L << (OP_DEC - 120)) | (1L << (OP_PTR - 120)))) != 0)) {
				{
				{
				setState(1000);
				switch (_input.LA(1)) {
				case DOT:
					{
					setState(994);
					member_access2();
					}
					break;
				case OPEN_PARENS:
					{
					setState(995);
					method_invocation2();
					}
					break;
				case OP_INC:
					{
					setState(996);
					match(OP_INC);
					}
					break;
				case OP_DEC:
					{
					setState(997);
					match(OP_DEC);
					}
					break;
				case OP_PTR:
					{
					setState(998);
					match(OP_PTR);
					setState(999);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					setState(1002);
					bracket_expression();
					}
					}
					setState(1007);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_expression_startContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public Parenthesized_expressionContext parenthesized_expression() {
			return getRuleContext(Parenthesized_expressionContext.class,0);
		}
		public Predefined_typeContext predefined_type() {
			return getRuleContext(Predefined_typeContext.class,0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return getRuleContext(Qualified_alias_memberContext.class,0);
		}
		public This_accessContext this_access() {
			return getRuleContext(This_accessContext.class,0);
		}
		public Base_accessContext base_access() {
			return getRuleContext(Base_accessContext.class,0);
		}
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return getRuleContext(Anonymous_object_initializerContext.class,0);
		}
		public Rank_specifierContext rank_specifier() {
			return getRuleContext(Rank_specifierContext.class,0);
		}
		public Array_initializerContext array_initializer() {
			return getRuleContext(Array_initializerContext.class,0);
		}
		public Object_creation_expression2Context object_creation_expression2() {
			return getRuleContext(Object_creation_expression2Context.class,0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return getRuleContext(Object_or_collection_initializerContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Rank_specifiersContext rank_specifiers() {
			return getRuleContext(Rank_specifiersContext.class,0);
		}
		public Typeof_expressionContext typeof_expression() {
			return getRuleContext(Typeof_expressionContext.class,0);
		}
		public Checked_expressionContext checked_expression() {
			return getRuleContext(Checked_expressionContext.class,0);
		}
		public Unchecked_expressionContext unchecked_expression() {
			return getRuleContext(Unchecked_expressionContext.class,0);
		}
		public Default_value_expressionContext default_value_expression() {
			return getRuleContext(Default_value_expressionContext.class,0);
		}
		public Anonymous_method_expressionContext anonymous_method_expression() {
			return getRuleContext(Anonymous_method_expressionContext.class,0);
		}
		public Sizeof_expressionContext sizeof_expression() {
			return getRuleContext(Sizeof_expressionContext.class,0);
		}
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_expression_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPrimary_expression_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPrimary_expression_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPrimary_expression_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_expression_startContext primary_expression_start() throws RecognitionException {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_primary_expression_start);
		int _la;
		try {
			setState(1050);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1013);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1014);
				simple_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1015);
				parenthesized_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1016);
				predefined_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1017);
				qualified_alias_member();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1018);
				this_access();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1019);
				base_access();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1020);
				match(NEW);
				setState(1042);
				switch (_input.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					setState(1021);
					type();
					setState(1036);
					switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
					case 1:
						{
						setState(1022);
						object_creation_expression2();
						}
						break;
					case 2:
						{
						setState(1023);
						object_or_collection_initializer();
						}
						break;
					case 3:
						{
						setState(1024);
						match(OPEN_BRACKET);
						setState(1025);
						expression_list();
						setState(1026);
						match(CLOSE_BRACKET);
						setState(1028);
						switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
						case 1:
							{
							setState(1027);
							rank_specifiers();
							}
							break;
						}
						setState(1031);
						_la = _input.LA(1);
						if (_la==OPEN_BRACE) {
							{
							setState(1030);
							array_initializer();
							}
						}

						}
						break;
					case 4:
						{
						setState(1033);
						rank_specifiers();
						setState(1034);
						array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					setState(1038);
					anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					setState(1039);
					rank_specifier();
					setState(1040);
					array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1044);
				typeof_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1045);
				checked_expression();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1046);
				unchecked_expression();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1047);
				default_value_expression();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1048);
				anonymous_method_expression();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1049);
				sizeof_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBracket_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_bracket_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1052);
			match(OPEN_BRACKET);
			setState(1053);
			expression_list();
			setState(1054);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return getRuleContext(Type_argument_list_optContext.class,0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSimple_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSimple_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1056);
			identifier();
			setState(1057);
			type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parenthesized_expressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterParenthesized_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitParenthesized_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitParenthesized_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parenthesized_expressionContext parenthesized_expression() throws RecognitionException {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_parenthesized_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1059);
			match(OPEN_PARENS);
			setState(1060);
			expression();
			setState(1061);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_accessContext extends ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return getRuleContext(Primary_expressionContext.class,0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_access(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_access(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_accessContext member_access() throws RecognitionException {
		Member_accessContext _localctx = new Member_accessContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_member_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1063);
			primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_typeContext extends ParserRuleContext {
		public TerminalNode BOOL() { return getToken(CSharp5Parser.BOOL, 0); }
		public TerminalNode BYTE() { return getToken(CSharp5Parser.BYTE, 0); }
		public TerminalNode CHAR() { return getToken(CSharp5Parser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(CSharp5Parser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(CSharp5Parser.DOUBLE, 0); }
		public TerminalNode FLOAT() { return getToken(CSharp5Parser.FLOAT, 0); }
		public TerminalNode INT() { return getToken(CSharp5Parser.INT, 0); }
		public TerminalNode LONG() { return getToken(CSharp5Parser.LONG, 0); }
		public TerminalNode OBJECT() { return getToken(CSharp5Parser.OBJECT, 0); }
		public TerminalNode SBYTE() { return getToken(CSharp5Parser.SBYTE, 0); }
		public TerminalNode SHORT() { return getToken(CSharp5Parser.SHORT, 0); }
		public TerminalNode STRING() { return getToken(CSharp5Parser.STRING, 0); }
		public TerminalNode UINT() { return getToken(CSharp5Parser.UINT, 0); }
		public TerminalNode ULONG() { return getToken(CSharp5Parser.ULONG, 0); }
		public TerminalNode USHORT() { return getToken(CSharp5Parser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPredefined_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPredefined_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPredefined_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Predefined_typeContext predefined_type() throws RecognitionException {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_predefined_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1065);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (SBYTE - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1067);
			expression();
			setState(1072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1068);
				match(COMMA);
				setState(1069);
				expression();
				}
				}
				setState(1074);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class This_accessContext extends ParserRuleContext {
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public This_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_this_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterThis_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitThis_access(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitThis_access(this);
			else return visitor.visitChildren(this);
		}
	}

	public final This_accessContext this_access() throws RecognitionException {
		This_accessContext _localctx = new This_accessContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_this_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1075);
			match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Base_accessContext extends ParserRuleContext {
		public TerminalNode BASE() { return getToken(CSharp5Parser.BASE, 0); }
		public TerminalNode DOT() { return getToken(CSharp5Parser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return getRuleContext(Type_argument_list_optContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Base_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_base_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBase_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBase_access(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBase_access(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Base_accessContext base_access() throws RecognitionException {
		Base_accessContext _localctx = new Base_accessContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_base_access);
		try {
			setState(1087);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1077);
				match(BASE);
				setState(1078);
				match(DOT);
				setState(1079);
				identifier();
				setState(1080);
				type_argument_list_opt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1082);
				match(BASE);
				setState(1083);
				match(OPEN_BRACKET);
				setState(1084);
				expression_list();
				setState(1085);
				match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_creation_expressionContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return getRuleContext(Object_or_collection_initializerContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_creation_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterObject_creation_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitObject_creation_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitObject_creation_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_creation_expressionContext object_creation_expression() throws RecognitionException {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_object_creation_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1089);
			match(NEW);
			setState(1090);
			type();
			setState(1100);
			switch (_input.LA(1)) {
			case OPEN_PARENS:
				{
				setState(1091);
				match(OPEN_PARENS);
				setState(1093);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					setState(1092);
					argument_list();
					}
				}

				setState(1095);
				match(CLOSE_PARENS);
				setState(1097);
				_la = _input.LA(1);
				if (_la==OPEN_BRACE) {
					{
					setState(1096);
					object_or_collection_initializer();
					}
				}

				}
				break;
			case OPEN_BRACE:
				{
				setState(1099);
				object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_or_collection_initializerContext extends ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return getRuleContext(Object_initializerContext.class,0);
		}
		public Collection_initializerContext collection_initializer() {
			return getRuleContext(Collection_initializerContext.class,0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_or_collection_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterObject_or_collection_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitObject_or_collection_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitObject_or_collection_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_or_collection_initializerContext object_or_collection_initializer() throws RecognitionException {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_object_or_collection_initializer);
		try {
			setState(1104);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1102);
				object_initializer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1103);
				collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_initializerContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Member_initializer_listContext member_initializer_list() {
			return getRuleContext(Member_initializer_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterObject_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitObject_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitObject_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_initializerContext object_initializer() throws RecognitionException {
		Object_initializerContext _localctx = new Object_initializerContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_object_initializer);
		int _la;
		try {
			setState(1115);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1106);
				match(OPEN_BRACE);
				setState(1107);
				match(CLOSE_BRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1108);
				match(OPEN_BRACE);
				setState(1109);
				member_initializer_list();
				setState(1111);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1110);
					match(COMMA);
					}
				}

				setState(1113);
				match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_initializer_listContext extends ParserRuleContext {
		public List<Member_initializerContext> member_initializer() {
			return getRuleContexts(Member_initializerContext.class);
		}
		public Member_initializerContext member_initializer(int i) {
			return getRuleContext(Member_initializerContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_initializer_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_initializer_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_initializer_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_initializer_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_initializer_listContext member_initializer_list() throws RecognitionException {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_member_initializer_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1117);
			member_initializer();
			setState(1122);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1118);
					match(COMMA);
					setState(1119);
					member_initializer();
					}
					} 
				}
				setState(1124);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_initializerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Initializer_valueContext initializer_value() {
			return getRuleContext(Initializer_valueContext.class,0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_initializerContext member_initializer() throws RecognitionException {
		Member_initializerContext _localctx = new Member_initializerContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_member_initializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1125);
			identifier();
			setState(1126);
			match(ASSIGNMENT);
			setState(1127);
			initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Initializer_valueContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return getRuleContext(Object_or_collection_initializerContext.class,0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initializer_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInitializer_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInitializer_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInitializer_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Initializer_valueContext initializer_value() throws RecognitionException {
		Initializer_valueContext _localctx = new Initializer_valueContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_initializer_value);
		try {
			setState(1131);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1129);
				expression();
				}
				break;
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1130);
				object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_initializerContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Element_initializer_listContext element_initializer_list() {
			return getRuleContext(Element_initializer_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Collection_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCollection_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCollection_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCollection_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_initializerContext collection_initializer() throws RecognitionException {
		Collection_initializerContext _localctx = new Collection_initializerContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_collection_initializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1133);
			match(OPEN_BRACE);
			setState(1134);
			element_initializer_list();
			setState(1136);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1135);
				match(COMMA);
				}
			}

			setState(1138);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_initializer_listContext extends ParserRuleContext {
		public List<Element_initializerContext> element_initializer() {
			return getRuleContexts(Element_initializerContext.class);
		}
		public Element_initializerContext element_initializer(int i) {
			return getRuleContext(Element_initializerContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Element_initializer_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_initializer_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterElement_initializer_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitElement_initializer_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitElement_initializer_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_initializer_listContext element_initializer_list() throws RecognitionException {
		Element_initializer_listContext _localctx = new Element_initializer_listContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_element_initializer_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1140);
			element_initializer();
			setState(1145);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1141);
					match(COMMA);
					setState(1142);
					element_initializer();
					}
					} 
				}
				setState(1147);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_initializerContext extends ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return getRuleContext(Non_assignment_expressionContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterElement_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitElement_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitElement_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_initializerContext element_initializer() throws RecognitionException {
		Element_initializerContext _localctx = new Element_initializerContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_element_initializer);
		try {
			setState(1153);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1148);
				non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1149);
				match(OPEN_BRACE);
				setState(1150);
				expression_list();
				setState(1151);
				match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_creation_expressionContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Array_typeContext array_type() {
			return getRuleContext(Array_typeContext.class,0);
		}
		public Array_initializerContext array_initializer() {
			return getRuleContext(Array_initializerContext.class,0);
		}
		public Non_array_typeContext non_array_type() {
			return getRuleContext(Non_array_typeContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Rank_specifierContext rank_specifier() {
			return getRuleContext(Rank_specifierContext.class,0);
		}
		public Rank_specifiersContext rank_specifiers() {
			return getRuleContext(Rank_specifiersContext.class,0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_creation_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArray_creation_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArray_creation_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArray_creation_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_creation_expressionContext array_creation_expression() throws RecognitionException {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_array_creation_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1155);
			match(NEW);
			setState(1172);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(1156);
				array_type();
				setState(1157);
				array_initializer();
				}
				break;
			case 2:
				{
				setState(1159);
				non_array_type();
				setState(1160);
				match(OPEN_BRACKET);
				setState(1161);
				expression_list();
				setState(1162);
				match(CLOSE_BRACKET);
				setState(1164);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					setState(1163);
					rank_specifiers();
					}
				}

				setState(1167);
				_la = _input.LA(1);
				if (_la==OPEN_BRACE) {
					{
					setState(1166);
					array_initializer();
					}
				}

				}
				break;
			case 3:
				{
				setState(1169);
				rank_specifier();
				setState(1170);
				array_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_creation_expressionContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Delegate_typeContext delegate_type() {
			return getRuleContext(Delegate_typeContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Delegate_creation_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_creation_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_creation_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_creation_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_creation_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_creation_expressionContext delegate_creation_expression() throws RecognitionException {
		Delegate_creation_expressionContext _localctx = new Delegate_creation_expressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_delegate_creation_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1174);
			match(NEW);
			setState(1175);
			delegate_type();
			setState(1176);
			match(OPEN_PARENS);
			setState(1177);
			expression();
			setState(1178);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_object_creation_expressionContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return getRuleContext(Anonymous_object_initializerContext.class,0);
		}
		public Anonymous_object_creation_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_object_creation_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnonymous_object_creation_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnonymous_object_creation_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnonymous_object_creation_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_object_creation_expressionContext anonymous_object_creation_expression() throws RecognitionException {
		Anonymous_object_creation_expressionContext _localctx = new Anonymous_object_creation_expressionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_anonymous_object_creation_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1180);
			match(NEW);
			setState(1181);
			anonymous_object_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_object_initializerContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Member_declarator_listContext member_declarator_list() {
			return getRuleContext(Member_declarator_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_object_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnonymous_object_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnonymous_object_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnonymous_object_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_object_initializerContext anonymous_object_initializer() throws RecognitionException {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_anonymous_object_initializer);
		int _la;
		try {
			setState(1192);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1183);
				match(OPEN_BRACE);
				setState(1184);
				match(CLOSE_BRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1185);
				match(OPEN_BRACE);
				setState(1186);
				member_declarator_list();
				setState(1188);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1187);
					match(COMMA);
					}
				}

				setState(1190);
				match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_declarator_listContext extends ParserRuleContext {
		public List<Member_declaratorContext> member_declarator() {
			return getRuleContexts(Member_declaratorContext.class);
		}
		public Member_declaratorContext member_declarator(int i) {
			return getRuleContext(Member_declaratorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_declarator_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_declarator_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_declarator_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_declarator_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_declarator_listContext member_declarator_list() throws RecognitionException {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_member_declarator_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1194);
			member_declarator();
			setState(1199);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1195);
					match(COMMA);
					setState(1196);
					member_declarator();
					}
					} 
				}
				setState(1201);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_declaratorContext extends ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return getRuleContext(Primary_expressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_declaratorContext member_declarator() throws RecognitionException {
		Member_declaratorContext _localctx = new Member_declaratorContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_member_declarator);
		try {
			setState(1207);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1202);
				primary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1203);
				identifier();
				setState(1204);
				match(ASSIGNMENT);
				setState(1205);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Typeof_expressionContext extends ParserRuleContext {
		public TerminalNode TYPEOF() { return getToken(CSharp5Parser.TYPEOF, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return getRuleContext(Unbound_type_nameContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public Typeof_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeof_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterTypeof_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitTypeof_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitTypeof_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Typeof_expressionContext typeof_expression() throws RecognitionException {
		Typeof_expressionContext _localctx = new Typeof_expressionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_typeof_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1209);
			match(TYPEOF);
			setState(1210);
			match(OPEN_PARENS);
			setState(1219);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1211);
				unbound_type_name();
				setState(1212);
				match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				setState(1214);
				type();
				setState(1215);
				match(CLOSE_PARENS);
				}
				break;
			case 3:
				{
				setState(1217);
				match(VOID);
				setState(1218);
				match(CLOSE_PARENS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unbound_type_nameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOUBLE_COLON() { return getToken(CSharp5Parser.DOUBLE_COLON, 0); }
		public List<TerminalNode> DOT() { return getTokens(CSharp5Parser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CSharp5Parser.DOT, i);
		}
		public List<Generic_dimension_specifierContext> generic_dimension_specifier() {
			return getRuleContexts(Generic_dimension_specifierContext.class);
		}
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return getRuleContext(Generic_dimension_specifierContext.class,i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unbound_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnbound_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnbound_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnbound_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unbound_type_nameContext unbound_type_name() throws RecognitionException {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_unbound_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1221);
			identifier();
			setState(1230);
			switch (_input.LA(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				setState(1223);
				_la = _input.LA(1);
				if (_la==LT) {
					{
					setState(1222);
					generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				setState(1225);
				match(DOUBLE_COLON);
				setState(1226);
				identifier();
				setState(1228);
				_la = _input.LA(1);
				if (_la==LT) {
					{
					setState(1227);
					generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(1232);
				match(DOT);
				setState(1233);
				identifier();
				setState(1235);
				_la = _input.LA(1);
				if (_la==LT) {
					{
					setState(1234);
					generic_dimension_specifier();
					}
				}

				}
				}
				setState(1241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_dimension_specifierContext extends ParserRuleContext {
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public CommasContext commas() {
			return getRuleContext(CommasContext.class,0);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_dimension_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGeneric_dimension_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGeneric_dimension_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGeneric_dimension_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_dimension_specifierContext generic_dimension_specifier() throws RecognitionException {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_generic_dimension_specifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1242);
			match(LT);
			setState(1244);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1243);
				commas();
				}
			}

			setState(1246);
			match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommasContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public CommasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commas; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCommas(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCommas(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCommas(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommasContext commas() throws RecognitionException {
		CommasContext _localctx = new CommasContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_commas);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1248);
			match(COMMA);
			setState(1252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1249);
				match(COMMA);
				}
				}
				setState(1254);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Checked_expressionContext extends ParserRuleContext {
		public TerminalNode CHECKED() { return getToken(CSharp5Parser.CHECKED, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Checked_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checked_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterChecked_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitChecked_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitChecked_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Checked_expressionContext checked_expression() throws RecognitionException {
		Checked_expressionContext _localctx = new Checked_expressionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_checked_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1255);
			match(CHECKED);
			setState(1256);
			match(OPEN_PARENS);
			setState(1257);
			expression();
			setState(1258);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unchecked_expressionContext extends ParserRuleContext {
		public TerminalNode UNCHECKED() { return getToken(CSharp5Parser.UNCHECKED, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Unchecked_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unchecked_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnchecked_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnchecked_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnchecked_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unchecked_expressionContext unchecked_expression() throws RecognitionException {
		Unchecked_expressionContext _localctx = new Unchecked_expressionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_unchecked_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1260);
			match(UNCHECKED);
			setState(1261);
			match(OPEN_PARENS);
			setState(1262);
			expression();
			setState(1263);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(CSharp5Parser.DEFAULT, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Default_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDefault_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDefault_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDefault_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_expressionContext default_value_expression() throws RecognitionException {
		Default_value_expressionContext _localctx = new Default_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_default_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			match(DEFAULT);
			setState(1266);
			match(OPEN_PARENS);
			setState(1267);
			type();
			setState(1268);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return getRuleContext(Cast_expressionContext.class,0);
		}
		public Primary_expressionContext primary_expression() {
			return getRuleContext(Primary_expressionContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(CSharp5Parser.PLUS, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(CSharp5Parser.MINUS, 0); }
		public TerminalNode BANG() { return getToken(CSharp5Parser.BANG, 0); }
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public Pre_increment_expressionContext pre_increment_expression() {
			return getRuleContext(Pre_increment_expressionContext.class,0);
		}
		public Pre_decrement_expressionContext pre_decrement_expression() {
			return getRuleContext(Pre_decrement_expressionContext.class,0);
		}
		public Unary_expression_unsafeContext unary_expression_unsafe() {
			return getRuleContext(Unary_expression_unsafeContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_unary_expression);
		try {
			setState(1283);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1270);
				cast_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1271);
				primary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1272);
				match(PLUS);
				setState(1273);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1274);
				match(MINUS);
				setState(1275);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1276);
				match(BANG);
				setState(1277);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1278);
				match(TILDE);
				setState(1279);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1280);
				pre_increment_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1281);
				pre_decrement_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1282);
				unary_expression_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scan_for_cast_generic_precedenceContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Cast_disambiguation_tokenContext cast_disambiguation_token() {
			return getRuleContext(Cast_disambiguation_tokenContext.class,0);
		}
		public Scan_for_cast_generic_precedenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scan_for_cast_generic_precedence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterScan_for_cast_generic_precedence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitScan_for_cast_generic_precedence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitScan_for_cast_generic_precedence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scan_for_cast_generic_precedenceContext scan_for_cast_generic_precedence() throws RecognitionException {
		Scan_for_cast_generic_precedenceContext _localctx = new Scan_for_cast_generic_precedenceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_scan_for_cast_generic_precedence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			match(OPEN_PARENS);
			setState(1286);
			type();
			setState(1287);
			match(CLOSE_PARENS);
			setState(1288);
			cast_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_disambiguation_tokenContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public TerminalNode BANG() { return getToken(CSharp5Parser.BANG, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode ASYNC() { return getToken(CSharp5Parser.ASYNC, 0); }
		public TerminalNode BASE() { return getToken(CSharp5Parser.BASE, 0); }
		public TerminalNode BOOL() { return getToken(CSharp5Parser.BOOL, 0); }
		public TerminalNode BREAK() { return getToken(CSharp5Parser.BREAK, 0); }
		public TerminalNode BYTE() { return getToken(CSharp5Parser.BYTE, 0); }
		public TerminalNode CASE() { return getToken(CSharp5Parser.CASE, 0); }
		public TerminalNode CATCH() { return getToken(CSharp5Parser.CATCH, 0); }
		public TerminalNode CHAR() { return getToken(CSharp5Parser.CHAR, 0); }
		public TerminalNode CHECKED() { return getToken(CSharp5Parser.CHECKED, 0); }
		public TerminalNode CLASS() { return getToken(CSharp5Parser.CLASS, 0); }
		public TerminalNode CONST() { return getToken(CSharp5Parser.CONST, 0); }
		public TerminalNode CONTINUE() { return getToken(CSharp5Parser.CONTINUE, 0); }
		public TerminalNode DECIMAL() { return getToken(CSharp5Parser.DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(CSharp5Parser.DEFAULT, 0); }
		public TerminalNode DELEGATE() { return getToken(CSharp5Parser.DELEGATE, 0); }
		public TerminalNode DO() { return getToken(CSharp5Parser.DO, 0); }
		public TerminalNode DOUBLE() { return getToken(CSharp5Parser.DOUBLE, 0); }
		public TerminalNode ELSE() { return getToken(CSharp5Parser.ELSE, 0); }
		public TerminalNode ENUM() { return getToken(CSharp5Parser.ENUM, 0); }
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public TerminalNode EXPLICIT() { return getToken(CSharp5Parser.EXPLICIT, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public TerminalNode FINALLY() { return getToken(CSharp5Parser.FINALLY, 0); }
		public TerminalNode FIXED() { return getToken(CSharp5Parser.FIXED, 0); }
		public TerminalNode FLOAT() { return getToken(CSharp5Parser.FLOAT, 0); }
		public TerminalNode FOR() { return getToken(CSharp5Parser.FOR, 0); }
		public TerminalNode FOREACH() { return getToken(CSharp5Parser.FOREACH, 0); }
		public TerminalNode GOTO() { return getToken(CSharp5Parser.GOTO, 0); }
		public TerminalNode IF() { return getToken(CSharp5Parser.IF, 0); }
		public TerminalNode IMPLICIT() { return getToken(CSharp5Parser.IMPLICIT, 0); }
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public TerminalNode INT() { return getToken(CSharp5Parser.INT, 0); }
		public TerminalNode INTERFACE() { return getToken(CSharp5Parser.INTERFACE, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode LOCK() { return getToken(CSharp5Parser.LOCK, 0); }
		public TerminalNode LONG() { return getToken(CSharp5Parser.LONG, 0); }
		public TerminalNode NAMESPACE() { return getToken(CSharp5Parser.NAMESPACE, 0); }
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode OBJECT() { return getToken(CSharp5Parser.OBJECT, 0); }
		public TerminalNode OPERATOR() { return getToken(CSharp5Parser.OPERATOR, 0); }
		public TerminalNode OUT() { return getToken(CSharp5Parser.OUT, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode PARAMS() { return getToken(CSharp5Parser.PARAMS, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode READONLY() { return getToken(CSharp5Parser.READONLY, 0); }
		public TerminalNode REF() { return getToken(CSharp5Parser.REF, 0); }
		public TerminalNode RETURN() { return getToken(CSharp5Parser.RETURN, 0); }
		public TerminalNode SBYTE() { return getToken(CSharp5Parser.SBYTE, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode SHORT() { return getToken(CSharp5Parser.SHORT, 0); }
		public TerminalNode SIZEOF() { return getToken(CSharp5Parser.SIZEOF, 0); }
		public TerminalNode STACKALLOC() { return getToken(CSharp5Parser.STACKALLOC, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode STRING() { return getToken(CSharp5Parser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(CSharp5Parser.STRUCT, 0); }
		public TerminalNode SWITCH() { return getToken(CSharp5Parser.SWITCH, 0); }
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode THROW() { return getToken(CSharp5Parser.THROW, 0); }
		public TerminalNode TRY() { return getToken(CSharp5Parser.TRY, 0); }
		public TerminalNode TYPEOF() { return getToken(CSharp5Parser.TYPEOF, 0); }
		public TerminalNode UINT() { return getToken(CSharp5Parser.UINT, 0); }
		public TerminalNode ULONG() { return getToken(CSharp5Parser.ULONG, 0); }
		public TerminalNode UNCHECKED() { return getToken(CSharp5Parser.UNCHECKED, 0); }
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public TerminalNode USHORT() { return getToken(CSharp5Parser.USHORT, 0); }
		public TerminalNode USING() { return getToken(CSharp5Parser.USING, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public TerminalNode VOLATILE() { return getToken(CSharp5Parser.VOLATILE, 0); }
		public TerminalNode WHILE() { return getToken(CSharp5Parser.WHILE, 0); }
		public Cast_disambiguation_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_disambiguation_token; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCast_disambiguation_token(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCast_disambiguation_token(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCast_disambiguation_token(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_disambiguation_tokenContext cast_disambiguation_token() throws RecognitionException {
		Cast_disambiguation_tokenContext _localctx = new Cast_disambiguation_tokenContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_cast_disambiguation_token);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1368);
			switch (_input.LA(1)) {
			case TILDE:
				{
				setState(1290);
				match(TILDE);
				}
				break;
			case BANG:
				{
				setState(1291);
				match(BANG);
				}
				break;
			case OPEN_PARENS:
				{
				setState(1292);
				match(OPEN_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				setState(1293);
				identifier();
				}
				break;
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				{
				setState(1294);
				literal();
				}
				break;
			case ABSTRACT:
				{
				setState(1295);
				match(ABSTRACT);
				}
				break;
			case ASYNC:
				{
				setState(1296);
				match(ASYNC);
				}
				break;
			case BASE:
				{
				setState(1297);
				match(BASE);
				}
				break;
			case BOOL:
				{
				setState(1298);
				match(BOOL);
				}
				break;
			case BREAK:
				{
				setState(1299);
				match(BREAK);
				}
				break;
			case BYTE:
				{
				setState(1300);
				match(BYTE);
				}
				break;
			case CASE:
				{
				setState(1301);
				match(CASE);
				}
				break;
			case CATCH:
				{
				setState(1302);
				match(CATCH);
				}
				break;
			case CHAR:
				{
				setState(1303);
				match(CHAR);
				}
				break;
			case CHECKED:
				{
				setState(1304);
				match(CHECKED);
				}
				break;
			case CLASS:
				{
				setState(1305);
				match(CLASS);
				}
				break;
			case CONST:
				{
				setState(1306);
				match(CONST);
				}
				break;
			case CONTINUE:
				{
				setState(1307);
				match(CONTINUE);
				}
				break;
			case DECIMAL:
				{
				setState(1308);
				match(DECIMAL);
				}
				break;
			case DEFAULT:
				{
				setState(1309);
				match(DEFAULT);
				}
				break;
			case DELEGATE:
				{
				setState(1310);
				match(DELEGATE);
				}
				break;
			case DO:
				{
				setState(1311);
				match(DO);
				}
				break;
			case DOUBLE:
				{
				setState(1312);
				match(DOUBLE);
				}
				break;
			case ELSE:
				{
				setState(1313);
				match(ELSE);
				}
				break;
			case ENUM:
				{
				setState(1314);
				match(ENUM);
				}
				break;
			case EVENT:
				{
				setState(1315);
				match(EVENT);
				}
				break;
			case EXPLICIT:
				{
				setState(1316);
				match(EXPLICIT);
				}
				break;
			case EXTERN:
				{
				setState(1317);
				match(EXTERN);
				}
				break;
			case FINALLY:
				{
				setState(1318);
				match(FINALLY);
				}
				break;
			case FIXED:
				{
				setState(1319);
				match(FIXED);
				}
				break;
			case FLOAT:
				{
				setState(1320);
				match(FLOAT);
				}
				break;
			case FOR:
				{
				setState(1321);
				match(FOR);
				}
				break;
			case FOREACH:
				{
				setState(1322);
				match(FOREACH);
				}
				break;
			case GOTO:
				{
				setState(1323);
				match(GOTO);
				}
				break;
			case IF:
				{
				setState(1324);
				match(IF);
				}
				break;
			case IMPLICIT:
				{
				setState(1325);
				match(IMPLICIT);
				}
				break;
			case IN:
				{
				setState(1326);
				match(IN);
				}
				break;
			case INT:
				{
				setState(1327);
				match(INT);
				}
				break;
			case INTERFACE:
				{
				setState(1328);
				match(INTERFACE);
				}
				break;
			case INTERNAL:
				{
				setState(1329);
				match(INTERNAL);
				}
				break;
			case LOCK:
				{
				setState(1330);
				match(LOCK);
				}
				break;
			case LONG:
				{
				setState(1331);
				match(LONG);
				}
				break;
			case NAMESPACE:
				{
				setState(1332);
				match(NAMESPACE);
				}
				break;
			case NEW:
				{
				setState(1333);
				match(NEW);
				}
				break;
			case OBJECT:
				{
				setState(1334);
				match(OBJECT);
				}
				break;
			case OPERATOR:
				{
				setState(1335);
				match(OPERATOR);
				}
				break;
			case OUT:
				{
				setState(1336);
				match(OUT);
				}
				break;
			case OVERRIDE:
				{
				setState(1337);
				match(OVERRIDE);
				}
				break;
			case PARAMS:
				{
				setState(1338);
				match(PARAMS);
				}
				break;
			case PRIVATE:
				{
				setState(1339);
				match(PRIVATE);
				}
				break;
			case PROTECTED:
				{
				setState(1340);
				match(PROTECTED);
				}
				break;
			case PUBLIC:
				{
				setState(1341);
				match(PUBLIC);
				}
				break;
			case READONLY:
				{
				setState(1342);
				match(READONLY);
				}
				break;
			case REF:
				{
				setState(1343);
				match(REF);
				}
				break;
			case RETURN:
				{
				setState(1344);
				match(RETURN);
				}
				break;
			case SBYTE:
				{
				setState(1345);
				match(SBYTE);
				}
				break;
			case SEALED:
				{
				setState(1346);
				match(SEALED);
				}
				break;
			case SHORT:
				{
				setState(1347);
				match(SHORT);
				}
				break;
			case SIZEOF:
				{
				setState(1348);
				match(SIZEOF);
				}
				break;
			case STACKALLOC:
				{
				setState(1349);
				match(STACKALLOC);
				}
				break;
			case STATIC:
				{
				setState(1350);
				match(STATIC);
				}
				break;
			case STRING:
				{
				setState(1351);
				match(STRING);
				}
				break;
			case STRUCT:
				{
				setState(1352);
				match(STRUCT);
				}
				break;
			case SWITCH:
				{
				setState(1353);
				match(SWITCH);
				}
				break;
			case THIS:
				{
				setState(1354);
				match(THIS);
				}
				break;
			case THROW:
				{
				setState(1355);
				match(THROW);
				}
				break;
			case TRY:
				{
				setState(1356);
				match(TRY);
				}
				break;
			case TYPEOF:
				{
				setState(1357);
				match(TYPEOF);
				}
				break;
			case UINT:
				{
				setState(1358);
				match(UINT);
				}
				break;
			case ULONG:
				{
				setState(1359);
				match(ULONG);
				}
				break;
			case UNCHECKED:
				{
				setState(1360);
				match(UNCHECKED);
				}
				break;
			case UNSAFE:
				{
				setState(1361);
				match(UNSAFE);
				}
				break;
			case USHORT:
				{
				setState(1362);
				match(USHORT);
				}
				break;
			case USING:
				{
				setState(1363);
				match(USING);
				}
				break;
			case VIRTUAL:
				{
				setState(1364);
				match(VIRTUAL);
				}
				break;
			case VOID:
				{
				setState(1365);
				match(VOID);
				}
				break;
			case VOLATILE:
				{
				setState(1366);
				match(VOLATILE);
				}
				break;
			case WHILE:
				{
				setState(1367);
				match(WHILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pre_increment_expressionContext extends ParserRuleContext {
		public TerminalNode OP_INC() { return getToken(CSharp5Parser.OP_INC, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Pre_increment_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pre_increment_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPre_increment_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPre_increment_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPre_increment_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pre_increment_expressionContext pre_increment_expression() throws RecognitionException {
		Pre_increment_expressionContext _localctx = new Pre_increment_expressionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_pre_increment_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1370);
			match(OP_INC);
			setState(1371);
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pre_decrement_expressionContext extends ParserRuleContext {
		public TerminalNode OP_DEC() { return getToken(CSharp5Parser.OP_DEC, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Pre_decrement_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pre_decrement_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPre_decrement_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPre_decrement_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPre_decrement_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pre_decrement_expressionContext pre_decrement_expression() throws RecognitionException {
		Pre_decrement_expressionContext _localctx = new Pre_decrement_expressionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_pre_decrement_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			match(OP_DEC);
			setState(1374);
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_expressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCast_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCast_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCast_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_expressionContext cast_expression() throws RecognitionException {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_cast_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376);
			match(OPEN_PARENS);
			setState(1377);
			type();
			setState(1378);
			match(CLOSE_PARENS);
			setState(1379);
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiplicative_expressionContext extends ParserRuleContext {
		public List<Unary_expressionContext> unary_expression() {
			return getRuleContexts(Unary_expressionContext.class);
		}
		public Unary_expressionContext unary_expression(int i) {
			return getRuleContext(Unary_expressionContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(CSharp5Parser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CSharp5Parser.STAR, i);
		}
		public List<TerminalNode> DIV() { return getTokens(CSharp5Parser.DIV); }
		public TerminalNode DIV(int i) {
			return getToken(CSharp5Parser.DIV, i);
		}
		public List<TerminalNode> PERCENT() { return getTokens(CSharp5Parser.PERCENT); }
		public TerminalNode PERCENT(int i) {
			return getToken(CSharp5Parser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiplicative_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMultiplicative_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMultiplicative_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMultiplicative_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiplicative_expressionContext multiplicative_expression() throws RecognitionException {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_multiplicative_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1381);
			unary_expression();
			setState(1390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (STAR - 128)) | (1L << (DIV - 128)) | (1L << (PERCENT - 128)))) != 0)) {
				{
				setState(1388);
				switch (_input.LA(1)) {
				case STAR:
					{
					{
					setState(1382);
					match(STAR);
					setState(1383);
					unary_expression();
					}
					}
					break;
				case DIV:
					{
					{
					setState(1384);
					match(DIV);
					setState(1385);
					unary_expression();
					}
					}
					break;
				case PERCENT:
					{
					{
					setState(1386);
					match(PERCENT);
					setState(1387);
					unary_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiplicative_expressionContext> multiplicative_expression() {
			return getRuleContexts(Multiplicative_expressionContext.class);
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return getRuleContext(Multiplicative_expressionContext.class,i);
		}
		public List<TerminalNode> PLUS() { return getTokens(CSharp5Parser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(CSharp5Parser.PLUS, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(CSharp5Parser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(CSharp5Parser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_additive_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1393);
			multiplicative_expression();
			setState(1400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				setState(1398);
				switch (_input.LA(1)) {
				case PLUS:
					{
					{
					setState(1394);
					match(PLUS);
					setState(1395);
					multiplicative_expression();
					}
					}
					break;
				case MINUS:
					{
					{
					setState(1396);
					match(MINUS);
					setState(1397);
					multiplicative_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1402);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shift_expressionContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<TerminalNode> OP_LEFT_SHIFT() { return getTokens(CSharp5Parser.OP_LEFT_SHIFT); }
		public TerminalNode OP_LEFT_SHIFT(int i) {
			return getToken(CSharp5Parser.OP_LEFT_SHIFT, i);
		}
		public List<Right_shiftContext> right_shift() {
			return getRuleContexts(Right_shiftContext.class);
		}
		public Right_shiftContext right_shift(int i) {
			return getRuleContext(Right_shiftContext.class,i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shift_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterShift_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitShift_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitShift_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Shift_expressionContext shift_expression() throws RecognitionException {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_shift_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1403);
			additive_expression();
			setState(1411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1409);
					switch (_input.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						{
						setState(1404);
						match(OP_LEFT_SHIFT);
						setState(1405);
						additive_expression();
						}
						}
						break;
					case GT:
						{
						{
						setState(1406);
						right_shift();
						setState(1407);
						additive_expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(1413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Shift_expressionContext> shift_expression() {
			return getRuleContexts(Shift_expressionContext.class);
		}
		public Shift_expressionContext shift_expression(int i) {
			return getRuleContext(Shift_expressionContext.class,i);
		}
		public List<TerminalNode> LT() { return getTokens(CSharp5Parser.LT); }
		public TerminalNode LT(int i) {
			return getToken(CSharp5Parser.LT, i);
		}
		public List<TerminalNode> GT() { return getTokens(CSharp5Parser.GT); }
		public TerminalNode GT(int i) {
			return getToken(CSharp5Parser.GT, i);
		}
		public List<TerminalNode> OP_LE() { return getTokens(CSharp5Parser.OP_LE); }
		public TerminalNode OP_LE(int i) {
			return getToken(CSharp5Parser.OP_LE, i);
		}
		public List<TerminalNode> OP_GE() { return getTokens(CSharp5Parser.OP_GE); }
		public TerminalNode OP_GE(int i) {
			return getToken(CSharp5Parser.OP_GE, i);
		}
		public List<TerminalNode> IS() { return getTokens(CSharp5Parser.IS); }
		public TerminalNode IS(int i) {
			return getToken(CSharp5Parser.IS, i);
		}
		public List<IsTypeContext> isType() {
			return getRuleContexts(IsTypeContext.class);
		}
		public IsTypeContext isType(int i) {
			return getRuleContext(IsTypeContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(CSharp5Parser.AS); }
		public TerminalNode AS(int i) {
			return getToken(CSharp5Parser.AS, i);
		}
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_relational_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1414);
			shift_expression();
			setState(1429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AS || _la==IS || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (LT - 137)) | (1L << (GT - 137)) | (1L << (OP_LE - 137)) | (1L << (OP_GE - 137)))) != 0)) {
				{
				setState(1427);
				switch (_input.LA(1)) {
				case LT:
					{
					setState(1415);
					match(LT);
					setState(1416);
					shift_expression();
					}
					break;
				case GT:
					{
					setState(1417);
					match(GT);
					setState(1418);
					shift_expression();
					}
					break;
				case OP_LE:
					{
					setState(1419);
					match(OP_LE);
					setState(1420);
					shift_expression();
					}
					break;
				case OP_GE:
					{
					setState(1421);
					match(OP_GE);
					setState(1422);
					shift_expression();
					}
					break;
				case IS:
					{
					setState(1423);
					match(IS);
					setState(1424);
					isType();
					}
					break;
				case AS:
					{
					setState(1425);
					match(AS);
					setState(1426);
					type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scan_for_shift_generic_precedenceContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public Shift_disambiguation_tokenContext shift_disambiguation_token() {
			return getRuleContext(Shift_disambiguation_tokenContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Scan_for_shift_generic_precedenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scan_for_shift_generic_precedence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterScan_for_shift_generic_precedence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitScan_for_shift_generic_precedence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitScan_for_shift_generic_precedence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scan_for_shift_generic_precedenceContext scan_for_shift_generic_precedence() throws RecognitionException {
		Scan_for_shift_generic_precedenceContext _localctx = new Scan_for_shift_generic_precedenceContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_scan_for_shift_generic_precedence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1432);
			identifier();
			setState(1433);
			match(LT);
			setState(1434);
			type();
			setState(1439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1435);
				match(COMMA);
				setState(1436);
				type();
				}
				}
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1442);
			match(GT);
			setState(1443);
			shift_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shift_disambiguation_tokenContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(CSharp5Parser.DOT, 0); }
		public TerminalNode INTERR() { return getToken(CSharp5Parser.INTERR, 0); }
		public TerminalNode OP_EQ() { return getToken(CSharp5Parser.OP_EQ, 0); }
		public TerminalNode OP_NE() { return getToken(CSharp5Parser.OP_NE, 0); }
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public Shift_disambiguation_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shift_disambiguation_token; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterShift_disambiguation_token(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitShift_disambiguation_token(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitShift_disambiguation_token(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Shift_disambiguation_tokenContext shift_disambiguation_token() throws RecognitionException {
		Shift_disambiguation_tokenContext _localctx = new Shift_disambiguation_tokenContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_shift_disambiguation_token);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1445);
			_la = _input.LA(1);
			if ( !(((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (CLOSE_BRACKET - 119)) | (1L << (OPEN_PARENS - 119)) | (1L << (CLOSE_PARENS - 119)) | (1L << (DOT - 119)) | (1L << (COMMA - 119)) | (1L << (COLON - 119)) | (1L << (SEMICOLON - 119)) | (1L << (GT - 119)) | (1L << (INTERR - 119)) | (1L << (OP_EQ - 119)) | (1L << (OP_NE - 119)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsTypeContext extends ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return getRuleContext(Non_nullable_value_typeContext.class,0);
		}
		public TerminalNode INTERR() { return getToken(CSharp5Parser.INTERR, 0); }
		public IsTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIsType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIsType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIsType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsTypeContext isType() throws RecognitionException {
		IsTypeContext _localctx = new IsTypeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_isType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1447);
			non_nullable_value_type();
			setState(1449);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1448);
				match(INTERR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_disambiguation_tokenContext extends ParserRuleContext {
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode OP_AND() { return getToken(CSharp5Parser.OP_AND, 0); }
		public TerminalNode OP_OR() { return getToken(CSharp5Parser.OP_OR, 0); }
		public TerminalNode INTERR() { return getToken(CSharp5Parser.INTERR, 0); }
		public Is_disambiguation_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_disambiguation_token; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIs_disambiguation_token(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIs_disambiguation_token(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIs_disambiguation_token(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Is_disambiguation_tokenContext is_disambiguation_token() throws RecognitionException {
		Is_disambiguation_tokenContext _localctx = new Is_disambiguation_tokenContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_is_disambiguation_token);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451);
			_la = _input.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (CLOSE_PARENS - 121)) | (1L << (INTERR - 121)) | (1L << (OP_AND - 121)) | (1L << (OP_OR - 121)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public List<TerminalNode> OP_EQ() { return getTokens(CSharp5Parser.OP_EQ); }
		public TerminalNode OP_EQ(int i) {
			return getToken(CSharp5Parser.OP_EQ, i);
		}
		public List<TerminalNode> OP_NE() { return getTokens(CSharp5Parser.OP_NE); }
		public TerminalNode OP_NE(int i) {
			return getToken(CSharp5Parser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_equality_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1453);
			relational_expression();
			setState(1460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				setState(1458);
				switch (_input.LA(1)) {
				case OP_EQ:
					{
					{
					setState(1454);
					match(OP_EQ);
					setState(1455);
					relational_expression();
					}
					}
					break;
				case OP_NE:
					{
					{
					setState(1456);
					match(OP_NE);
					setState(1457);
					relational_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class And_expressionContext extends ParserRuleContext {
		public List<Equality_expressionContext> equality_expression() {
			return getRuleContexts(Equality_expressionContext.class);
		}
		public Equality_expressionContext equality_expression(int i) {
			return getRuleContext(Equality_expressionContext.class,i);
		}
		public List<TerminalNode> AMP() { return getTokens(CSharp5Parser.AMP); }
		public TerminalNode AMP(int i) {
			return getToken(CSharp5Parser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnd_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnd_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnd_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final And_expressionContext and_expression() throws RecognitionException {
		And_expressionContext _localctx = new And_expressionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_and_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463);
			equality_expression();
			setState(1468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AMP) {
				{
				{
				setState(1464);
				match(AMP);
				setState(1465);
				equality_expression();
				}
				}
				setState(1470);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exclusive_or_expressionContext extends ParserRuleContext {
		public List<And_expressionContext> and_expression() {
			return getRuleContexts(And_expressionContext.class);
		}
		public And_expressionContext and_expression(int i) {
			return getRuleContext(And_expressionContext.class,i);
		}
		public List<TerminalNode> CARET() { return getTokens(CSharp5Parser.CARET); }
		public TerminalNode CARET(int i) {
			return getToken(CSharp5Parser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusive_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExclusive_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExclusive_or_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExclusive_or_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exclusive_or_expressionContext exclusive_or_expression() throws RecognitionException {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_exclusive_or_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			and_expression();
			setState(1476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CARET) {
				{
				{
				setState(1472);
				match(CARET);
				setState(1473);
				and_expression();
				}
				}
				setState(1478);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inclusive_or_expressionContext extends ParserRuleContext {
		public List<Exclusive_or_expressionContext> exclusive_or_expression() {
			return getRuleContexts(Exclusive_or_expressionContext.class);
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return getRuleContext(Exclusive_or_expressionContext.class,i);
		}
		public List<TerminalNode> BITWISE_OR() { return getTokens(CSharp5Parser.BITWISE_OR); }
		public TerminalNode BITWISE_OR(int i) {
			return getToken(CSharp5Parser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inclusive_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInclusive_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInclusive_or_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInclusive_or_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inclusive_or_expressionContext inclusive_or_expression() throws RecognitionException {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_inclusive_or_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1479);
			exclusive_or_expression();
			setState(1484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				setState(1480);
				match(BITWISE_OR);
				setState(1481);
				exclusive_or_expression();
				}
				}
				setState(1486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_and_expressionContext extends ParserRuleContext {
		public List<Inclusive_or_expressionContext> inclusive_or_expression() {
			return getRuleContexts(Inclusive_or_expressionContext.class);
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return getRuleContext(Inclusive_or_expressionContext.class,i);
		}
		public List<TerminalNode> OP_AND() { return getTokens(CSharp5Parser.OP_AND); }
		public TerminalNode OP_AND(int i) {
			return getToken(CSharp5Parser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConditional_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConditional_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConditional_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_and_expressionContext conditional_and_expression() throws RecognitionException {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_conditional_and_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1487);
			inclusive_or_expression();
			setState(1492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OP_AND) {
				{
				{
				setState(1488);
				match(OP_AND);
				setState(1489);
				inclusive_or_expression();
				}
				}
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_or_expressionContext extends ParserRuleContext {
		public List<Conditional_and_expressionContext> conditional_and_expression() {
			return getRuleContexts(Conditional_and_expressionContext.class);
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return getRuleContext(Conditional_and_expressionContext.class,i);
		}
		public List<TerminalNode> OP_OR() { return getTokens(CSharp5Parser.OP_OR); }
		public TerminalNode OP_OR(int i) {
			return getToken(CSharp5Parser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConditional_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConditional_or_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConditional_or_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_or_expressionContext conditional_or_expression() throws RecognitionException {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_conditional_or_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1495);
			conditional_and_expression();
			setState(1500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OP_OR) {
				{
				{
				setState(1496);
				match(OP_OR);
				setState(1497);
				conditional_and_expression();
				}
				}
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_coalescing_expressionContext extends ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return getRuleContext(Conditional_or_expressionContext.class,0);
		}
		public TerminalNode OP_COALESCING() { return getToken(CSharp5Parser.OP_COALESCING, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return getRuleContext(Null_coalescing_expressionContext.class,0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_coalescing_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNull_coalescing_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNull_coalescing_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNull_coalescing_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_coalescing_expressionContext null_coalescing_expression() throws RecognitionException {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_null_coalescing_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1503);
			conditional_or_expression();
			setState(1506);
			_la = _input.LA(1);
			if (_la==OP_COALESCING) {
				{
				setState(1504);
				match(OP_COALESCING);
				setState(1505);
				null_coalescing_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_expressionContext extends ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return getRuleContext(Null_coalescing_expressionContext.class,0);
		}
		public TerminalNode INTERR() { return getToken(CSharp5Parser.INTERR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConditional_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConditional_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConditional_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_expressionContext conditional_expression() throws RecognitionException {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_conditional_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1508);
			null_coalescing_expression();
			setState(1514);
			_la = _input.LA(1);
			if (_la==INTERR) {
				{
				setState(1509);
				match(INTERR);
				setState(1510);
				expression();
				setState(1511);
				match(COLON);
				setState(1512);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lambda_expressionContext extends ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return getRuleContext(Anonymous_function_signatureContext.class,0);
		}
		public Right_arrowContext right_arrow() {
			return getRuleContext(Right_arrowContext.class,0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return getRuleContext(Anonymous_function_bodyContext.class,0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lambda_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLambda_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLambda_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLambda_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lambda_expressionContext lambda_expression() throws RecognitionException {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_lambda_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			anonymous_function_signature();
			setState(1517);
			right_arrow();
			setState(1518);
			anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_method_expressionContext extends ParserRuleContext {
		public TerminalNode DELEGATE() { return getToken(CSharp5Parser.DELEGATE, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
			return getRuleContext(Explicit_anonymous_function_signatureContext.class,0);
		}
		public Anonymous_method_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_method_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnonymous_method_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnonymous_method_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnonymous_method_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_method_expressionContext anonymous_method_expression() throws RecognitionException {
		Anonymous_method_expressionContext _localctx = new Anonymous_method_expressionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_anonymous_method_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1520);
			match(DELEGATE);
			setState(1522);
			_la = _input.LA(1);
			if (_la==OPEN_PARENS) {
				{
				setState(1521);
				explicit_anonymous_function_signature();
				}
			}

			setState(1524);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_function_signatureContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return getRuleContext(Explicit_anonymous_function_parameter_listContext.class,0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return getRuleContext(Implicit_anonymous_function_parameter_listContext.class,0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return getRuleContext(Implicit_anonymous_function_parameterContext.class,0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_function_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnonymous_function_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnonymous_function_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnonymous_function_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_function_signatureContext anonymous_function_signature() throws RecognitionException {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_anonymous_function_signature);
		try {
			setState(1537);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1526);
				match(OPEN_PARENS);
				setState(1527);
				match(CLOSE_PARENS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1528);
				match(OPEN_PARENS);
				setState(1529);
				explicit_anonymous_function_parameter_list();
				setState(1530);
				match(CLOSE_PARENS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1532);
				match(OPEN_PARENS);
				setState(1533);
				implicit_anonymous_function_parameter_list();
				setState(1534);
				match(CLOSE_PARENS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1536);
				implicit_anonymous_function_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_anonymous_function_signatureContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return getRuleContext(Explicit_anonymous_function_parameter_listContext.class,0);
		}
		public Explicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_anonymous_function_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExplicit_anonymous_function_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExplicit_anonymous_function_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExplicit_anonymous_function_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() throws RecognitionException {
		Explicit_anonymous_function_signatureContext _localctx = new Explicit_anonymous_function_signatureContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_explicit_anonymous_function_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1539);
			match(OPEN_PARENS);
			setState(1541);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				setState(1540);
				explicit_anonymous_function_parameter_list();
				}
			}

			setState(1543);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_anonymous_function_parameter_listContext extends ParserRuleContext {
		public List<Explicit_anonymous_function_parameterContext> explicit_anonymous_function_parameter() {
			return getRuleContexts(Explicit_anonymous_function_parameterContext.class);
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return getRuleContext(Explicit_anonymous_function_parameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_anonymous_function_parameter_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExplicit_anonymous_function_parameter_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExplicit_anonymous_function_parameter_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExplicit_anonymous_function_parameter_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() throws RecognitionException {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1545);
			explicit_anonymous_function_parameter();
			setState(1550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1546);
				match(COMMA);
				setState(1547);
				explicit_anonymous_function_parameter();
				}
				}
				setState(1552);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_anonymous_function_parameterContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
			return getRuleContext(Anonymous_function_parameter_modifierContext.class,0);
		}
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_anonymous_function_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExplicit_anonymous_function_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExplicit_anonymous_function_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExplicit_anonymous_function_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() throws RecognitionException {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1554);
			_la = _input.LA(1);
			if (_la==OUT || _la==REF) {
				{
				setState(1553);
				anonymous_function_parameter_modifier();
				}
			}

			setState(1556);
			type();
			setState(1557);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_function_parameter_modifierContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(CSharp5Parser.REF, 0); }
		public TerminalNode OUT() { return getToken(CSharp5Parser.OUT, 0); }
		public Anonymous_function_parameter_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_function_parameter_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnonymous_function_parameter_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnonymous_function_parameter_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnonymous_function_parameter_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() throws RecognitionException {
		Anonymous_function_parameter_modifierContext _localctx = new Anonymous_function_parameter_modifierContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_anonymous_function_parameter_modifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1559);
			_la = _input.LA(1);
			if ( !(_la==OUT || _la==REF) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicit_anonymous_function_signatureContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return getRuleContext(Implicit_anonymous_function_parameter_listContext.class,0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return getRuleContext(Implicit_anonymous_function_parameterContext.class,0);
		}
		public Implicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_anonymous_function_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterImplicit_anonymous_function_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitImplicit_anonymous_function_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitImplicit_anonymous_function_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_anonymous_function_signatureContext implicit_anonymous_function_signature() throws RecognitionException {
		Implicit_anonymous_function_signatureContext _localctx = new Implicit_anonymous_function_signatureContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_implicit_anonymous_function_signature);
		int _la;
		try {
			setState(1567);
			switch (_input.LA(1)) {
			case OPEN_PARENS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1561);
				match(OPEN_PARENS);
				setState(1563);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
					{
					setState(1562);
					implicit_anonymous_function_parameter_list();
					}
				}

				setState(1565);
				match(CLOSE_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1566);
				implicit_anonymous_function_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicit_anonymous_function_parameter_listContext extends ParserRuleContext {
		public List<Implicit_anonymous_function_parameterContext> implicit_anonymous_function_parameter() {
			return getRuleContexts(Implicit_anonymous_function_parameterContext.class);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter(int i) {
			return getRuleContext(Implicit_anonymous_function_parameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_anonymous_function_parameter_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterImplicit_anonymous_function_parameter_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitImplicit_anonymous_function_parameter_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitImplicit_anonymous_function_parameter_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() throws RecognitionException {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1569);
			implicit_anonymous_function_parameter();
			setState(1574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1570);
				match(COMMA);
				setState(1571);
				implicit_anonymous_function_parameter();
				}
				}
				setState(1576);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicit_anonymous_function_parameterContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Implicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_anonymous_function_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterImplicit_anonymous_function_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitImplicit_anonymous_function_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitImplicit_anonymous_function_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() throws RecognitionException {
		Implicit_anonymous_function_parameterContext _localctx = new Implicit_anonymous_function_parameterContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_implicit_anonymous_function_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1577);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_function_bodyContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAnonymous_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAnonymous_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAnonymous_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_function_bodyContext anonymous_function_body() throws RecognitionException {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_anonymous_function_body);
		try {
			setState(1581);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1579);
				expression();
				}
				break;
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1580);
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Query_bodyContext query_body() {
			return getRuleContext(Query_bodyContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_query_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			from_clause();
			setState(1584);
			query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public From_contextual_keywordContext from_contextual_keyword() {
			return getRuleContext(From_contextual_keywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			from_contextual_keyword();
			setState(1588);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(1587);
				type();
				}
				break;
			}
			setState(1590);
			identifier();
			setState(1591);
			match(IN);
			setState(1592);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_bodyContext extends ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return getRuleContext(Select_or_group_clauseContext.class,0);
		}
		public Query_body_clausesContext query_body_clauses() {
			return getRuleContext(Query_body_clausesContext.class,0);
		}
		public Query_continuationContext query_continuation() {
			return getRuleContext(Query_continuationContext.class,0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQuery_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQuery_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQuery_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_bodyContext query_body() throws RecognitionException {
		Query_bodyContext _localctx = new Query_bodyContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_query_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1595);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (FROM - 48)) | (1L << (JOIN - 48)) | (1L << (LET - 48)) | (1L << (ORDERBY - 48)) | (1L << (WHERE - 48)))) != 0)) {
				{
				setState(1594);
				query_body_clauses();
				}
			}

			setState(1597);
			select_or_group_clause();
			setState(1599);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(1598);
				query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_body_clausesContext extends ParserRuleContext {
		public List<Query_body_clauseContext> query_body_clause() {
			return getRuleContexts(Query_body_clauseContext.class);
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return getRuleContext(Query_body_clauseContext.class,i);
		}
		public Query_body_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_body_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQuery_body_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQuery_body_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQuery_body_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_body_clausesContext query_body_clauses() throws RecognitionException {
		Query_body_clausesContext _localctx = new Query_body_clausesContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_query_body_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1601);
			query_body_clause();
			setState(1605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (FROM - 48)) | (1L << (JOIN - 48)) | (1L << (LET - 48)) | (1L << (ORDERBY - 48)) | (1L << (WHERE - 48)))) != 0)) {
				{
				{
				setState(1602);
				query_body_clause();
				}
				}
				setState(1607);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_body_clauseContext extends ParserRuleContext {
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Let_clauseContext let_clause() {
			return getRuleContext(Let_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return getRuleContext(Combined_join_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_body_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQuery_body_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQuery_body_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQuery_body_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_body_clauseContext query_body_clause() throws RecognitionException {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_query_body_clause);
		try {
			setState(1613);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(1608);
				from_clause();
				}
				break;
			case LET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1609);
				let_clause();
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1610);
				where_clause();
				}
				break;
			case JOIN:
				enterOuterAlt(_localctx, 4);
				{
				setState(1611);
				combined_join_clause();
				}
				break;
			case ORDERBY:
				enterOuterAlt(_localctx, 5);
				{
				setState(1612);
				orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Let_clauseContext extends ParserRuleContext {
		public Let_contextual_keywordContext let_contextual_keyword() {
			return getRuleContext(Let_contextual_keywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_let_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Let_clauseContext let_clause() throws RecognitionException {
		Let_clauseContext _localctx = new Let_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_let_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1615);
			let_contextual_keyword();
			setState(1616);
			identifier();
			setState(1617);
			match(ASSIGNMENT);
			setState(1618);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return getRuleContext(Where_contextual_keywordContext.class,0);
		}
		public Boolean_expressionContext boolean_expression() {
			return getRuleContext(Boolean_expressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1620);
			where_contextual_keyword();
			setState(1621);
			boolean_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return getRuleContext(Join_contextual_keywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return getRuleContext(On_contextual_keywordContext.class,0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return getRuleContext(Equals_contextual_keywordContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_join_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1623);
			join_contextual_keyword();
			setState(1625);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1624);
				type();
				}
				break;
			}
			setState(1627);
			identifier();
			setState(1628);
			match(IN);
			setState(1629);
			expression();
			setState(1630);
			on_contextual_keyword();
			setState(1631);
			expression();
			setState(1632);
			equals_contextual_keyword();
			setState(1633);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_into_clauseContext extends ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return getRuleContext(Join_contextual_keywordContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return getRuleContext(On_contextual_keywordContext.class,0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return getRuleContext(Equals_contextual_keywordContext.class,0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return getRuleContext(Into_contextual_keywordContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Join_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterJoin_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitJoin_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitJoin_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_into_clauseContext join_into_clause() throws RecognitionException {
		Join_into_clauseContext _localctx = new Join_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_join_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			join_contextual_keyword();
			setState(1637);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1636);
				type();
				}
				break;
			}
			setState(1639);
			identifier();
			setState(1640);
			match(IN);
			setState(1641);
			expression();
			setState(1642);
			on_contextual_keyword();
			setState(1643);
			expression();
			setState(1644);
			equals_contextual_keyword();
			setState(1645);
			expression();
			setState(1646);
			into_contextual_keyword();
			setState(1647);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Combined_join_clauseContext extends ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return getRuleContext(Join_contextual_keywordContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return getRuleContext(On_contextual_keywordContext.class,0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return getRuleContext(Equals_contextual_keywordContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return getRuleContext(Into_contextual_keywordContext.class,0);
		}
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_combined_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCombined_join_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCombined_join_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCombined_join_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Combined_join_clauseContext combined_join_clause() throws RecognitionException {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_combined_join_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			join_contextual_keyword();
			setState(1651);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1650);
				type();
				}
				break;
			}
			setState(1653);
			identifier();
			setState(1654);
			match(IN);
			setState(1655);
			expression();
			setState(1656);
			on_contextual_keyword();
			setState(1657);
			expression();
			setState(1658);
			equals_contextual_keyword();
			setState(1659);
			expression();
			setState(1663);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1660);
				into_contextual_keyword();
				setState(1661);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_clauseContext extends ParserRuleContext {
		public Orderby_contextual_keywordContext orderby_contextual_keyword() {
			return getRuleContext(Orderby_contextual_keywordContext.class,0);
		}
		public OrderingsContext orderings() {
			return getRuleContext(OrderingsContext.class,0);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOrderby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOrderby_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOrderby_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_orderby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1665);
			orderby_contextual_keyword();
			setState(1666);
			orderings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderingsContext extends ParserRuleContext {
		public List<OrderingContext> ordering() {
			return getRuleContexts(OrderingContext.class);
		}
		public OrderingContext ordering(int i) {
			return getRuleContext(OrderingContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public OrderingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOrderings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOrderings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOrderings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderingsContext orderings() throws RecognitionException {
		OrderingsContext _localctx = new OrderingsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_orderings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668);
			ordering();
			setState(1673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1669);
				match(COMMA);
				setState(1670);
				ordering();
				}
				}
				setState(1675);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderingContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ordering_directionContext ordering_direction() {
			return getRuleContext(Ordering_directionContext.class,0);
		}
		public OrderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOrdering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOrdering(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOrdering(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderingContext ordering() throws RecognitionException {
		OrderingContext _localctx = new OrderingContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_ordering);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			expression();
			setState(1678);
			_la = _input.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				setState(1677);
				ordering_direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordering_directionContext extends ParserRuleContext {
		public Ascending_contextual_keywordContext ascending_contextual_keyword() {
			return getRuleContext(Ascending_contextual_keywordContext.class,0);
		}
		public Descending_contextual_keywordContext descending_contextual_keyword() {
			return getRuleContext(Descending_contextual_keywordContext.class,0);
		}
		public Ordering_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordering_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOrdering_direction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOrdering_direction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOrdering_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ordering_directionContext ordering_direction() throws RecognitionException {
		Ordering_directionContext _localctx = new Ordering_directionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_ordering_direction);
		try {
			setState(1682);
			switch (_input.LA(1)) {
			case ASCENDING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1680);
				ascending_contextual_keyword();
				}
				break;
			case DESCENDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1681);
				descending_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_or_group_clauseContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_or_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSelect_or_group_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSelect_or_group_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSelect_or_group_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_or_group_clauseContext select_or_group_clause() throws RecognitionException {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_select_or_group_clause);
		try {
			setState(1686);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1684);
				select_clause();
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1685);
				group_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Select_contextual_keywordContext select_contextual_keyword() {
			return getRuleContext(Select_contextual_keywordContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_select_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1688);
			select_contextual_keyword();
			setState(1689);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public Group_contextual_keywordContext group_contextual_keyword() {
			return getRuleContext(Group_contextual_keywordContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public By_contextual_keywordContext by_contextual_keyword() {
			return getRuleContext(By_contextual_keywordContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_group_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691);
			group_contextual_keyword();
			setState(1692);
			expression();
			setState(1693);
			by_contextual_keyword();
			setState(1694);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_continuationContext extends ParserRuleContext {
		public Into_contextual_keywordContext into_contextual_keyword() {
			return getRuleContext(Into_contextual_keywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_bodyContext query_body() {
			return getRuleContext(Query_bodyContext.class,0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_continuation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQuery_continuation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQuery_continuation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQuery_continuation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_continuationContext query_continuation() throws RecognitionException {
		Query_continuationContext _localctx = new Query_continuationContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_query_continuation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1696);
			into_contextual_keyword();
			setState(1697);
			identifier();
			setState(1698);
			query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AWAIT() { return getToken(CSharp5Parser.AWAIT, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1700);
			unary_expression();
			setState(1701);
			assignment_operator();
			setState(1703);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1702);
				match(AWAIT);
				}
				break;
			}
			setState(1705);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public TerminalNode OP_ADD_ASSIGNMENT() { return getToken(CSharp5Parser.OP_ADD_ASSIGNMENT, 0); }
		public TerminalNode OP_SUB_ASSIGNMENT() { return getToken(CSharp5Parser.OP_SUB_ASSIGNMENT, 0); }
		public TerminalNode OP_MULT_ASSIGNMENT() { return getToken(CSharp5Parser.OP_MULT_ASSIGNMENT, 0); }
		public TerminalNode OP_DIV_ASSIGNMENT() { return getToken(CSharp5Parser.OP_DIV_ASSIGNMENT, 0); }
		public TerminalNode OP_MOD_ASSIGNMENT() { return getToken(CSharp5Parser.OP_MOD_ASSIGNMENT, 0); }
		public TerminalNode OP_AND_ASSIGNMENT() { return getToken(CSharp5Parser.OP_AND_ASSIGNMENT, 0); }
		public TerminalNode OP_OR_ASSIGNMENT() { return getToken(CSharp5Parser.OP_OR_ASSIGNMENT, 0); }
		public TerminalNode OP_XOR_ASSIGNMENT() { return getToken(CSharp5Parser.OP_XOR_ASSIGNMENT, 0); }
		public TerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return getToken(CSharp5Parser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public Right_shift_assignmentContext right_shift_assignment() {
			return getRuleContext(Right_shift_assignmentContext.class,0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAssignment_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_assignment_operator);
		try {
			setState(1718);
			switch (_input.LA(1)) {
			case ASSIGNMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1707);
				match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1708);
				match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1709);
				match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1710);
				match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1711);
				match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1712);
				match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1713);
				match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				enterOuterAlt(_localctx, 8);
				{
				setState(1714);
				match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1715);
				match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1716);
				match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				enterOuterAlt(_localctx, 11);
				{
				setState(1717);
				right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public AssignmentContext assignment() {
			return getRuleContext(AssignmentContext.class,0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return getRuleContext(Non_assignment_expressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_expression);
		try {
			setState(1722);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1720);
				assignment();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_assignment_expressionContext extends ParserRuleContext {
		public Lambda_expressionContext lambda_expression() {
			return getRuleContext(Lambda_expressionContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Conditional_expressionContext conditional_expression() {
			return getRuleContext(Conditional_expressionContext.class,0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_assignment_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNon_assignment_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNon_assignment_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNon_assignment_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_assignment_expressionContext non_assignment_expression() throws RecognitionException {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_non_assignment_expression);
		try {
			setState(1727);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1724);
				lambda_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1725);
				query_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1726);
				conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstant_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_constant_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1729);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBoolean_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBoolean_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBoolean_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Boolean_expressionContext boolean_expression() throws RecognitionException {
		Boolean_expressionContext _localctx = new Boolean_expressionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_boolean_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Labeled_statementContext labeled_statement() {
			return getRuleContext(Labeled_statementContext.class,0);
		}
		public Declaration_statementContext declaration_statement() {
			return getRuleContext(Declaration_statementContext.class,0);
		}
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_statement);
		try {
			setState(1736);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1733);
				labeled_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1734);
				declaration_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1735);
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Embedded_statementContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return getRuleContext(Simple_embedded_statementContext.class,0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_embedded_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEmbedded_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEmbedded_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEmbedded_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Embedded_statementContext embedded_statement() throws RecognitionException {
		Embedded_statementContext _localctx = new Embedded_statementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_embedded_statement);
		try {
			setState(1740);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1738);
				block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1739);
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_embedded_statementContext extends ParserRuleContext {
		public Empty_statementContext empty_statement() {
			return getRuleContext(Empty_statementContext.class,0);
		}
		public Expression_statementContext expression_statement() {
			return getRuleContext(Expression_statementContext.class,0);
		}
		public Selection_statementContext selection_statement() {
			return getRuleContext(Selection_statementContext.class,0);
		}
		public Iteration_statementContext iteration_statement() {
			return getRuleContext(Iteration_statementContext.class,0);
		}
		public Jump_statementContext jump_statement() {
			return getRuleContext(Jump_statementContext.class,0);
		}
		public Try_statementContext try_statement() {
			return getRuleContext(Try_statementContext.class,0);
		}
		public Checked_statementContext checked_statement() {
			return getRuleContext(Checked_statementContext.class,0);
		}
		public Unchecked_statementContext unchecked_statement() {
			return getRuleContext(Unchecked_statementContext.class,0);
		}
		public Lock_statementContext lock_statement() {
			return getRuleContext(Lock_statementContext.class,0);
		}
		public Using_statementContext using_statement() {
			return getRuleContext(Using_statementContext.class,0);
		}
		public Yield_statementContext yield_statement() {
			return getRuleContext(Yield_statementContext.class,0);
		}
		public Embedded_statement_unsafeContext embedded_statement_unsafe() {
			return getRuleContext(Embedded_statement_unsafeContext.class,0);
		}
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_embedded_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSimple_embedded_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSimple_embedded_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSimple_embedded_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_embedded_statementContext simple_embedded_statement() throws RecognitionException {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_simple_embedded_statement);
		try {
			setState(1754);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1742);
				empty_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1743);
				expression_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1744);
				selection_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1745);
				iteration_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1746);
				jump_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1747);
				try_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1748);
				checked_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1749);
				unchecked_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1750);
				lock_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1751);
				using_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1752);
				yield_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1753);
				embedded_statement_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return getRuleContext(Statement_listContext.class,0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1756);
			match(OPEN_BRACE);
			setState(1758);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DO) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << FROM) | (1L << GET) | (1L << GOTO) | (1L << GROUP) | (1L << IF) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (RETURN - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (SWITCH - 65)) | (1L << (THIS - 65)) | (1L << (THROW - 65)) | (1L << (TRUE - 65)) | (1L << (TRY - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (WHILE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (SEMICOLON - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(1757);
				statement_list();
				}
			}

			setState(1760);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_listContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatement_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatement_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatement_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_listContext statement_list() throws RecognitionException {
		Statement_listContext _localctx = new Statement_listContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_statement_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1763); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1762);
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1765); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEmpty_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEmpty_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1767);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Labeled_statementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public Labeled_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeled_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLabeled_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLabeled_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLabeled_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Labeled_statementContext labeled_statement() throws RecognitionException {
		Labeled_statementContext _localctx = new Labeled_statementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_labeled_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1769);
			identifier();
			setState(1770);
			match(COLON);
			setState(1771);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declaration_statementContext extends ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return getRuleContext(Local_variable_declarationContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Local_constant_declarationContext local_constant_declaration() {
			return getRuleContext(Local_constant_declarationContext.class,0);
		}
		public Declaration_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaration_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDeclaration_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDeclaration_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDeclaration_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declaration_statementContext declaration_statement() throws RecognitionException {
		Declaration_statementContext _localctx = new Declaration_statementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_declaration_statement);
		try {
			setState(1779);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1773);
				local_variable_declaration();
				setState(1774);
				match(SEMICOLON);
				}
				break;
			case CONST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1776);
				local_constant_declaration();
				setState(1777);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_variable_declarationContext extends ParserRuleContext {
		public Local_variable_typeContext t;
		public Local_variable_declaratorsContext local_variable_declarators() {
			return getRuleContext(Local_variable_declaratorsContext.class,0);
		}
		public Local_variable_typeContext local_variable_type() {
			return getRuleContext(Local_variable_typeContext.class,0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_variable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_variable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_variable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_variable_declarationContext local_variable_declaration() throws RecognitionException {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_local_variable_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1781);
			((Local_variable_declarationContext)_localctx).t = local_variable_type();
			setState(1782);
			local_variable_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_variable_typeContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_variable_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_variable_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_variable_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_variable_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_variable_typeContext local_variable_type() throws RecognitionException {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_local_variable_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1784);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_variable_declaratorsContext extends ParserRuleContext {
		public List<Local_variable_declaratorContext> local_variable_declarator() {
			return getRuleContexts(Local_variable_declaratorContext.class);
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return getRuleContext(Local_variable_declaratorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Local_variable_declaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_variable_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_variable_declarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_variable_declarators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_variable_declarators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_variable_declaratorsContext local_variable_declarators() throws RecognitionException {
		Local_variable_declaratorsContext _localctx = new Local_variable_declaratorsContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_local_variable_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			local_variable_declarator();
			setState(1791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1787);
				match(COMMA);
				setState(1788);
				local_variable_declarator();
				}
				}
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_variable_declaratorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Local_variable_initializerContext local_variable_initializer() {
			return getRuleContext(Local_variable_initializerContext.class,0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_variable_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_variable_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_variable_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_variable_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_variable_declaratorContext local_variable_declarator() throws RecognitionException {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_local_variable_declarator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1794);
			identifier();
			setState(1797);
			_la = _input.LA(1);
			if (_la==ASSIGNMENT) {
				{
				setState(1795);
				match(ASSIGNMENT);
				setState(1796);
				local_variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_variable_initializerContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Array_initializerContext array_initializer() {
			return getRuleContext(Array_initializerContext.class,0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return getRuleContext(Local_variable_initializer_unsafeContext.class,0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_variable_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_variable_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_variable_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_variable_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_variable_initializerContext local_variable_initializer() throws RecognitionException {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_local_variable_initializer);
		try {
			setState(1802);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1799);
				expression();
				}
				break;
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1800);
				array_initializer();
				}
				break;
			case STACKALLOC:
				enterOuterAlt(_localctx, 3);
				{
				setState(1801);
				local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_constant_declarationContext extends ParserRuleContext {
		public TerminalNode CONST() { return getToken(CSharp5Parser.CONST, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return getRuleContext(Constant_declaratorsContext.class,0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_constant_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_constant_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_constant_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_constant_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_constant_declarationContext local_constant_declaration() throws RecognitionException {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_local_constant_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			match(CONST);
			setState(1805);
			type();
			setState(1806);
			constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_statementContext extends ParserRuleContext {
		public Statement_expressionContext statement_expression() {
			return getRuleContext(Statement_expressionContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExpression_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExpression_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExpression_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_statementContext expression_statement() throws RecognitionException {
		Expression_statementContext _localctx = new Expression_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_expression_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1808);
			statement_expression();
			setState(1809);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Statement_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatement_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatement_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatement_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_expressionContext statement_expression() throws RecognitionException {
		Statement_expressionContext _localctx = new Statement_expressionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_statement_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1811);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selection_statementContext extends ParserRuleContext {
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Switch_statementContext switch_statement() {
			return getRuleContext(Switch_statementContext.class,0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSelection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSelection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSelection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selection_statementContext selection_statement() throws RecognitionException {
		Selection_statementContext _localctx = new Selection_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_selection_statement);
		try {
			setState(1815);
			switch (_input.LA(1)) {
			case IF:
				enterOuterAlt(_localctx, 1);
				{
				setState(1813);
				if_statement();
				}
				break;
			case SWITCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(1814);
				switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_bodyContext extends ParserRuleContext {
		public If_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_body; }
	 
		public If_bodyContext() { }
		public void copyFrom(If_bodyContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IfBodyBlockContext extends If_bodyContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public IfBodyBlockContext(If_bodyContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIfBodyBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIfBodyBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIfBodyBlock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IfBodySingleContext extends If_bodyContext {
		public Simple_embedded_statementContext simple_embedded_statement() {
			return getRuleContext(Simple_embedded_statementContext.class,0);
		}
		public IfBodySingleContext(If_bodyContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIfBodySingle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIfBodySingle(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIfBodySingle(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_bodyContext if_body() throws RecognitionException {
		If_bodyContext _localctx = new If_bodyContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_if_body);
		try {
			setState(1819);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				_localctx = new IfBodyBlockContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1817);
				block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				_localctx = new IfBodySingleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1818);
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(CSharp5Parser.IF, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return getRuleContext(Boolean_expressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public List<If_bodyContext> if_body() {
			return getRuleContexts(If_bodyContext.class);
		}
		public If_bodyContext if_body(int i) {
			return getRuleContext(If_bodyContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(CSharp5Parser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_if_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			match(IF);
			setState(1822);
			match(OPEN_PARENS);
			setState(1823);
			boolean_expression();
			setState(1824);
			match(CLOSE_PARENS);
			setState(1825);
			if_body();
			setState(1828);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1826);
				match(ELSE);
				setState(1827);
				if_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_statementContext extends ParserRuleContext {
		public TerminalNode SWITCH() { return getToken(CSharp5Parser.SWITCH, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Switch_blockContext switch_block() {
			return getRuleContext(Switch_blockContext.class,0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSwitch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSwitch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSwitch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_statementContext switch_statement() throws RecognitionException {
		Switch_statementContext _localctx = new Switch_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_switch_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			match(SWITCH);
			setState(1831);
			match(OPEN_PARENS);
			setState(1832);
			expression();
			setState(1833);
			match(CLOSE_PARENS);
			setState(1834);
			switch_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_blockContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Switch_sectionsContext switch_sections() {
			return getRuleContext(Switch_sectionsContext.class,0);
		}
		public Switch_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSwitch_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSwitch_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSwitch_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_blockContext switch_block() throws RecognitionException {
		Switch_blockContext _localctx = new Switch_blockContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_switch_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1836);
			match(OPEN_BRACE);
			setState(1838);
			_la = _input.LA(1);
			if (_la==CASE || _la==DEFAULT) {
				{
				setState(1837);
				switch_sections();
				}
			}

			setState(1840);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionsContext extends ParserRuleContext {
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public Switch_sectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_sections; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSwitch_sections(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSwitch_sections(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSwitch_sections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionsContext switch_sections() throws RecognitionException {
		Switch_sectionsContext _localctx = new Switch_sectionsContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_switch_sections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1842);
			switch_section();
			setState(1846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				setState(1843);
				switch_section();
				}
				}
				setState(1848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public Switch_labelsContext switch_labels() {
			return getRuleContext(Switch_labelsContext.class,0);
		}
		public Statement_listContext statement_list() {
			return getRuleContext(Statement_listContext.class,0);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849);
			switch_labels();
			setState(1850);
			statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_labelsContext extends ParserRuleContext {
		public List<Switch_labelContext> switch_label() {
			return getRuleContexts(Switch_labelContext.class);
		}
		public Switch_labelContext switch_label(int i) {
			return getRuleContext(Switch_labelContext.class,i);
		}
		public Switch_labelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_labels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSwitch_labels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSwitch_labels(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSwitch_labels(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_labelsContext switch_labels() throws RecognitionException {
		Switch_labelsContext _localctx = new Switch_labelsContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_switch_labels);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1852);
			switch_label();
			setState(1856);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1853);
					switch_label();
					}
					} 
				}
				setState(1858);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_labelContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(CSharp5Parser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public TerminalNode DEFAULT() { return getToken(CSharp5Parser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSwitch_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSwitch_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSwitch_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_labelContext switch_label() throws RecognitionException {
		Switch_labelContext _localctx = new Switch_labelContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_switch_label);
		try {
			setState(1865);
			switch (_input.LA(1)) {
			case CASE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1859);
				match(CASE);
				setState(1860);
				constant_expression();
				setState(1861);
				match(COLON);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1863);
				match(DEFAULT);
				setState(1864);
				match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iteration_statementContext extends ParserRuleContext {
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Do_statementContext do_statement() {
			return getRuleContext(Do_statementContext.class,0);
		}
		public For_statementContext for_statement() {
			return getRuleContext(For_statementContext.class,0);
		}
		public Foreach_statementContext foreach_statement() {
			return getRuleContext(Foreach_statementContext.class,0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iteration_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIteration_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIteration_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIteration_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iteration_statementContext iteration_statement() throws RecognitionException {
		Iteration_statementContext _localctx = new Iteration_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_iteration_statement);
		try {
			setState(1871);
			switch (_input.LA(1)) {
			case WHILE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1867);
				while_statement();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 2);
				{
				setState(1868);
				do_statement();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1869);
				for_statement();
				}
				break;
			case FOREACH:
				enterOuterAlt(_localctx, 4);
				{
				setState(1870);
				foreach_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(CSharp5Parser.WHILE, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return getRuleContext(Boolean_expressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitWhile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873);
			match(WHILE);
			setState(1874);
			match(OPEN_PARENS);
			setState(1875);
			boolean_expression();
			setState(1876);
			match(CLOSE_PARENS);
			setState(1877);
			embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Do_statementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(CSharp5Parser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(CSharp5Parser.WHILE, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return getRuleContext(Boolean_expressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Do_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_do_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Do_statementContext do_statement() throws RecognitionException {
		Do_statementContext _localctx = new Do_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_do_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879);
			match(DO);
			setState(1880);
			embedded_statement();
			setState(1881);
			match(WHILE);
			setState(1882);
			match(OPEN_PARENS);
			setState(1883);
			boolean_expression();
			setState(1884);
			match(CLOSE_PARENS);
			setState(1885);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_statementContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(CSharp5Parser.FOR, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public List<TerminalNode> SEMICOLON() { return getTokens(CSharp5Parser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(CSharp5Parser.SEMICOLON, i);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public For_initializerContext for_initializer() {
			return getRuleContext(For_initializerContext.class,0);
		}
		public For_conditionContext for_condition() {
			return getRuleContext(For_conditionContext.class,0);
		}
		public For_iteratorContext for_iterator() {
			return getRuleContext(For_iteratorContext.class,0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_statementContext for_statement() throws RecognitionException {
		For_statementContext _localctx = new For_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			match(FOR);
			setState(1888);
			match(OPEN_PARENS);
			setState(1890);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(1889);
				for_initializer();
				}
			}

			setState(1892);
			match(SEMICOLON);
			setState(1894);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(1893);
				for_condition();
				}
			}

			setState(1896);
			match(SEMICOLON);
			setState(1898);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(1897);
				for_iterator();
				}
			}

			setState(1900);
			match(CLOSE_PARENS);
			setState(1901);
			embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_initializerContext extends ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return getRuleContext(Local_variable_declarationContext.class,0);
		}
		public Statement_expression_listContext statement_expression_list() {
			return getRuleContext(Statement_expression_listContext.class,0);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFor_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFor_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFor_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_initializerContext for_initializer() throws RecognitionException {
		For_initializerContext _localctx = new For_initializerContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_for_initializer);
		try {
			setState(1905);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1903);
				local_variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1904);
				statement_expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_conditionContext extends ParserRuleContext {
		public Boolean_expressionContext boolean_expression() {
			return getRuleContext(Boolean_expressionContext.class,0);
		}
		public For_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFor_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFor_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFor_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_conditionContext for_condition() throws RecognitionException {
		For_conditionContext _localctx = new For_conditionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_for_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1907);
			boolean_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_iteratorContext extends ParserRuleContext {
		public Statement_expression_listContext statement_expression_list() {
			return getRuleContext(Statement_expression_listContext.class,0);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_iterator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFor_iterator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFor_iterator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFor_iterator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_iteratorContext for_iterator() throws RecognitionException {
		For_iteratorContext _localctx = new For_iteratorContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_for_iterator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1909);
			statement_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_expression_listContext extends ParserRuleContext {
		public List<Statement_expressionContext> statement_expression() {
			return getRuleContexts(Statement_expressionContext.class);
		}
		public Statement_expressionContext statement_expression(int i) {
			return getRuleContext(Statement_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Statement_expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatement_expression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatement_expression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatement_expression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_expression_listContext statement_expression_list() throws RecognitionException {
		Statement_expression_listContext _localctx = new Statement_expression_listContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_statement_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1911);
			statement_expression();
			setState(1916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1912);
				match(COMMA);
				setState(1913);
				statement_expression();
				}
				}
				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreach_statementContext extends ParserRuleContext {
		public TerminalNode FOREACH() { return getToken(CSharp5Parser.FOREACH, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Local_variable_typeContext local_variable_type() {
			return getRuleContext(Local_variable_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public Foreach_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterForeach_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitForeach_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitForeach_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_statementContext foreach_statement() throws RecognitionException {
		Foreach_statementContext _localctx = new Foreach_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_foreach_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919);
			match(FOREACH);
			setState(1920);
			match(OPEN_PARENS);
			setState(1921);
			local_variable_type();
			setState(1922);
			identifier();
			setState(1923);
			match(IN);
			setState(1924);
			expression();
			setState(1925);
			match(CLOSE_PARENS);
			setState(1926);
			embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Jump_statementContext extends ParserRuleContext {
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jump_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterJump_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitJump_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitJump_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Jump_statementContext jump_statement() throws RecognitionException {
		Jump_statementContext _localctx = new Jump_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_jump_statement);
		try {
			setState(1933);
			switch (_input.LA(1)) {
			case BREAK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1928);
				break_statement();
				}
				break;
			case CONTINUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1929);
				continue_statement();
				}
				break;
			case GOTO:
				enterOuterAlt(_localctx, 3);
				{
				setState(1930);
				goto_statement();
				}
				break;
			case RETURN:
				enterOuterAlt(_localctx, 4);
				{
				setState(1931);
				return_statement();
				}
				break;
			case THROW:
				enterOuterAlt(_localctx, 5);
				{
				setState(1932);
				throw_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(CSharp5Parser.BREAK, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBreak_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBreak_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1935);
			match(BREAK);
			setState(1936);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(CSharp5Parser.CONTINUE, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1938);
			match(CONTINUE);
			setState(1939);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(CSharp5Parser.GOTO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public TerminalNode CASE() { return getToken(CSharp5Parser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(CSharp5Parser.DEFAULT, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_goto_statement);
		try {
			setState(1953);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1941);
				match(GOTO);
				setState(1942);
				identifier();
				setState(1943);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1945);
				match(GOTO);
				setState(1946);
				match(CASE);
				setState(1947);
				constant_expression();
				setState(1948);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1950);
				match(GOTO);
				setState(1951);
				match(DEFAULT);
				setState(1952);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(CSharp5Parser.RETURN, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1955);
			match(RETURN);
			setState(1957);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(1956);
				expression();
				}
			}

			setState(1959);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(CSharp5Parser.THROW, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitThrow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitThrow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_throw_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1961);
			match(THROW);
			setState(1963);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(1962);
				expression();
				}
			}

			setState(1965);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_statementContext extends ParserRuleContext {
		public TerminalNode TRY() { return getToken(CSharp5Parser.TRY, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Catch_clausesContext catch_clauses() {
			return getRuleContext(Catch_clausesContext.class,0);
		}
		public Finally_clauseContext finally_clause() {
			return getRuleContext(Finally_clauseContext.class,0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterTry_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitTry_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitTry_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Try_statementContext try_statement() throws RecognitionException {
		Try_statementContext _localctx = new Try_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_try_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1967);
			match(TRY);
			setState(1968);
			block();
			setState(1970);
			_la = _input.LA(1);
			if (_la==CATCH) {
				{
				setState(1969);
				catch_clauses();
				}
			}

			setState(1973);
			_la = _input.LA(1);
			if (_la==FINALLY) {
				{
				setState(1972);
				finally_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Catch_clausesContext extends ParserRuleContext {
		public Specific_catch_clausesContext specific_catch_clauses() {
			return getRuleContext(Specific_catch_clausesContext.class,0);
		}
		public General_catch_clauseContext general_catch_clause() {
			return getRuleContext(General_catch_clauseContext.class,0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catch_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCatch_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCatch_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCatch_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Catch_clausesContext catch_clauses() throws RecognitionException {
		Catch_clausesContext _localctx = new Catch_clausesContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_catch_clauses);
		int _la;
		try {
			setState(1980);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1975);
				specific_catch_clauses();
				setState(1977);
				_la = _input.LA(1);
				if (_la==CATCH) {
					{
					setState(1976);
					general_catch_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1979);
				general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Specific_catch_clausesContext extends ParserRuleContext {
		public List<Specific_catch_clauseContext> specific_catch_clause() {
			return getRuleContexts(Specific_catch_clauseContext.class);
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return getRuleContext(Specific_catch_clauseContext.class,i);
		}
		public Specific_catch_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specific_catch_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSpecific_catch_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSpecific_catch_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSpecific_catch_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Specific_catch_clausesContext specific_catch_clauses() throws RecognitionException {
		Specific_catch_clausesContext _localctx = new Specific_catch_clausesContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_specific_catch_clauses);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1982);
			specific_catch_clause();
			setState(1986);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1983);
					specific_catch_clause();
					}
					} 
				}
				setState(1988);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Specific_catch_clauseContext extends ParserRuleContext {
		public TerminalNode CATCH() { return getToken(CSharp5Parser.CATCH, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specific_catch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSpecific_catch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSpecific_catch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSpecific_catch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Specific_catch_clauseContext specific_catch_clause() throws RecognitionException {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_specific_catch_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1989);
			match(CATCH);
			setState(1990);
			match(OPEN_PARENS);
			setState(1991);
			class_type();
			setState(1993);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
				{
				setState(1992);
				identifier();
				}
			}

			setState(1995);
			match(CLOSE_PARENS);
			setState(1996);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_catch_clauseContext extends ParserRuleContext {
		public TerminalNode CATCH() { return getToken(CSharp5Parser.CATCH, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_catch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGeneral_catch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGeneral_catch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGeneral_catch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_catch_clauseContext general_catch_clause() throws RecognitionException {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_general_catch_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1998);
			match(CATCH);
			setState(1999);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Finally_clauseContext extends ParserRuleContext {
		public TerminalNode FINALLY() { return getToken(CSharp5Parser.FINALLY, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_finally_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFinally_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFinally_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFinally_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Finally_clauseContext finally_clause() throws RecognitionException {
		Finally_clauseContext _localctx = new Finally_clauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_finally_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2001);
			match(FINALLY);
			setState(2002);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Checked_statementContext extends ParserRuleContext {
		public TerminalNode CHECKED() { return getToken(CSharp5Parser.CHECKED, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Checked_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checked_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterChecked_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitChecked_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitChecked_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Checked_statementContext checked_statement() throws RecognitionException {
		Checked_statementContext _localctx = new Checked_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_checked_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2004);
			match(CHECKED);
			setState(2005);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unchecked_statementContext extends ParserRuleContext {
		public TerminalNode UNCHECKED() { return getToken(CSharp5Parser.UNCHECKED, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Unchecked_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unchecked_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnchecked_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnchecked_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnchecked_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unchecked_statementContext unchecked_statement() throws RecognitionException {
		Unchecked_statementContext _localctx = new Unchecked_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_unchecked_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2007);
			match(UNCHECKED);
			setState(2008);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(CSharp5Parser.LOCK, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public Lock_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLock_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLock_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_statementContext lock_statement() throws RecognitionException {
		Lock_statementContext _localctx = new Lock_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_lock_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2010);
			match(LOCK);
			setState(2011);
			match(OPEN_PARENS);
			setState(2012);
			expression();
			setState(2013);
			match(CLOSE_PARENS);
			setState(2014);
			embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_statementContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(CSharp5Parser.USING, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Resource_acquisitionContext resource_acquisition() {
			return getRuleContext(Resource_acquisitionContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public Using_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUsing_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUsing_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUsing_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_statementContext using_statement() throws RecognitionException {
		Using_statementContext _localctx = new Using_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_using_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2016);
			match(USING);
			setState(2017);
			match(OPEN_PARENS);
			setState(2018);
			resource_acquisition();
			setState(2019);
			match(CLOSE_PARENS);
			setState(2020);
			embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resource_acquisitionContext extends ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return getRuleContext(Local_variable_declarationContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_acquisition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterResource_acquisition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitResource_acquisition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitResource_acquisition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Resource_acquisitionContext resource_acquisition() throws RecognitionException {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_resource_acquisition);
		try {
			setState(2024);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2022);
				local_variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2023);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Yield_statementContext extends ParserRuleContext {
		public Yield_contextual_keywordContext yield_contextual_keyword() {
			return getRuleContext(Yield_contextual_keywordContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(CSharp5Parser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public TerminalNode BREAK() { return getToken(CSharp5Parser.BREAK, 0); }
		public Yield_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yield_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterYield_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitYield_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitYield_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Yield_statementContext yield_statement() throws RecognitionException {
		Yield_statementContext _localctx = new Yield_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_yield_statement);
		try {
			setState(2035);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2026);
				yield_contextual_keyword();
				setState(2027);
				match(RETURN);
				setState(2028);
				expression();
				setState(2029);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2031);
				yield_contextual_keyword();
				setState(2032);
				match(BREAK);
				setState(2033);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(CSharp5Parser.EOF, 0); }
		public TerminalNode BYTE_ORDER_MARK() { return getToken(CSharp5Parser.BYTE_ORDER_MARK, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return getRuleContext(Extern_alias_directivesContext.class,0);
		}
		public Using_directivesContext using_directives() {
			return getRuleContext(Using_directivesContext.class,0);
		}
		public List<Global_attribute_sectionContext> global_attribute_section() {
			return getRuleContexts(Global_attribute_sectionContext.class);
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return getRuleContext(Global_attribute_sectionContext.class,i);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return getRuleContext(Namespace_member_declarationsContext.class,0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2038);
			_la = _input.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				setState(2037);
				match(BYTE_ORDER_MARK);
				}
			}

			setState(2041);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(2040);
				extern_alias_directives();
				}
				break;
			}
			setState(2044);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2043);
				using_directives();
				}
			}

			setState(2049);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2046);
					global_attribute_section();
					}
					} 
				}
				setState(2051);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			}
			setState(2053);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				setState(2052);
				namespace_member_declarations();
				}
			}

			setState(2055);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Namespace_declarationContext extends ParserRuleContext {
		public Qualified_identifierContext qi;
		public TerminalNode NAMESPACE() { return getToken(CSharp5Parser.NAMESPACE, 0); }
		public Namespace_bodyContext namespace_body() {
			return getRuleContext(Namespace_bodyContext.class,0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamespace_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamespace_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamespace_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Namespace_declarationContext namespace_declaration() throws RecognitionException {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_namespace_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			match(NAMESPACE);
			setState(2058);
			((Namespace_declarationContext)_localctx).qi = qualified_identifier();
			setState(2059);
			namespace_body();
			setState(2061);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(2060);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_identifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(CSharp5Parser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CSharp5Parser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQualified_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQualified_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQualified_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_identifierContext qualified_identifier() throws RecognitionException {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_qualified_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063);
			identifier();
			setState(2068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(2064);
				match(DOT);
				setState(2065);
				identifier();
				}
				}
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Namespace_bodyContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return getRuleContext(Extern_alias_directivesContext.class,0);
		}
		public Using_directivesContext using_directives() {
			return getRuleContext(Using_directivesContext.class,0);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return getRuleContext(Namespace_member_declarationsContext.class,0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamespace_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamespace_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamespace_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Namespace_bodyContext namespace_body() throws RecognitionException {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_namespace_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2071);
			match(OPEN_BRACE);
			setState(2073);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(2072);
				extern_alias_directives();
				}
				break;
			}
			setState(2076);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2075);
				using_directives();
				}
			}

			setState(2079);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				setState(2078);
				namespace_member_declarations();
				}
			}

			setState(2081);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extern_alias_directivesContext extends ParserRuleContext {
		public List<Extern_alias_directiveContext> extern_alias_directive() {
			return getRuleContexts(Extern_alias_directiveContext.class);
		}
		public Extern_alias_directiveContext extern_alias_directive(int i) {
			return getRuleContext(Extern_alias_directiveContext.class,i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extern_alias_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExtern_alias_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExtern_alias_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExtern_alias_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extern_alias_directivesContext extern_alias_directives() throws RecognitionException {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_extern_alias_directives);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2084); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2083);
					extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2086); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extern_alias_directiveContext extends ParserRuleContext {
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public Alias_contextual_keywordContext alias_contextual_keyword() {
			return getRuleContext(Alias_contextual_keywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extern_alias_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterExtern_alias_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitExtern_alias_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitExtern_alias_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extern_alias_directiveContext extern_alias_directive() throws RecognitionException {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_extern_alias_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2088);
			match(EXTERN);
			setState(2089);
			alias_contextual_keyword();
			setState(2090);
			identifier();
			setState(2091);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_directivesContext extends ParserRuleContext {
		public List<Using_directiveContext> using_directive() {
			return getRuleContexts(Using_directiveContext.class);
		}
		public Using_directiveContext using_directive(int i) {
			return getRuleContext(Using_directiveContext.class,i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUsing_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUsing_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUsing_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_directivesContext using_directives() throws RecognitionException {
		Using_directivesContext _localctx = new Using_directivesContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_using_directives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2094); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2093);
				using_directive();
				}
				}
				setState(2096); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_directiveContext extends ParserRuleContext {
		public Using_alias_directiveContext using_alias_directive() {
			return getRuleContext(Using_alias_directiveContext.class,0);
		}
		public Using_namespace_directiveContext using_namespace_directive() {
			return getRuleContext(Using_namespace_directiveContext.class,0);
		}
		public Using_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUsing_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUsing_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUsing_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_directiveContext using_directive() throws RecognitionException {
		Using_directiveContext _localctx = new Using_directiveContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_using_directive);
		try {
			setState(2100);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2098);
				using_alias_directive();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2099);
				using_namespace_directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_alias_directiveContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(CSharp5Parser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return getRuleContext(Namespace_or_type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Using_alias_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_alias_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUsing_alias_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUsing_alias_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUsing_alias_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_alias_directiveContext using_alias_directive() throws RecognitionException {
		Using_alias_directiveContext _localctx = new Using_alias_directiveContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_using_alias_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2102);
			match(USING);
			setState(2103);
			identifier();
			setState(2104);
			match(ASSIGNMENT);
			setState(2105);
			namespace_or_type_name();
			setState(2106);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_namespace_directiveContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(CSharp5Parser.USING, 0); }
		public Namespace_nameContext namespace_name() {
			return getRuleContext(Namespace_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Using_namespace_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_namespace_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUsing_namespace_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUsing_namespace_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUsing_namespace_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_namespace_directiveContext using_namespace_directive() throws RecognitionException {
		Using_namespace_directiveContext _localctx = new Using_namespace_directiveContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_using_namespace_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2108);
			match(USING);
			setState(2109);
			namespace_name();
			setState(2110);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Namespace_member_declarationsContext extends ParserRuleContext {
		public List<Namespace_member_declarationContext> namespace_member_declaration() {
			return getRuleContexts(Namespace_member_declarationContext.class);
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return getRuleContext(Namespace_member_declarationContext.class,i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_member_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamespace_member_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamespace_member_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamespace_member_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Namespace_member_declarationsContext namespace_member_declarations() throws RecognitionException {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_namespace_member_declarations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2113); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2112);
				namespace_member_declaration();
				}
				}
				setState(2115); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Namespace_member_declarationContext extends ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return getRuleContext(Namespace_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamespace_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamespace_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamespace_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Namespace_member_declarationContext namespace_member_declaration() throws RecognitionException {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_namespace_member_declaration);
		try {
			setState(2119);
			switch (_input.LA(1)) {
			case NAMESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2117);
				namespace_declaration();
				}
				break;
			case ABSTRACT:
			case ASYNC:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2118);
				type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public Class_definitionContext class_definition() {
			return getRuleContext(Class_definitionContext.class,0);
		}
		public Struct_definitionContext struct_definition() {
			return getRuleContext(Struct_definitionContext.class,0);
		}
		public Interface_definitionContext interface_definition() {
			return getRuleContext(Interface_definitionContext.class,0);
		}
		public Enum_definitionContext enum_definition() {
			return getRuleContext(Enum_definitionContext.class,0);
		}
		public Delegate_definitionContext delegate_definition() {
			return getRuleContext(Delegate_definitionContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return getRuleContext(All_member_modifiersContext.class,0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_type_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2121);
				attributes();
				}
			}

			setState(2125);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)))) != 0)) {
				{
				setState(2124);
				all_member_modifiers();
				}
			}

			setState(2132);
			switch (_input.LA(1)) {
			case CLASS:
				{
				setState(2127);
				class_definition();
				}
				break;
			case STRUCT:
				{
				setState(2128);
				struct_definition();
				}
				break;
			case INTERFACE:
				{
				setState(2129);
				interface_definition();
				}
				break;
			case ENUM:
				{
				setState(2130);
				enum_definition();
				}
				break;
			case DELEGATE:
				{
				setState(2131);
				delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_alias_memberContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOUBLE_COLON() { return getToken(CSharp5Parser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext type_argument_list_opt() {
			return getRuleContext(Type_argument_list_optContext.class,0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_alias_member; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterQualified_alias_member(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitQualified_alias_member(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitQualified_alias_member(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_alias_memberContext qualified_alias_member() throws RecognitionException {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_qualified_alias_member);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2134);
			identifier();
			setState(2135);
			match(DOUBLE_COLON);
			setState(2136);
			identifier();
			setState(2137);
			type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_declarationContext extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(CSharp5Parser.CLASS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Class_bodyContext class_body() {
			return getRuleContext(Class_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Class_modifiersContext class_modifiers() {
			return getRuleContext(Class_modifiersContext.class,0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return getRuleContext(Partial_contextual_keywordContext.class,0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Class_baseContext class_base() {
			return getRuleContext(Class_baseContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Class_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_declarationContext class_declaration() throws RecognitionException {
		Class_declarationContext _localctx = new Class_declarationContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_class_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2139);
				attributes();
				}
			}

			setState(2143);
			_la = _input.LA(1);
			if (_la==ABSTRACT || _la==INTERNAL || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)))) != 0)) {
				{
				setState(2142);
				class_modifiers();
				}
			}

			setState(2146);
			_la = _input.LA(1);
			if (_la==PARTIAL) {
				{
				setState(2145);
				partial_contextual_keyword();
				}
			}

			setState(2148);
			match(CLASS);
			setState(2149);
			identifier();
			setState(2151);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(2150);
				type_parameter_list();
				}
			}

			setState(2154);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(2153);
				class_base();
				}
			}

			setState(2157);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2156);
				type_parameter_constraints_clauses();
				}
			}

			setState(2159);
			class_body();
			setState(2161);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(2160);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_modifiersContext extends ParserRuleContext {
		public List<Class_modifierContext> class_modifier() {
			return getRuleContexts(Class_modifierContext.class);
		}
		public Class_modifierContext class_modifier(int i) {
			return getRuleContext(Class_modifierContext.class,i);
		}
		public Class_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_modifiersContext class_modifiers() throws RecognitionException {
		Class_modifiersContext _localctx = new Class_modifiersContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_class_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			class_modifier();
			setState(2167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ABSTRACT || _la==INTERNAL || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)))) != 0)) {
				{
				{
				setState(2164);
				class_modifier();
				}
				}
				setState(2169);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public Class_modifier_unsafeContext class_modifier_unsafe() {
			return getRuleContext(Class_modifier_unsafeContext.class,0);
		}
		public Class_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_modifierContext class_modifier() throws RecognitionException {
		Class_modifierContext _localctx = new Class_modifierContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_class_modifier);
		try {
			setState(2179);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2170);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2171);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2172);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2173);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2174);
				match(PRIVATE);
				}
				break;
			case ABSTRACT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2175);
				match(ABSTRACT);
				}
				break;
			case SEALED:
				enterOuterAlt(_localctx, 7);
				{
				setState(2176);
				match(SEALED);
				}
				break;
			case STATIC:
				enterOuterAlt(_localctx, 8);
				{
				setState(2177);
				match(STATIC);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2178);
				class_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_parameter_listContext extends ParserRuleContext {
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public Type_parametersContext type_parameters() {
			return getRuleContext(Type_parametersContext.class,0);
		}
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_parameter_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_parameter_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_parameter_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_parameter_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_parameter_listContext type_parameter_list() throws RecognitionException {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_type_parameter_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2181);
			match(LT);
			setState(2182);
			type_parameters();
			setState(2183);
			match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_parametersContext extends ParserRuleContext {
		public List<Type_parameterContext> type_parameter() {
			return getRuleContexts(Type_parameterContext.class);
		}
		public Type_parameterContext type_parameter(int i) {
			return getRuleContext(Type_parameterContext.class,i);
		}
		public List<AttributesContext> attributes() {
			return getRuleContexts(AttributesContext.class);
		}
		public AttributesContext attributes(int i) {
			return getRuleContext(AttributesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Type_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_parametersContext type_parameters() throws RecognitionException {
		Type_parametersContext _localctx = new Type_parametersContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_type_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2186);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2185);
				attributes();
				}
			}

			setState(2188);
			type_parameter();
			setState(2196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2189);
				match(COMMA);
				setState(2191);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					setState(2190);
					attributes();
					}
				}

				setState(2193);
				type_parameter();
				}
				}
				setState(2198);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_parameterContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_parameterContext type_parameter() throws RecognitionException {
		Type_parameterContext _localctx = new Type_parameterContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_type_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_baseContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public List<Interface_typeContext> interface_type() {
			return getRuleContexts(Interface_typeContext.class);
		}
		public Interface_typeContext interface_type(int i) {
			return getRuleContext(Interface_typeContext.class,i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_baseContext class_base() throws RecognitionException {
		Class_baseContext _localctx = new Class_baseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_class_base);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2201);
			match(COLON);
			setState(2202);
			class_type();
			setState(2207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2203);
				match(COMMA);
				setState(2204);
				interface_type();
				}
				}
				setState(2209);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_type_listContext extends ParserRuleContext {
		public List<Interface_typeContext> interface_type() {
			return getRuleContexts(Interface_typeContext.class);
		}
		public Interface_typeContext interface_type(int i) {
			return getRuleContext(Interface_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_type_listContext interface_type_list() throws RecognitionException {
		Interface_type_listContext _localctx = new Interface_type_listContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_interface_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2210);
			interface_type();
			setState(2215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2211);
				match(COMMA);
				setState(2212);
				interface_type();
				}
				}
				setState(2217);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_parameter_constraints_clausesContext extends ParserRuleContext {
		public List<Type_parameter_constraints_clauseContext> type_parameter_constraints_clause() {
			return getRuleContexts(Type_parameter_constraints_clauseContext.class);
		}
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return getRuleContext(Type_parameter_constraints_clauseContext.class,i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_parameter_constraints_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_parameter_constraints_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_parameter_constraints_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_parameter_constraints_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() throws RecognitionException {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2218);
			type_parameter_constraints_clause();
			setState(2222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHERE) {
				{
				{
				setState(2219);
				type_parameter_constraints_clause();
				}
				}
				setState(2224);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_parameter_constraints_clauseContext extends ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return getRuleContext(Where_contextual_keywordContext.class,0);
		}
		public Type_parameterContext type_parameter() {
			return getRuleContext(Type_parameterContext.class,0);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return getRuleContext(Type_parameter_constraintsContext.class,0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_parameter_constraints_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_parameter_constraints_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_parameter_constraints_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_parameter_constraints_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_parameter_constraints_clauseContext type_parameter_constraints_clause() throws RecognitionException {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_type_parameter_constraints_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2225);
			where_contextual_keyword();
			setState(2226);
			type_parameter();
			setState(2227);
			match(COLON);
			setState(2228);
			type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_parameter_constraintsContext extends ParserRuleContext {
		public Constructor_constraintContext constructor_constraint() {
			return getRuleContext(Constructor_constraintContext.class,0);
		}
		public Primary_constraintContext primary_constraint() {
			return getRuleContext(Primary_constraintContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Secondary_constraintsContext secondary_constraints() {
			return getRuleContext(Secondary_constraintsContext.class,0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_parameter_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_parameter_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_parameter_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_parameter_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_parameter_constraintsContext type_parameter_constraints() throws RecognitionException {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_type_parameter_constraints);
		int _la;
		try {
			setState(2240);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2230);
				constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2231);
				primary_constraint();
				setState(2234);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(2232);
					match(COMMA);
					setState(2233);
					secondary_constraints();
					}
					break;
				}
				setState(2238);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2236);
					match(COMMA);
					setState(2237);
					constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_constraintContext extends ParserRuleContext {
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(CSharp5Parser.CLASS, 0); }
		public TerminalNode STRUCT() { return getToken(CSharp5Parser.STRUCT, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPrimary_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPrimary_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPrimary_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_constraintContext primary_constraint() throws RecognitionException {
		Primary_constraintContext _localctx = new Primary_constraintContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_primary_constraint);
		try {
			setState(2245);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2242);
				class_type();
				}
				break;
			case CLASS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2243);
				match(CLASS);
				}
				break;
			case STRUCT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2244);
				match(STRUCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Secondary_constraintsContext extends ParserRuleContext {
		public List<Interface_typeContext> interface_type() {
			return getRuleContexts(Interface_typeContext.class);
		}
		public Interface_typeContext interface_type(int i) {
			return getRuleContext(Interface_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_secondary_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSecondary_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSecondary_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSecondary_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Secondary_constraintsContext secondary_constraints() throws RecognitionException {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_secondary_constraints);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2247);
			interface_type();
			setState(2252);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2248);
					match(COMMA);
					setState(2249);
					interface_type();
					}
					} 
				}
				setState(2254);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_constraintContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_constraintContext constructor_constraint() throws RecognitionException {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_constructor_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			match(NEW);
			setState(2256);
			match(OPEN_PARENS);
			setState(2257);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_bodyContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return getRuleContext(Class_member_declarationsContext.class,0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_bodyContext class_body() throws RecognitionException {
		Class_bodyContext _localctx = new Class_bodyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_class_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			match(OPEN_BRACE);
			setState(2261);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE) {
				{
				setState(2260);
				class_member_declarations();
				}
			}

			setState(2263);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_member_declarationsContext extends ParserRuleContext {
		public List<Class_member_declarationContext> class_member_declaration() {
			return getRuleContexts(Class_member_declarationContext.class);
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return getRuleContext(Class_member_declarationContext.class,i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_member_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_member_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_member_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_member_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_member_declarationsContext class_member_declarations() throws RecognitionException {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_class_member_declarations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2266); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2265);
				class_member_declaration();
				}
				}
				setState(2268); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_member_declarationContext extends ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return getRuleContext(Common_member_declarationContext.class,0);
		}
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return getRuleContext(Destructor_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return getRuleContext(All_member_modifiersContext.class,0);
		}
		public TerminalNode Pp_directive() { return getToken(CSharp5Parser.Pp_directive, 0); }
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_member_declarationContext class_member_declaration() throws RecognitionException {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_class_member_declaration);
		int _la;
		try {
			setState(2286);
			switch (_input.LA(1)) {
			case ABSTRACT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case OBJECT:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REMOVE:
			case SBYTE:
			case SEALED:
			case SELECT:
			case SET:
			case SHORT:
			case STATIC:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNSAFE:
			case USHORT:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_BRACKET:
			case TILDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2271);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					setState(2270);
					attributes();
					}
				}

				setState(2274);
				switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					setState(2273);
					all_member_modifiers();
					}
					break;
				}
				setState(2283);
				switch (_input.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CLASS:
				case CONST:
				case DECIMAL:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case ENUM:
				case EQUALS:
				case EVENT:
				case EXPLICIT:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case IMPLICIT:
				case INT:
				case INTERFACE:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case STRUCT:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					setState(2276);
					common_member_declaration();
					}
					break;
				case TILDE:
					{
					setState(2277);
					match(TILDE);
					setState(2278);
					identifier();
					setState(2279);
					match(OPEN_PARENS);
					setState(2280);
					match(CLOSE_PARENS);
					setState(2281);
					destructor_body();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Pp_directive:
				enterOuterAlt(_localctx, 2);
				{
				setState(2285);
				match(Pp_directive);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_member_modifiersContext extends ParserRuleContext {
		public All_member_modifierContext m;
		public List<All_member_modifierContext> all_member_modifier() {
			return getRuleContexts(All_member_modifierContext.class);
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return getRuleContext(All_member_modifierContext.class,i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_member_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAll_member_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAll_member_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAll_member_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_member_modifiersContext all_member_modifiers() throws RecognitionException {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_all_member_modifiers);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2289); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2288);
					((All_member_modifiersContext)_localctx).m = all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2291); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_member_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode READONLY() { return getToken(CSharp5Parser.READONLY, 0); }
		public TerminalNode VOLATILE() { return getToken(CSharp5Parser.VOLATILE, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode ASYNC() { return getToken(CSharp5Parser.ASYNC, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return getRuleContext(Partial_contextual_keywordContext.class,0);
		}
		public All_member_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_member_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAll_member_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAll_member_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAll_member_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_member_modifierContext all_member_modifier() throws RecognitionException {
		All_member_modifierContext _localctx = new All_member_modifierContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_all_member_modifier);
		try {
			setState(2309);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2293);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2294);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2295);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2296);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2297);
				match(PRIVATE);
				}
				break;
			case READONLY:
				enterOuterAlt(_localctx, 6);
				{
				setState(2298);
				match(READONLY);
				}
				break;
			case VOLATILE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2299);
				match(VOLATILE);
				}
				break;
			case VIRTUAL:
				enterOuterAlt(_localctx, 8);
				{
				setState(2300);
				match(VIRTUAL);
				}
				break;
			case SEALED:
				enterOuterAlt(_localctx, 9);
				{
				setState(2301);
				match(SEALED);
				}
				break;
			case OVERRIDE:
				enterOuterAlt(_localctx, 10);
				{
				setState(2302);
				match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				enterOuterAlt(_localctx, 11);
				{
				setState(2303);
				match(ABSTRACT);
				}
				break;
			case ASYNC:
				enterOuterAlt(_localctx, 12);
				{
				setState(2304);
				match(ASYNC);
				}
				break;
			case STATIC:
				enterOuterAlt(_localctx, 13);
				{
				setState(2305);
				match(STATIC);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 14);
				{
				setState(2306);
				match(UNSAFE);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 15);
				{
				setState(2307);
				match(EXTERN);
				}
				break;
			case PARTIAL:
				enterOuterAlt(_localctx, 16);
				{
				setState(2308);
				partial_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_member_declarationContext extends ParserRuleContext {
		public Constant_declaration2Context constant_declaration2() {
			return getRuleContext(Constant_declaration2Context.class,0);
		}
		public Typed_member_declarationContext typed_member_declaration() {
			return getRuleContext(Typed_member_declarationContext.class,0);
		}
		public Event_declaration2Context event_declaration2() {
			return getRuleContext(Event_declaration2Context.class,0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return getRuleContext(Conversion_operator_declaratorContext.class,0);
		}
		public Operator_bodyContext operator_body() {
			return getRuleContext(Operator_bodyContext.class,0);
		}
		public Constructor_declaration2Context constructor_declaration2() {
			return getRuleContext(Constructor_declaration2Context.class,0);
		}
		public Type_voidContext type_void() {
			return getRuleContext(Type_voidContext.class,0);
		}
		public Method_declaration2Context method_declaration2() {
			return getRuleContext(Method_declaration2Context.class,0);
		}
		public Class_definitionContext class_definition() {
			return getRuleContext(Class_definitionContext.class,0);
		}
		public Struct_definitionContext struct_definition() {
			return getRuleContext(Struct_definitionContext.class,0);
		}
		public Interface_definitionContext interface_definition() {
			return getRuleContext(Interface_definitionContext.class,0);
		}
		public Enum_definitionContext enum_definition() {
			return getRuleContext(Enum_definitionContext.class,0);
		}
		public Delegate_definitionContext delegate_definition() {
			return getRuleContext(Delegate_definitionContext.class,0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterCommon_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitCommon_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitCommon_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_member_declarationContext common_member_declaration() throws RecognitionException {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_common_member_declaration);
		try {
			setState(2326);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2311);
				constant_declaration2();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2312);
				typed_member_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2313);
				event_declaration2();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2314);
				conversion_operator_declarator();
				setState(2315);
				operator_body();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2317);
				constructor_declaration2();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2318);
				type_void();
				setState(2319);
				method_declaration2();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2321);
				class_definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2322);
				struct_definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2323);
				interface_definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2324);
				enum_definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2325);
				delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Typed_member_declarationContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Interface_typeContext interface_type() {
			return getRuleContext(Interface_typeContext.class,0);
		}
		public TerminalNode DOT() { return getToken(CSharp5Parser.DOT, 0); }
		public Indexer_declaration2Context indexer_declaration2() {
			return getRuleContext(Indexer_declaration2Context.class,0);
		}
		public Method_declaration2Context method_declaration2() {
			return getRuleContext(Method_declaration2Context.class,0);
		}
		public Property_declaration2Context property_declaration2() {
			return getRuleContext(Property_declaration2Context.class,0);
		}
		public Operator_declaration2Context operator_declaration2() {
			return getRuleContext(Operator_declaration2Context.class,0);
		}
		public Field_declaration2Context field_declaration2() {
			return getRuleContext(Field_declaration2Context.class,0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typed_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterTyped_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitTyped_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitTyped_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Typed_member_declarationContext typed_member_declaration() throws RecognitionException {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_typed_member_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2328);
			type();
			setState(2338);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2329);
				interface_type();
				setState(2330);
				match(DOT);
				setState(2331);
				indexer_declaration2();
				}
				break;
			case 2:
				{
				setState(2333);
				method_declaration2();
				}
				break;
			case 3:
				{
				setState(2334);
				property_declaration2();
				}
				break;
			case 4:
				{
				setState(2335);
				indexer_declaration2();
				}
				break;
			case 5:
				{
				setState(2336);
				operator_declaration2();
				}
				break;
			case 6:
				{
				setState(2337);
				field_declaration2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_declaratorsContext extends ParserRuleContext {
		public List<Constant_declaratorContext> constant_declarator() {
			return getRuleContexts(Constant_declaratorContext.class);
		}
		public Constant_declaratorContext constant_declarator(int i) {
			return getRuleContext(Constant_declaratorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstant_declarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstant_declarators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstant_declarators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_declaratorsContext constant_declarators() throws RecognitionException {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_constant_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2340);
			constant_declarator();
			setState(2345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2341);
				match(COMMA);
				setState(2342);
				constant_declarator();
				}
				}
				setState(2347);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_declaratorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstant_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstant_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstant_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_declaratorContext constant_declarator() throws RecognitionException {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_constant_declarator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			identifier();
			setState(2349);
			match(ASSIGNMENT);
			setState(2350);
			constant_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declaratorsContext extends ParserRuleContext {
		public List<Variable_declaratorContext> variable_declarator() {
			return getRuleContexts(Variable_declaratorContext.class);
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return getRuleContext(Variable_declaratorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariable_declarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariable_declarators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariable_declarators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declaratorsContext variable_declarators() throws RecognitionException {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_variable_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2352);
			variable_declarator();
			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2353);
				match(COMMA);
				setState(2354);
				variable_declarator();
				}
				}
				setState(2359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declaratorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Variable_initializerContext variable_initializer() {
			return getRuleContext(Variable_initializerContext.class,0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariable_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariable_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariable_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declaratorContext variable_declarator() throws RecognitionException {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_variable_declarator);
		try {
			setState(2365);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2360);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2361);
				identifier();
				setState(2362);
				match(ASSIGNMENT);
				setState(2363);
				variable_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_initializerContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Array_initializerContext array_initializer() {
			return getRuleContext(Array_initializerContext.class,0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariable_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariable_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariable_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_initializerContext variable_initializer() throws RecognitionException {
		Variable_initializerContext _localctx = new Variable_initializerContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_variable_initializer);
		try {
			setState(2369);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				enterOuterAlt(_localctx, 1);
				{
				setState(2367);
				expression();
				}
				break;
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2368);
				array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_declarationContext extends ParserRuleContext {
		public Method_headerContext method_header() {
			return getRuleContext(Method_headerContext.class,0);
		}
		public Method_bodyContext method_body() {
			return getRuleContext(Method_bodyContext.class,0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_declarationContext method_declaration() throws RecognitionException {
		Method_declarationContext _localctx = new Method_declarationContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_method_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2371);
			method_header();
			setState(2372);
			method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_headerContext extends ParserRuleContext {
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public Member_nameContext member_name() {
			return getRuleContext(Member_nameContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Method_modifiersContext method_modifiers() {
			return getRuleContext(Method_modifiersContext.class,0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return getRuleContext(Partial_contextual_keywordContext.class,0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Method_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_header; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_header(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_header(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_header(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_headerContext method_header() throws RecognitionException {
		Method_headerContext _localctx = new Method_headerContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_method_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2374);
				attributes();
				}
			}

			setState(2378);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				setState(2377);
				method_modifiers();
				}
			}

			setState(2381);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2380);
				partial_contextual_keyword();
				}
				break;
			}
			setState(2383);
			return_type();
			setState(2384);
			member_name();
			setState(2386);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(2385);
				type_parameter_list();
				}
			}

			setState(2388);
			match(OPEN_PARENS);
			setState(2390);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(2389);
				formal_parameter_list();
				}
			}

			setState(2392);
			match(CLOSE_PARENS);
			setState(2394);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2393);
				type_parameter_constraints_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_modifiersContext extends ParserRuleContext {
		public List<Method_modifierContext> method_modifier() {
			return getRuleContexts(Method_modifierContext.class);
		}
		public Method_modifierContext method_modifier(int i) {
			return getRuleContext(Method_modifierContext.class,i);
		}
		public Method_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_modifiersContext method_modifiers() throws RecognitionException {
		Method_modifiersContext _localctx = new Method_modifiersContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_method_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2396);
				method_modifier();
				}
				}
				setState(2399); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public TerminalNode ASYNC() { return getToken(CSharp5Parser.ASYNC, 0); }
		public Method_modifier_unsafeContext method_modifier_unsafe() {
			return getRuleContext(Method_modifier_unsafeContext.class,0);
		}
		public Method_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_modifierContext method_modifier() throws RecognitionException {
		Method_modifierContext _localctx = new Method_modifierContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_method_modifier);
		try {
			setState(2414);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2401);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2402);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2403);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2404);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2405);
				match(PRIVATE);
				}
				break;
			case STATIC:
				enterOuterAlt(_localctx, 6);
				{
				setState(2406);
				match(STATIC);
				}
				break;
			case VIRTUAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2407);
				match(VIRTUAL);
				}
				break;
			case SEALED:
				enterOuterAlt(_localctx, 8);
				{
				setState(2408);
				match(SEALED);
				}
				break;
			case OVERRIDE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2409);
				match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				enterOuterAlt(_localctx, 10);
				{
				setState(2410);
				match(ABSTRACT);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 11);
				{
				setState(2411);
				match(EXTERN);
				}
				break;
			case ASYNC:
				enterOuterAlt(_localctx, 12);
				{
				setState(2412);
				match(ASYNC);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 13);
				{
				setState(2413);
				method_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_typeContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterReturn_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitReturn_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitReturn_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_typeContext return_type() throws RecognitionException {
		Return_typeContext _localctx = new Return_typeContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_return_type);
		try {
			setState(2418);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2416);
				type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2417);
				match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_nameContext extends ParserRuleContext {
		public Interface_typeContext interface_type() {
			return getRuleContext(Interface_typeContext.class,0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_nameContext member_name() throws RecognitionException {
		Member_nameContext _localctx = new Member_nameContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_member_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			interface_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_bodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_bodyContext method_body() throws RecognitionException {
		Method_bodyContext _localctx = new Method_bodyContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_method_body);
		try {
			setState(2424);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2422);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2423);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Formal_parameter_listContext extends ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return getRuleContext(Parameter_arrayContext.class,0);
		}
		public Fixed_parametersContext fixed_parameters() {
			return getRuleContext(Fixed_parametersContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_formal_parameter_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFormal_parameter_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFormal_parameter_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFormal_parameter_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Formal_parameter_listContext formal_parameter_list() throws RecognitionException {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_formal_parameter_list);
		int _la;
		try {
			setState(2432);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2426);
				parameter_array();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2427);
				fixed_parameters();
				setState(2430);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2428);
					match(COMMA);
					setState(2429);
					parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_parametersContext extends ParserRuleContext {
		public List<Fixed_parameterContext> fixed_parameter() {
			return getRuleContexts(Fixed_parameterContext.class);
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return getRuleContext(Fixed_parameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_parametersContext fixed_parameters() throws RecognitionException {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_fixed_parameters);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2434);
			fixed_parameter();
			setState(2439);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2435);
					match(COMMA);
					setState(2436);
					fixed_parameter();
					}
					} 
				}
				setState(2441);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_parameterContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return getRuleContext(Parameter_modifierContext.class,0);
		}
		public Default_argumentContext default_argument() {
			return getRuleContext(Default_argumentContext.class,0);
		}
		public ArglistContext arglist() {
			return getRuleContext(ArglistContext.class,0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_parameterContext fixed_parameter() throws RecognitionException {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_fixed_parameter);
		int _la;
		try {
			setState(2454);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2443);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					setState(2442);
					attributes();
					}
				}

				setState(2446);
				_la = _input.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (OUT - 71)) | (1L << (REF - 71)) | (1L << (THIS - 71)))) != 0)) {
					{
					setState(2445);
					parameter_modifier();
					}
				}

				setState(2448);
				type();
				setState(2449);
				identifier();
				setState(2451);
				_la = _input.LA(1);
				if (_la==ASSIGNMENT) {
					{
					setState(2450);
					default_argument();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2453);
				arglist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_argumentContext extends ParserRuleContext {
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Default_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDefault_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDefault_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDefault_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_argumentContext default_argument() throws RecognitionException {
		Default_argumentContext _localctx = new Default_argumentContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_default_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456);
			match(ASSIGNMENT);
			setState(2457);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_modifierContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(CSharp5Parser.REF, 0); }
		public TerminalNode OUT() { return getToken(CSharp5Parser.OUT, 0); }
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterParameter_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitParameter_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitParameter_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_modifierContext parameter_modifier() throws RecognitionException {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_parameter_modifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2459);
			_la = _input.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (OUT - 71)) | (1L << (REF - 71)) | (1L << (THIS - 71)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_arrayContext extends ParserRuleContext {
		public TerminalNode PARAMS() { return getToken(CSharp5Parser.PARAMS, 0); }
		public Array_typeContext array_type() {
			return getRuleContext(Array_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_array; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterParameter_array(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitParameter_array(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitParameter_array(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_arrayContext parameter_array() throws RecognitionException {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_parameter_array);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2462);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2461);
				attributes();
				}
			}

			setState(2464);
			match(PARAMS);
			setState(2465);
			array_type();
			setState(2466);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Property_declarationContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Member_nameContext member_name() {
			return getRuleContext(Member_nameContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return getRuleContext(Accessor_declarationsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Property_modifiersContext property_modifiers() {
			return getRuleContext(Property_modifiersContext.class,0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterProperty_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitProperty_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitProperty_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Property_declarationContext property_declaration() throws RecognitionException {
		Property_declarationContext _localctx = new Property_declarationContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_property_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2468);
				attributes();
				}
			}

			setState(2472);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				setState(2471);
				property_modifiers();
				}
			}

			setState(2474);
			type();
			setState(2475);
			member_name();
			setState(2476);
			match(OPEN_BRACE);
			setState(2477);
			accessor_declarations();
			setState(2478);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Property_modifiersContext extends ParserRuleContext {
		public List<Property_modifierContext> property_modifier() {
			return getRuleContexts(Property_modifierContext.class);
		}
		public Property_modifierContext property_modifier(int i) {
			return getRuleContext(Property_modifierContext.class,i);
		}
		public Property_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterProperty_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitProperty_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitProperty_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Property_modifiersContext property_modifiers() throws RecognitionException {
		Property_modifiersContext _localctx = new Property_modifiersContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_property_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2480);
				property_modifier();
				}
				}
				setState(2483); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Property_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public Property_modifier_unsafeContext property_modifier_unsafe() {
			return getRuleContext(Property_modifier_unsafeContext.class,0);
		}
		public Property_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterProperty_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitProperty_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitProperty_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Property_modifierContext property_modifier() throws RecognitionException {
		Property_modifierContext _localctx = new Property_modifierContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_property_modifier);
		try {
			setState(2497);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2485);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2486);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2487);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2488);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2489);
				match(PRIVATE);
				}
				break;
			case STATIC:
				enterOuterAlt(_localctx, 6);
				{
				setState(2490);
				match(STATIC);
				}
				break;
			case VIRTUAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2491);
				match(VIRTUAL);
				}
				break;
			case SEALED:
				enterOuterAlt(_localctx, 8);
				{
				setState(2492);
				match(SEALED);
				}
				break;
			case OVERRIDE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2493);
				match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				enterOuterAlt(_localctx, 10);
				{
				setState(2494);
				match(ABSTRACT);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 11);
				{
				setState(2495);
				match(EXTERN);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 12);
				{
				setState(2496);
				property_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accessor_declarationsContext extends ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		public Get_contextual_keywordContext get_contextual_keyword() {
			return getRuleContext(Get_contextual_keywordContext.class,0);
		}
		public Accessor_bodyContext accessor_body() {
			return getRuleContext(Accessor_bodyContext.class,0);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return getRuleContext(Set_contextual_keywordContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return getRuleContext(Accessor_modifierContext.class,0);
		}
		public Set_accessor_declarationContext set_accessor_declaration() {
			return getRuleContext(Set_accessor_declarationContext.class,0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return getRuleContext(Get_accessor_declarationContext.class,0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessor_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAccessor_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAccessor_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAccessor_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Accessor_declarationsContext accessor_declarations() throws RecognitionException {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_accessor_declarations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2499);
				((Accessor_declarationsContext)_localctx).attrs = attributes();
				}
			}

			setState(2503);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)))) != 0)) {
				{
				setState(2502);
				((Accessor_declarationsContext)_localctx).mods = accessor_modifier();
				}
			}

			setState(2515);
			switch (_input.LA(1)) {
			case GET:
				{
				setState(2505);
				get_contextual_keyword();
				setState(2506);
				accessor_body();
				setState(2508);
				_la = _input.LA(1);
				if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (SET - 57)) | (1L << (OPEN_BRACKET - 57)))) != 0)) {
					{
					setState(2507);
					set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				setState(2510);
				set_contextual_keyword();
				setState(2511);
				accessor_body();
				setState(2513);
				_la = _input.LA(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					setState(2512);
					get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_accessor_declarationContext extends ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return getRuleContext(Get_contextual_keywordContext.class,0);
		}
		public Accessor_bodyContext accessor_body() {
			return getRuleContext(Accessor_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return getRuleContext(Accessor_modifierContext.class,0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_accessor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGet_accessor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGet_accessor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGet_accessor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_accessor_declarationContext get_accessor_declaration() throws RecognitionException {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_get_accessor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2517);
				attributes();
				}
			}

			setState(2521);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)))) != 0)) {
				{
				setState(2520);
				accessor_modifier();
				}
			}

			setState(2523);
			get_contextual_keyword();
			setState(2524);
			accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_accessor_declarationContext extends ParserRuleContext {
		public Set_contextual_keywordContext set_contextual_keyword() {
			return getRuleContext(Set_contextual_keywordContext.class,0);
		}
		public Accessor_bodyContext accessor_body() {
			return getRuleContext(Accessor_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return getRuleContext(Accessor_modifierContext.class,0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_accessor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSet_accessor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSet_accessor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSet_accessor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_accessor_declarationContext set_accessor_declaration() throws RecognitionException {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_set_accessor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2527);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2526);
				attributes();
				}
			}

			setState(2530);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)))) != 0)) {
				{
				setState(2529);
				accessor_modifier();
				}
			}

			setState(2532);
			set_contextual_keyword();
			setState(2533);
			accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accessor_modifierContext extends ParserRuleContext {
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessor_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAccessor_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAccessor_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAccessor_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Accessor_modifierContext accessor_modifier() throws RecognitionException {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_accessor_modifier);
		try {
			setState(2542);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2535);
				match(PROTECTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2536);
				match(INTERNAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2537);
				match(PRIVATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2538);
				match(PROTECTED);
				setState(2539);
				match(INTERNAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2540);
				match(INTERNAL);
				setState(2541);
				match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accessor_bodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessor_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAccessor_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAccessor_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAccessor_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Accessor_bodyContext accessor_body() throws RecognitionException {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_accessor_body);
		try {
			setState(2546);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2544);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2545);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_declarationContext extends ParserRuleContext {
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return getRuleContext(Variable_declaratorsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return getRuleContext(Member_nameContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return getRuleContext(Event_accessor_declarationsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Event_modifiersContext event_modifiers() {
			return getRuleContext(Event_modifiersContext.class,0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEvent_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEvent_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEvent_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_declarationContext event_declaration() throws RecognitionException {
		Event_declarationContext _localctx = new Event_declarationContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_event_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2549);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2548);
				attributes();
				}
			}

			setState(2552);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				setState(2551);
				event_modifiers();
				}
			}

			setState(2554);
			match(EVENT);
			setState(2555);
			type();
			setState(2564);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2556);
				variable_declarators();
				setState(2557);
				match(SEMICOLON);
				}
				break;
			case 2:
				{
				setState(2559);
				member_name();
				setState(2560);
				match(OPEN_BRACE);
				setState(2561);
				event_accessor_declarations();
				setState(2562);
				match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_modifiersContext extends ParserRuleContext {
		public List<Event_modifierContext> event_modifier() {
			return getRuleContexts(Event_modifierContext.class);
		}
		public Event_modifierContext event_modifier(int i) {
			return getRuleContext(Event_modifierContext.class,i);
		}
		public Event_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEvent_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEvent_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEvent_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_modifiersContext event_modifiers() throws RecognitionException {
		Event_modifiersContext _localctx = new Event_modifiersContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_event_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2566);
			event_modifier();
			setState(2570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				{
				setState(2567);
				event_modifier();
				}
				}
				setState(2572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public TerminalNode ASYNC() { return getToken(CSharp5Parser.ASYNC, 0); }
		public Event_modifier_unsafeContext event_modifier_unsafe() {
			return getRuleContext(Event_modifier_unsafeContext.class,0);
		}
		public Event_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEvent_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEvent_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEvent_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_modifierContext event_modifier() throws RecognitionException {
		Event_modifierContext _localctx = new Event_modifierContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_event_modifier);
		try {
			setState(2586);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2573);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2574);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2575);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2576);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2577);
				match(PRIVATE);
				}
				break;
			case STATIC:
				enterOuterAlt(_localctx, 6);
				{
				setState(2578);
				match(STATIC);
				}
				break;
			case VIRTUAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2579);
				match(VIRTUAL);
				}
				break;
			case SEALED:
				enterOuterAlt(_localctx, 8);
				{
				setState(2580);
				match(SEALED);
				}
				break;
			case OVERRIDE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2581);
				match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				enterOuterAlt(_localctx, 10);
				{
				setState(2582);
				match(ABSTRACT);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 11);
				{
				setState(2583);
				match(EXTERN);
				}
				break;
			case ASYNC:
				enterOuterAlt(_localctx, 12);
				{
				setState(2584);
				match(ASYNC);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 13);
				{
				setState(2585);
				event_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_accessor_declarationsContext extends ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return getRuleContext(Add_contextual_keywordContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return getRuleContext(Remove_accessor_declarationContext.class,0);
		}
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return getRuleContext(Remove_contextual_keywordContext.class,0);
		}
		public Add_accessor_declarationContext add_accessor_declaration() {
			return getRuleContext(Add_accessor_declarationContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_accessor_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEvent_accessor_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEvent_accessor_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEvent_accessor_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_accessor_declarationsContext event_accessor_declarations() throws RecognitionException {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_event_accessor_declarations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2589);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2588);
				attributes();
				}
			}

			setState(2599);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(2591);
				add_contextual_keyword();
				setState(2592);
				block();
				setState(2593);
				remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				setState(2595);
				remove_contextual_keyword();
				setState(2596);
				block();
				setState(2597);
				add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_accessor_declarationContext extends ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return getRuleContext(Add_contextual_keywordContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_accessor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAdd_accessor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAdd_accessor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAdd_accessor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_accessor_declarationContext add_accessor_declaration() throws RecognitionException {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_add_accessor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2601);
				attributes();
				}
			}

			setState(2604);
			add_contextual_keyword();
			setState(2605);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Remove_accessor_declarationContext extends ParserRuleContext {
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return getRuleContext(Remove_contextual_keywordContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_remove_accessor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRemove_accessor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRemove_accessor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRemove_accessor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Remove_accessor_declarationContext remove_accessor_declaration() throws RecognitionException {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_remove_accessor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2608);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2607);
				attributes();
				}
			}

			setState(2610);
			remove_contextual_keyword();
			setState(2611);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexer_declarationContext extends ParserRuleContext {
		public Indexer_declaratorContext indexer_declarator() {
			return getRuleContext(Indexer_declaratorContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return getRuleContext(Accessor_declarationsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Indexer_modifiersContext indexer_modifiers() {
			return getRuleContext(Indexer_modifiersContext.class,0);
		}
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexer_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIndexer_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIndexer_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIndexer_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indexer_declarationContext indexer_declaration() throws RecognitionException {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_indexer_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2614);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2613);
				attributes();
				}
			}

			setState(2617);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				setState(2616);
				indexer_modifiers();
				}
			}

			setState(2619);
			indexer_declarator();
			setState(2620);
			match(OPEN_BRACE);
			setState(2621);
			accessor_declarations();
			setState(2622);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexer_modifiersContext extends ParserRuleContext {
		public List<Indexer_modifierContext> indexer_modifier() {
			return getRuleContexts(Indexer_modifierContext.class);
		}
		public Indexer_modifierContext indexer_modifier(int i) {
			return getRuleContext(Indexer_modifierContext.class,i);
		}
		public Indexer_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexer_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIndexer_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIndexer_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIndexer_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indexer_modifiersContext indexer_modifiers() throws RecognitionException {
		Indexer_modifiersContext _localctx = new Indexer_modifiersContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_indexer_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2624);
			indexer_modifier();
			setState(2628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (SEALED - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)))) != 0)) {
				{
				{
				setState(2625);
				indexer_modifier();
				}
				}
				setState(2630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexer_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
			return getRuleContext(Indexer_modifier_unsafeContext.class,0);
		}
		public Indexer_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexer_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIndexer_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIndexer_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIndexer_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indexer_modifierContext indexer_modifier() throws RecognitionException {
		Indexer_modifierContext _localctx = new Indexer_modifierContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_indexer_modifier);
		try {
			setState(2642);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2631);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2632);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2633);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2634);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2635);
				match(PRIVATE);
				}
				break;
			case VIRTUAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2636);
				match(VIRTUAL);
				}
				break;
			case SEALED:
				enterOuterAlt(_localctx, 7);
				{
				setState(2637);
				match(SEALED);
				}
				break;
			case OVERRIDE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2638);
				match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				enterOuterAlt(_localctx, 9);
				{
				setState(2639);
				match(ABSTRACT);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 10);
				{
				setState(2640);
				match(EXTERN);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 11);
				{
				setState(2641);
				indexer_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexer_declaratorContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Interface_typeContext interface_type() {
			return getRuleContext(Interface_typeContext.class,0);
		}
		public TerminalNode DOT() { return getToken(CSharp5Parser.DOT, 0); }
		public Indexer_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexer_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIndexer_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIndexer_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIndexer_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indexer_declaratorContext indexer_declarator() throws RecognitionException {
		Indexer_declaratorContext _localctx = new Indexer_declaratorContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_indexer_declarator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2644);
			type();
			setState(2648);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
				{
				setState(2645);
				interface_type();
				setState(2646);
				match(DOT);
				}
			}

			setState(2650);
			match(THIS);
			setState(2651);
			match(OPEN_BRACKET);
			setState(2652);
			formal_parameter_list();
			setState(2653);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_declarationContext extends ParserRuleContext {
		public Operator_modifiersContext operator_modifiers() {
			return getRuleContext(Operator_modifiersContext.class,0);
		}
		public Operator_declaratorContext operator_declarator() {
			return getRuleContext(Operator_declaratorContext.class,0);
		}
		public Operator_bodyContext operator_body() {
			return getRuleContext(Operator_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_declarationContext operator_declaration() throws RecognitionException {
		Operator_declarationContext _localctx = new Operator_declarationContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_operator_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2655);
				attributes();
				}
			}

			setState(2658);
			operator_modifiers();
			setState(2659);
			operator_declarator();
			setState(2660);
			operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_modifiersContext extends ParserRuleContext {
		public List<Operator_modifierContext> operator_modifier() {
			return getRuleContexts(Operator_modifierContext.class);
		}
		public Operator_modifierContext operator_modifier(int i) {
			return getRuleContext(Operator_modifierContext.class,i);
		}
		public Operator_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_modifiersContext operator_modifiers() throws RecognitionException {
		Operator_modifiersContext _localctx = new Operator_modifiersContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_operator_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662);
			operator_modifier();
			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (EXTERN - 41)) | (1L << (PUBLIC - 41)) | (1L << (STATIC - 41)) | (1L << (UNSAFE - 41)))) != 0)) {
				{
				{
				setState(2663);
				operator_modifier();
				}
				}
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_modifierContext extends ParserRuleContext {
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public Operator_modifier_unsafeContext operator_modifier_unsafe() {
			return getRuleContext(Operator_modifier_unsafeContext.class,0);
		}
		public Operator_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_modifierContext operator_modifier() throws RecognitionException {
		Operator_modifierContext _localctx = new Operator_modifierContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_operator_modifier);
		try {
			setState(2673);
			switch (_input.LA(1)) {
			case PUBLIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(2669);
				match(PUBLIC);
				}
				break;
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2670);
				match(STATIC);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2671);
				match(EXTERN);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2672);
				operator_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_declaratorContext extends ParserRuleContext {
		public Unary_operator_declaratorContext unary_operator_declarator() {
			return getRuleContext(Unary_operator_declaratorContext.class,0);
		}
		public Binary_operator_declaratorContext binary_operator_declarator() {
			return getRuleContext(Binary_operator_declaratorContext.class,0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return getRuleContext(Conversion_operator_declaratorContext.class,0);
		}
		public Operator_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_declaratorContext operator_declarator() throws RecognitionException {
		Operator_declaratorContext _localctx = new Operator_declaratorContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_operator_declarator);
		try {
			setState(2678);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2675);
				unary_operator_declarator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2676);
				binary_operator_declarator();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2677);
				conversion_operator_declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_declaratorContext extends ParserRuleContext {
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public TerminalNode OPERATOR() { return getToken(CSharp5Parser.OPERATOR, 0); }
		public Overloadable_unary_operatorContext overloadable_unary_operator() {
			return getRuleContext(Overloadable_unary_operatorContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Unary_operator_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnary_operator_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnary_operator_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnary_operator_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_operator_declaratorContext unary_operator_declarator() throws RecognitionException {
		Unary_operator_declaratorContext _localctx = new Unary_operator_declaratorContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_unary_operator_declarator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2680);
			type();
			setState(2681);
			match(OPERATOR);
			setState(2682);
			overloadable_unary_operator();
			setState(2683);
			match(OPEN_PARENS);
			setState(2684);
			type();
			setState(2685);
			identifier();
			setState(2686);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overloadable_unary_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(CSharp5Parser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CSharp5Parser.MINUS, 0); }
		public TerminalNode BANG() { return getToken(CSharp5Parser.BANG, 0); }
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public TerminalNode OP_INC() { return getToken(CSharp5Parser.OP_INC, 0); }
		public TerminalNode OP_DEC() { return getToken(CSharp5Parser.OP_DEC, 0); }
		public TerminalNode TRUE() { return getToken(CSharp5Parser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(CSharp5Parser.FALSE, 0); }
		public Overloadable_unary_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overloadable_unary_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOverloadable_unary_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOverloadable_unary_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOverloadable_unary_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overloadable_unary_operatorContext overloadable_unary_operator() throws RecognitionException {
		Overloadable_unary_operatorContext _localctx = new Overloadable_unary_operatorContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_overloadable_unary_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2688);
			_la = _input.LA(1);
			if ( !(_la==FALSE || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (TRUE - 95)) | (1L << (PLUS - 95)) | (1L << (MINUS - 95)) | (1L << (BANG - 95)) | (1L << (TILDE - 95)) | (1L << (OP_INC - 95)) | (1L << (OP_DEC - 95)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_operator_declaratorContext extends ParserRuleContext {
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public TerminalNode OPERATOR() { return getToken(CSharp5Parser.OPERATOR, 0); }
		public Overloadable_binary_operatorContext overloadable_binary_operator() {
			return getRuleContext(Overloadable_binary_operatorContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Binary_operator_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_operator_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBinary_operator_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBinary_operator_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBinary_operator_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binary_operator_declaratorContext binary_operator_declarator() throws RecognitionException {
		Binary_operator_declaratorContext _localctx = new Binary_operator_declaratorContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_binary_operator_declarator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2690);
			type();
			setState(2691);
			match(OPERATOR);
			setState(2692);
			overloadable_binary_operator();
			setState(2693);
			match(OPEN_PARENS);
			setState(2694);
			type();
			setState(2695);
			identifier();
			setState(2696);
			match(COMMA);
			setState(2697);
			type();
			setState(2698);
			identifier();
			setState(2699);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overloadable_binary_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(CSharp5Parser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CSharp5Parser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(CSharp5Parser.STAR, 0); }
		public TerminalNode DIV() { return getToken(CSharp5Parser.DIV, 0); }
		public TerminalNode PERCENT() { return getToken(CSharp5Parser.PERCENT, 0); }
		public TerminalNode AMP() { return getToken(CSharp5Parser.AMP, 0); }
		public TerminalNode BITWISE_OR() { return getToken(CSharp5Parser.BITWISE_OR, 0); }
		public TerminalNode CARET() { return getToken(CSharp5Parser.CARET, 0); }
		public TerminalNode OP_LEFT_SHIFT() { return getToken(CSharp5Parser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return getRuleContext(Right_shiftContext.class,0);
		}
		public TerminalNode OP_EQ() { return getToken(CSharp5Parser.OP_EQ, 0); }
		public TerminalNode OP_NE() { return getToken(CSharp5Parser.OP_NE, 0); }
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public TerminalNode OP_GE() { return getToken(CSharp5Parser.OP_GE, 0); }
		public TerminalNode OP_LE() { return getToken(CSharp5Parser.OP_LE, 0); }
		public Overloadable_binary_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overloadable_binary_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOverloadable_binary_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOverloadable_binary_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOverloadable_binary_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overloadable_binary_operatorContext overloadable_binary_operator() throws RecognitionException {
		Overloadable_binary_operatorContext _localctx = new Overloadable_binary_operatorContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_overloadable_binary_operator);
		try {
			setState(2717);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2701);
				match(PLUS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2702);
				match(MINUS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2703);
				match(STAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2704);
				match(DIV);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2705);
				match(PERCENT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2706);
				match(AMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2707);
				match(BITWISE_OR);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2708);
				match(CARET);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2709);
				match(OP_LEFT_SHIFT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2710);
				right_shift();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2711);
				match(OP_EQ);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2712);
				match(OP_NE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2713);
				match(GT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2714);
				match(LT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2715);
				match(OP_GE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2716);
				match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overloadable_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(CSharp5Parser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(CSharp5Parser.MINUS, 0); }
		public TerminalNode BANG() { return getToken(CSharp5Parser.BANG, 0); }
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public TerminalNode OP_INC() { return getToken(CSharp5Parser.OP_INC, 0); }
		public TerminalNode OP_DEC() { return getToken(CSharp5Parser.OP_DEC, 0); }
		public TerminalNode TRUE() { return getToken(CSharp5Parser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(CSharp5Parser.FALSE, 0); }
		public TerminalNode STAR() { return getToken(CSharp5Parser.STAR, 0); }
		public TerminalNode DIV() { return getToken(CSharp5Parser.DIV, 0); }
		public TerminalNode PERCENT() { return getToken(CSharp5Parser.PERCENT, 0); }
		public TerminalNode AMP() { return getToken(CSharp5Parser.AMP, 0); }
		public TerminalNode BITWISE_OR() { return getToken(CSharp5Parser.BITWISE_OR, 0); }
		public TerminalNode CARET() { return getToken(CSharp5Parser.CARET, 0); }
		public TerminalNode OP_LEFT_SHIFT() { return getToken(CSharp5Parser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return getRuleContext(Right_shiftContext.class,0);
		}
		public TerminalNode OP_EQ() { return getToken(CSharp5Parser.OP_EQ, 0); }
		public TerminalNode OP_NE() { return getToken(CSharp5Parser.OP_NE, 0); }
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public TerminalNode OP_GE() { return getToken(CSharp5Parser.OP_GE, 0); }
		public TerminalNode OP_LE() { return getToken(CSharp5Parser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overloadable_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOverloadable_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOverloadable_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOverloadable_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overloadable_operatorContext overloadable_operator() throws RecognitionException {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_overloadable_operator);
		try {
			setState(2741);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2719);
				match(PLUS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2720);
				match(MINUS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2721);
				match(BANG);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2722);
				match(TILDE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2723);
				match(OP_INC);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2724);
				match(OP_DEC);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2725);
				match(TRUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2726);
				match(FALSE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2727);
				match(STAR);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2728);
				match(DIV);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2729);
				match(PERCENT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2730);
				match(AMP);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2731);
				match(BITWISE_OR);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2732);
				match(CARET);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2733);
				match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2734);
				right_shift();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2735);
				match(OP_EQ);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2736);
				match(OP_NE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2737);
				match(GT);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2738);
				match(LT);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2739);
				match(OP_GE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2740);
				match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversion_operator_declaratorContext extends ParserRuleContext {
		public TerminalNode IMPLICIT() { return getToken(CSharp5Parser.IMPLICIT, 0); }
		public TerminalNode OPERATOR() { return getToken(CSharp5Parser.OPERATOR, 0); }
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode EXPLICIT() { return getToken(CSharp5Parser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversion_operator_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConversion_operator_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConversion_operator_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConversion_operator_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversion_operator_declaratorContext conversion_operator_declarator() throws RecognitionException {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_conversion_operator_declarator);
		try {
			setState(2759);
			switch (_input.LA(1)) {
			case IMPLICIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2743);
				match(IMPLICIT);
				setState(2744);
				match(OPERATOR);
				setState(2745);
				type();
				setState(2746);
				match(OPEN_PARENS);
				setState(2747);
				type();
				setState(2748);
				identifier();
				setState(2749);
				match(CLOSE_PARENS);
				}
				break;
			case EXPLICIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2751);
				match(EXPLICIT);
				setState(2752);
				match(OPERATOR);
				setState(2753);
				type();
				setState(2754);
				match(OPEN_PARENS);
				setState(2755);
				type();
				setState(2756);
				identifier();
				setState(2757);
				match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_bodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Operator_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_bodyContext operator_body() throws RecognitionException {
		Operator_bodyContext _localctx = new Operator_bodyContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_operator_body);
		try {
			setState(2763);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2761);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2762);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public Constructor_declaratorContext constructor_declarator() {
			return getRuleContext(Constructor_declaratorContext.class,0);
		}
		public Constructor_bodyContext constructor_body() {
			return getRuleContext(Constructor_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Constructor_modifiersContext constructor_modifiers() {
			return getRuleContext(Constructor_modifiersContext.class,0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2765);
				attributes();
				}
			}

			setState(2769);
			_la = _input.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (EXTERN - 41)) | (1L << (INTERNAL - 41)) | (1L << (PRIVATE - 41)) | (1L << (PROTECTED - 41)) | (1L << (PUBLIC - 41)) | (1L << (UNSAFE - 41)))) != 0)) {
				{
				setState(2768);
				constructor_modifiers();
				}
			}

			setState(2771);
			constructor_declarator();
			setState(2772);
			constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_modifiersContext extends ParserRuleContext {
		public List<Constructor_modifierContext> constructor_modifier() {
			return getRuleContexts(Constructor_modifierContext.class);
		}
		public Constructor_modifierContext constructor_modifier(int i) {
			return getRuleContext(Constructor_modifierContext.class,i);
		}
		public Constructor_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_modifiersContext constructor_modifiers() throws RecognitionException {
		Constructor_modifiersContext _localctx = new Constructor_modifiersContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_constructor_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2775); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2774);
				constructor_modifier();
				}
				}
				setState(2777); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (EXTERN - 41)) | (1L << (INTERNAL - 41)) | (1L << (PRIVATE - 41)) | (1L << (PROTECTED - 41)) | (1L << (PUBLIC - 41)) | (1L << (UNSAFE - 41)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_modifierContext extends ParserRuleContext {
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
			return getRuleContext(Constructor_modifier_unsafeContext.class,0);
		}
		public Constructor_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_modifierContext constructor_modifier() throws RecognitionException {
		Constructor_modifierContext _localctx = new Constructor_modifierContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_constructor_modifier);
		try {
			setState(2785);
			switch (_input.LA(1)) {
			case PUBLIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(2779);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(2780);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2781);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2782);
				match(PRIVATE);
				}
				break;
			case EXTERN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2783);
				match(EXTERN);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2784);
				constructor_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declaratorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return getRuleContext(Constructor_initializerContext.class,0);
		}
		public Constructor_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declaratorContext constructor_declarator() throws RecognitionException {
		Constructor_declaratorContext _localctx = new Constructor_declaratorContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_constructor_declarator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			identifier();
			setState(2788);
			match(OPEN_PARENS);
			setState(2790);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(2789);
				formal_parameter_list();
				}
			}

			setState(2792);
			match(CLOSE_PARENS);
			setState(2794);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(2793);
				constructor_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_initializerContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public TerminalNode BASE() { return getToken(CSharp5Parser.BASE, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_initializerContext constructor_initializer() throws RecognitionException {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_constructor_initializer);
		int _la;
		try {
			setState(2810);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2796);
				match(COLON);
				setState(2797);
				match(BASE);
				setState(2798);
				match(OPEN_PARENS);
				setState(2800);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					setState(2799);
					argument_list();
					}
				}

				setState(2802);
				match(CLOSE_PARENS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2803);
				match(COLON);
				setState(2804);
				match(THIS);
				setState(2805);
				match(OPEN_PARENS);
				setState(2807);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					setState(2806);
					argument_list();
					}
				}

				setState(2809);
				match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_bodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Constructor_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_bodyContext constructor_body() throws RecognitionException {
		Constructor_bodyContext _localctx = new Constructor_bodyContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_constructor_body);
		try {
			setState(2814);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2812);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2813);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_constructor_declarationContext extends ParserRuleContext {
		public Static_constructor_modifiersContext static_constructor_modifiers() {
			return getRuleContext(Static_constructor_modifiersContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Static_constructor_bodyContext static_constructor_body() {
			return getRuleContext(Static_constructor_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Static_constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatic_constructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatic_constructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatic_constructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_constructor_declarationContext static_constructor_declaration() throws RecognitionException {
		Static_constructor_declarationContext _localctx = new Static_constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_static_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2817);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2816);
				attributes();
				}
			}

			setState(2819);
			static_constructor_modifiers();
			setState(2820);
			identifier();
			setState(2821);
			match(OPEN_PARENS);
			setState(2822);
			match(CLOSE_PARENS);
			setState(2823);
			static_constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_constructor_modifiersContext extends ParserRuleContext {
		public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
			return getRuleContext(Static_constructor_modifiers_unsafeContext.class,0);
		}
		public Static_constructor_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_constructor_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatic_constructor_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatic_constructor_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatic_constructor_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_constructor_modifiersContext static_constructor_modifiers() throws RecognitionException {
		Static_constructor_modifiersContext _localctx = new Static_constructor_modifiersContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_static_constructor_modifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2825);
			static_constructor_modifiers_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_constructor_bodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Static_constructor_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_constructor_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatic_constructor_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatic_constructor_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatic_constructor_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_constructor_bodyContext static_constructor_body() throws RecognitionException {
		Static_constructor_bodyContext _localctx = new Static_constructor_bodyContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_static_constructor_body);
		try {
			setState(2829);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2827);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2828);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Destructor_declarationContext extends ParserRuleContext {
		public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
			return getRuleContext(Destructor_declaration_unsafeContext.class,0);
		}
		public Destructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDestructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDestructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDestructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Destructor_declarationContext destructor_declaration() throws RecognitionException {
		Destructor_declarationContext _localctx = new Destructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_destructor_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			destructor_declaration_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Destructor_bodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Destructor_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destructor_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDestructor_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDestructor_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDestructor_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Destructor_bodyContext destructor_body() throws RecognitionException {
		Destructor_bodyContext _localctx = new Destructor_bodyContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_destructor_body);
		try {
			setState(2835);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2833);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2834);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_body);
		try {
			setState(2839);
			switch (_input.LA(1)) {
			case OPEN_BRACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2837);
				block();
				}
				break;
			case SEMICOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2838);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_declarationContext extends ParserRuleContext {
		public TerminalNode STRUCT() { return getToken(CSharp5Parser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Struct_bodyContext struct_body() {
			return getRuleContext(Struct_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Struct_modifiersContext struct_modifiers() {
			return getRuleContext(Struct_modifiersContext.class,0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return getRuleContext(Partial_contextual_keywordContext.class,0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return getRuleContext(Struct_interfacesContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Struct_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_declarationContext struct_declaration() throws RecognitionException {
		Struct_declarationContext _localctx = new Struct_declarationContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_struct_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2842);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2841);
				attributes();
				}
			}

			setState(2845);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				setState(2844);
				struct_modifiers();
				}
			}

			setState(2848);
			_la = _input.LA(1);
			if (_la==PARTIAL) {
				{
				setState(2847);
				partial_contextual_keyword();
				}
			}

			setState(2850);
			match(STRUCT);
			setState(2851);
			identifier();
			setState(2853);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(2852);
				type_parameter_list();
				}
			}

			setState(2856);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(2855);
				struct_interfaces();
				}
			}

			setState(2859);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2858);
				type_parameter_constraints_clauses();
				}
			}

			setState(2861);
			struct_body();
			setState(2863);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(2862);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_modifiersContext extends ParserRuleContext {
		public List<Struct_modifierContext> struct_modifier() {
			return getRuleContexts(Struct_modifierContext.class);
		}
		public Struct_modifierContext struct_modifier(int i) {
			return getRuleContext(Struct_modifierContext.class,i);
		}
		public Struct_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_modifiersContext struct_modifiers() throws RecognitionException {
		Struct_modifiersContext _localctx = new Struct_modifiersContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_struct_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2865);
			struct_modifier();
			setState(2869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				{
				setState(2866);
				struct_modifier();
				}
				}
				setState(2871);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public Struct_modifier_unsafeContext struct_modifier_unsafe() {
			return getRuleContext(Struct_modifier_unsafeContext.class,0);
		}
		public Struct_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_modifierContext struct_modifier() throws RecognitionException {
		Struct_modifierContext _localctx = new Struct_modifierContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_struct_modifier);
		try {
			setState(2878);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2872);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2873);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(2874);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2875);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2876);
				match(PRIVATE);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2877);
				struct_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_interfacesContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return getRuleContext(Interface_type_listContext.class,0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_interfaces; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_interfaces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_interfaces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_interfaces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_interfacesContext struct_interfaces() throws RecognitionException {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_struct_interfaces);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2880);
			match(COLON);
			setState(2881);
			interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_bodyContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Struct_member_declarationsContext struct_member_declarations() {
			return getRuleContext(Struct_member_declarationsContext.class,0);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_bodyContext struct_body() throws RecognitionException {
		Struct_bodyContext _localctx = new Struct_bodyContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_struct_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			match(OPEN_BRACE);
			setState(2885);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				setState(2884);
				struct_member_declarations();
				}
			}

			setState(2887);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_member_declarationsContext extends ParserRuleContext {
		public List<Struct_member_declarationContext> struct_member_declaration() {
			return getRuleContexts(Struct_member_declarationContext.class);
		}
		public Struct_member_declarationContext struct_member_declaration(int i) {
			return getRuleContext(Struct_member_declarationContext.class,i);
		}
		public Struct_member_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_member_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_member_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_member_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_member_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_member_declarationsContext struct_member_declarations() throws RecognitionException {
		Struct_member_declarationsContext _localctx = new Struct_member_declarationsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_struct_member_declarations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2889);
			struct_member_declaration();
			setState(2893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				setState(2890);
				struct_member_declaration();
				}
				}
				setState(2895);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_member_declarationContext extends ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return getRuleContext(Common_member_declarationContext.class,0);
		}
		public TerminalNode FIXED() { return getToken(CSharp5Parser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return getRuleContext(Buffer_element_typeContext.class,0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return getRuleContext(Fixed_size_buffer_declaratorsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return getRuleContext(All_member_modifiersContext.class,0);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_member_declarationContext struct_member_declaration() throws RecognitionException {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_struct_member_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2897);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2896);
				attributes();
				}
			}

			setState(2900);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2899);
				all_member_modifiers();
				}
				break;
			}
			setState(2908);
			switch (_input.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				setState(2902);
				common_member_declaration();
				}
				break;
			case FIXED:
				{
				setState(2903);
				match(FIXED);
				setState(2904);
				buffer_element_type();
				setState(2905);
				fixed_size_buffer_declarators();
				setState(2906);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_typeContext extends ParserRuleContext {
		public Base_typeContext base_type() {
			return getRuleContext(Base_typeContext.class,0);
		}
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(CSharp5Parser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CSharp5Parser.STAR, i);
		}
		public List<TerminalNode> INTERR() { return getTokens(CSharp5Parser.INTERR); }
		public TerminalNode INTERR(int i) {
			return getToken(CSharp5Parser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArray_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArray_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArray_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_typeContext array_type() throws RecognitionException {
		Array_typeContext _localctx = new Array_typeContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_array_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2910);
			base_type();
			setState(2918); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					setState(2911);
					_la = _input.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					}
					setState(2916);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2917);
				rank_specifier();
				}
				}
				setState(2920); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (OPEN_BRACKET - 118)) | (1L << (STAR - 118)) | (1L << (INTERR - 118)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_array_typeContext extends ParserRuleContext {
		public Base_typeContext base_type() {
			return getRuleContext(Base_typeContext.class,0);
		}
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public List<TerminalNode> INTERR() { return getTokens(CSharp5Parser.INTERR); }
		public TerminalNode INTERR(int i) {
			return getToken(CSharp5Parser.INTERR, i);
		}
		public List<TerminalNode> STAR() { return getTokens(CSharp5Parser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(CSharp5Parser.STAR, i);
		}
		public Non_array_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_array_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNon_array_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNon_array_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNon_array_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_array_typeContext non_array_type() throws RecognitionException {
		Non_array_typeContext _localctx = new Non_array_typeContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_non_array_type);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2922);
			base_type();
			setState(2928);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2926);
					switch (_input.LA(1)) {
					case OPEN_BRACKET:
						{
						setState(2923);
						rank_specifier();
						}
						break;
					case INTERR:
						{
						setState(2924);
						match(INTERR);
						}
						break;
					case STAR:
						{
						setState(2925);
						match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2930);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rank_specifiersContext extends ParserRuleContext {
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public Rank_specifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rank_specifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRank_specifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRank_specifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRank_specifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rank_specifiersContext rank_specifiers() throws RecognitionException {
		Rank_specifiersContext _localctx = new Rank_specifiersContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_rank_specifiers);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2932); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2931);
					rank_specifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2934); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rank_specifierContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Dim_separatorsContext dim_separators() {
			return getRuleContext(Dim_separatorsContext.class,0);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rank_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRank_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRank_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRank_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rank_specifierContext rank_specifier() throws RecognitionException {
		Rank_specifierContext _localctx = new Rank_specifierContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_rank_specifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2936);
			match(OPEN_BRACKET);
			setState(2938);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2937);
				dim_separators();
				}
			}

			setState(2940);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dim_separatorsContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Dim_separatorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dim_separators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDim_separators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDim_separators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDim_separators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dim_separatorsContext dim_separators() throws RecognitionException {
		Dim_separatorsContext _localctx = new Dim_separatorsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_dim_separators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2942);
			match(COMMA);
			setState(2946);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2943);
				match(COMMA);
				}
				}
				setState(2948);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_initializerContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Variable_initializer_listContext variable_initializer_list() {
			return getRuleContext(Variable_initializer_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Array_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArray_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArray_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArray_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_initializerContext array_initializer() throws RecognitionException {
		Array_initializerContext _localctx = new Array_initializerContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_array_initializer);
		int _la;
		try {
			setState(2958);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2949);
				match(OPEN_BRACE);
				setState(2950);
				match(CLOSE_BRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2951);
				match(OPEN_BRACE);
				setState(2952);
				variable_initializer_list();
				setState(2954);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2953);
					match(COMMA);
					}
				}

				setState(2956);
				match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_initializer_listContext extends ParserRuleContext {
		public List<Variable_initializerContext> variable_initializer() {
			return getRuleContexts(Variable_initializerContext.class);
		}
		public Variable_initializerContext variable_initializer(int i) {
			return getRuleContext(Variable_initializerContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Variable_initializer_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_initializer_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariable_initializer_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariable_initializer_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariable_initializer_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_initializer_listContext variable_initializer_list() throws RecognitionException {
		Variable_initializer_listContext _localctx = new Variable_initializer_listContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_variable_initializer_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			variable_initializer();
			setState(2965);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2961);
					match(COMMA);
					setState(2962);
					variable_initializer();
					}
					} 
				}
				setState(2967);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_declarationContext extends ParserRuleContext {
		public TerminalNode INTERFACE() { return getToken(CSharp5Parser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Interface_bodyContext interface_body() {
			return getRuleContext(Interface_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Interface_modifiersContext interface_modifiers() {
			return getRuleContext(Interface_modifiersContext.class,0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return getRuleContext(Partial_contextual_keywordContext.class,0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return getRuleContext(Variant_type_parameter_listContext.class,0);
		}
		public Interface_baseContext interface_base() {
			return getRuleContext(Interface_baseContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Interface_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_declarationContext interface_declaration() throws RecognitionException {
		Interface_declarationContext _localctx = new Interface_declarationContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_interface_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2969);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(2968);
				attributes();
				}
			}

			setState(2972);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				setState(2971);
				interface_modifiers();
				}
			}

			setState(2975);
			_la = _input.LA(1);
			if (_la==PARTIAL) {
				{
				setState(2974);
				partial_contextual_keyword();
				}
			}

			setState(2977);
			match(INTERFACE);
			setState(2978);
			identifier();
			setState(2980);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(2979);
				variant_type_parameter_list();
				}
			}

			setState(2983);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(2982);
				interface_base();
				}
			}

			setState(2986);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2985);
				type_parameter_constraints_clauses();
				}
			}

			setState(2988);
			interface_body();
			setState(2990);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(2989);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_modifiersContext extends ParserRuleContext {
		public List<Interface_modifierContext> interface_modifier() {
			return getRuleContexts(Interface_modifierContext.class);
		}
		public Interface_modifierContext interface_modifier(int i) {
			return getRuleContext(Interface_modifierContext.class,i);
		}
		public Interface_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_modifiersContext interface_modifiers() throws RecognitionException {
		Interface_modifiersContext _localctx = new Interface_modifiersContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_interface_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2992);
			interface_modifier();
			setState(2996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				{
				setState(2993);
				interface_modifier();
				}
				}
				setState(2998);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public Interface_modifier_unsafeContext interface_modifier_unsafe() {
			return getRuleContext(Interface_modifier_unsafeContext.class,0);
		}
		public Interface_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_modifierContext interface_modifier() throws RecognitionException {
		Interface_modifierContext _localctx = new Interface_modifierContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_interface_modifier);
		try {
			setState(3005);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2999);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(3000);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3001);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3002);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3003);
				match(PRIVATE);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3004);
				interface_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variant_type_parameter_listContext extends ParserRuleContext {
		public TerminalNode LT() { return getToken(CSharp5Parser.LT, 0); }
		public Variant_type_parametersContext variant_type_parameters() {
			return getRuleContext(Variant_type_parametersContext.class,0);
		}
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variant_type_parameter_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariant_type_parameter_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariant_type_parameter_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariant_type_parameter_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variant_type_parameter_listContext variant_type_parameter_list() throws RecognitionException {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_variant_type_parameter_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3007);
			match(LT);
			setState(3008);
			variant_type_parameters();
			setState(3009);
			match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variant_type_parametersContext extends ParserRuleContext {
		public List<Type_parameterContext> type_parameter() {
			return getRuleContexts(Type_parameterContext.class);
		}
		public Type_parameterContext type_parameter(int i) {
			return getRuleContext(Type_parameterContext.class,i);
		}
		public List<AttributesContext> attributes() {
			return getRuleContexts(AttributesContext.class);
		}
		public AttributesContext attributes(int i) {
			return getRuleContext(AttributesContext.class,i);
		}
		public List<Variance_annotationContext> variance_annotation() {
			return getRuleContexts(Variance_annotationContext.class);
		}
		public Variance_annotationContext variance_annotation(int i) {
			return getRuleContext(Variance_annotationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Variant_type_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variant_type_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariant_type_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariant_type_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariant_type_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variant_type_parametersContext variant_type_parameters() throws RecognitionException {
		Variant_type_parametersContext _localctx = new Variant_type_parametersContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_variant_type_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3011);
				attributes();
				}
			}

			setState(3015);
			_la = _input.LA(1);
			if (_la==IN || _la==OUT) {
				{
				setState(3014);
				variance_annotation();
				}
			}

			setState(3017);
			type_parameter();
			setState(3028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3018);
				match(COMMA);
				setState(3020);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					setState(3019);
					attributes();
					}
				}

				setState(3023);
				_la = _input.LA(1);
				if (_la==IN || _la==OUT) {
					{
					setState(3022);
					variance_annotation();
					}
				}

				setState(3025);
				type_parameter();
				}
				}
				setState(3030);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variance_annotationContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public TerminalNode OUT() { return getToken(CSharp5Parser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variance_annotation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterVariance_annotation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitVariance_annotation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitVariance_annotation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variance_annotationContext variance_annotation() throws RecognitionException {
		Variance_annotationContext _localctx = new Variance_annotationContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_variance_annotation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3031);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_baseContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return getRuleContext(Interface_type_listContext.class,0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_baseContext interface_base() throws RecognitionException {
		Interface_baseContext _localctx = new Interface_baseContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_interface_base);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(COLON);
			setState(3034);
			interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_bodyContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Interface_member_declarationsContext interface_member_declarations() {
			return getRuleContext(Interface_member_declarationsContext.class,0);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_bodyContext interface_body() throws RecognitionException {
		Interface_bodyContext _localctx = new Interface_bodyContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_interface_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3036);
			match(OPEN_BRACE);
			setState(3038);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				setState(3037);
				interface_member_declarations();
				}
			}

			setState(3040);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_member_declarationsContext extends ParserRuleContext {
		public List<Interface_member_declarationContext> interface_member_declaration() {
			return getRuleContexts(Interface_member_declarationContext.class);
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return getRuleContext(Interface_member_declarationContext.class,i);
		}
		public Interface_member_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_member_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_member_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_member_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_member_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_member_declarationsContext interface_member_declarations() throws RecognitionException {
		Interface_member_declarationsContext _localctx = new Interface_member_declarationsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_interface_member_declarations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3042);
				interface_member_declaration();
				}
				}
				setState(3045); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_member_declarationContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return getRuleContext(Interface_accessorsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_member_declarationContext interface_member_declaration() throws RecognitionException {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_interface_member_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3047);
				attributes();
				}
			}

			setState(3051);
			_la = _input.LA(1);
			if (_la==NEW) {
				{
				setState(3050);
				match(NEW);
				}
			}

			setState(3103);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(3053);
				type();
				setState(3081);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(3054);
					identifier();
					setState(3056);
					_la = _input.LA(1);
					if (_la==LT) {
						{
						setState(3055);
						type_parameter_list();
						}
					}

					setState(3058);
					match(OPEN_PARENS);
					setState(3060);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
						{
						setState(3059);
						formal_parameter_list();
						}
					}

					setState(3062);
					match(CLOSE_PARENS);
					setState(3064);
					_la = _input.LA(1);
					if (_la==WHERE) {
						{
						setState(3063);
						type_parameter_constraints_clauses();
						}
					}

					setState(3066);
					match(SEMICOLON);
					}
					break;
				case 2:
					{
					setState(3068);
					identifier();
					setState(3069);
					match(OPEN_BRACE);
					setState(3070);
					interface_accessors();
					setState(3071);
					match(CLOSE_BRACE);
					}
					break;
				case 3:
					{
					setState(3073);
					match(THIS);
					setState(3074);
					match(OPEN_BRACKET);
					setState(3075);
					formal_parameter_list();
					setState(3076);
					match(CLOSE_BRACKET);
					setState(3077);
					match(OPEN_BRACE);
					setState(3078);
					interface_accessors();
					setState(3079);
					match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3083);
				match(VOID);
				setState(3084);
				identifier();
				setState(3086);
				_la = _input.LA(1);
				if (_la==LT) {
					{
					setState(3085);
					type_parameter_list();
					}
				}

				setState(3088);
				match(OPEN_PARENS);
				setState(3090);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
					{
					setState(3089);
					formal_parameter_list();
					}
				}

				setState(3092);
				match(CLOSE_PARENS);
				setState(3094);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3093);
					type_parameter_constraints_clauses();
					}
				}

				setState(3096);
				match(SEMICOLON);
				}
				break;
			case 3:
				{
				setState(3098);
				match(EVENT);
				setState(3099);
				type();
				setState(3100);
				identifier();
				setState(3101);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_method_declarationContext extends ParserRuleContext {
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Interface_method_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_method_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_method_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_method_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_method_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_method_declarationContext interface_method_declaration() throws RecognitionException {
		Interface_method_declarationContext _localctx = new Interface_method_declarationContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_interface_method_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3105);
				attributes();
				}
			}

			setState(3109);
			_la = _input.LA(1);
			if (_la==NEW) {
				{
				setState(3108);
				match(NEW);
				}
			}

			setState(3111);
			return_type();
			setState(3112);
			identifier();
			setState(3114);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3113);
				type_parameter_list();
				}
			}

			setState(3116);
			match(OPEN_PARENS);
			setState(3118);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(3117);
				formal_parameter_list();
				}
			}

			setState(3120);
			match(CLOSE_PARENS);
			setState(3122);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3121);
				type_parameter_constraints_clauses();
				}
			}

			setState(3124);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_property_declarationContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return getRuleContext(Interface_accessorsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Interface_property_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_property_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_property_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_property_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_property_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_property_declarationContext interface_property_declaration() throws RecognitionException {
		Interface_property_declarationContext _localctx = new Interface_property_declarationContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_interface_property_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3127);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3126);
				attributes();
				}
			}

			setState(3130);
			_la = _input.LA(1);
			if (_la==NEW) {
				{
				setState(3129);
				match(NEW);
				}
			}

			setState(3132);
			type();
			setState(3133);
			identifier();
			setState(3134);
			match(OPEN_BRACE);
			setState(3135);
			interface_accessors();
			setState(3136);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_accessorsContext extends ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return getRuleContext(Get_contextual_keywordContext.class,0);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(CSharp5Parser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(CSharp5Parser.SEMICOLON, i);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return getRuleContext(Set_contextual_keywordContext.class,0);
		}
		public List<AttributesContext> attributes() {
			return getRuleContexts(AttributesContext.class);
		}
		public AttributesContext attributes(int i) {
			return getRuleContext(AttributesContext.class,i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_accessors; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_accessors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_accessors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_accessors(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_accessorsContext interface_accessors() throws RecognitionException {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_interface_accessors);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3138);
				attributes();
				}
			}

			setState(3161);
			switch (_input.LA(1)) {
			case GET:
				{
				setState(3141);
				get_contextual_keyword();
				setState(3142);
				match(SEMICOLON);
				setState(3149);
				_la = _input.LA(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					setState(3144);
					_la = _input.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						setState(3143);
						attributes();
						}
					}

					setState(3146);
					set_contextual_keyword();
					setState(3147);
					match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				setState(3151);
				set_contextual_keyword();
				setState(3152);
				match(SEMICOLON);
				setState(3159);
				_la = _input.LA(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					setState(3154);
					_la = _input.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						setState(3153);
						attributes();
						}
					}

					setState(3156);
					get_contextual_keyword();
					setState(3157);
					match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_event_declarationContext extends ParserRuleContext {
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Interface_event_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_event_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_event_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_event_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_event_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_event_declarationContext interface_event_declaration() throws RecognitionException {
		Interface_event_declarationContext _localctx = new Interface_event_declarationContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_interface_event_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3163);
				attributes();
				}
			}

			setState(3167);
			_la = _input.LA(1);
			if (_la==NEW) {
				{
				setState(3166);
				match(NEW);
				}
			}

			setState(3169);
			match(EVENT);
			setState(3170);
			type();
			setState(3171);
			identifier();
			setState(3172);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_indexer_declarationContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return getRuleContext(Interface_accessorsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public Interface_indexer_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_indexer_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_indexer_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_indexer_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_indexer_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_indexer_declarationContext interface_indexer_declaration() throws RecognitionException {
		Interface_indexer_declarationContext _localctx = new Interface_indexer_declarationContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_interface_indexer_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3175);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3174);
				attributes();
				}
			}

			setState(3178);
			_la = _input.LA(1);
			if (_la==NEW) {
				{
				setState(3177);
				match(NEW);
				}
			}

			setState(3180);
			type();
			setState(3181);
			match(THIS);
			setState(3182);
			match(OPEN_BRACKET);
			setState(3183);
			formal_parameter_list();
			setState(3184);
			match(CLOSE_BRACKET);
			setState(3185);
			match(OPEN_BRACE);
			setState(3186);
			interface_accessors();
			setState(3187);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_declarationContext extends ParserRuleContext {
		public TerminalNode ENUM() { return getToken(CSharp5Parser.ENUM, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Enum_bodyContext enum_body() {
			return getRuleContext(Enum_bodyContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Enum_modifiersContext enum_modifiers() {
			return getRuleContext(Enum_modifiersContext.class,0);
		}
		public Enum_baseContext enum_base() {
			return getRuleContext(Enum_baseContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Enum_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_declarationContext enum_declaration() throws RecognitionException {
		Enum_declarationContext _localctx = new Enum_declarationContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_enum_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3190);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3189);
				attributes();
				}
			}

			setState(3193);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)))) != 0)) {
				{
				setState(3192);
				enum_modifiers();
				}
			}

			setState(3195);
			match(ENUM);
			setState(3196);
			identifier();
			setState(3198);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3197);
				enum_base();
				}
			}

			setState(3200);
			enum_body();
			setState(3202);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(3201);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_baseContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Integral_typeContext integral_type() {
			return getRuleContext(Integral_typeContext.class,0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_base; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_base(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_base(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_base(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_baseContext enum_base() throws RecognitionException {
		Enum_baseContext _localctx = new Enum_baseContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_enum_base);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3204);
			match(COLON);
			setState(3205);
			integral_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_bodyContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Enum_member_declarationsContext enum_member_declarations() {
			return getRuleContext(Enum_member_declarationsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Enum_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_bodyContext enum_body() throws RecognitionException {
		Enum_bodyContext _localctx = new Enum_bodyContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_enum_body);
		int _la;
		try {
			setState(3216);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3207);
				match(OPEN_BRACE);
				setState(3208);
				match(CLOSE_BRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3209);
				match(OPEN_BRACE);
				setState(3210);
				enum_member_declarations();
				setState(3212);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3211);
					match(COMMA);
					}
				}

				setState(3214);
				match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_modifiersContext extends ParserRuleContext {
		public List<Enum_modifierContext> enum_modifier() {
			return getRuleContexts(Enum_modifierContext.class);
		}
		public Enum_modifierContext enum_modifier(int i) {
			return getRuleContext(Enum_modifierContext.class,i);
		}
		public Enum_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_modifiersContext enum_modifiers() throws RecognitionException {
		Enum_modifiersContext _localctx = new Enum_modifiersContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_enum_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3219); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3218);
				enum_modifier();
				}
				}
				setState(3221); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public Enum_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_modifierContext enum_modifier() throws RecognitionException {
		Enum_modifierContext _localctx = new Enum_modifierContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_enum_modifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3223);
			_la = _input.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_member_declarationsContext extends ParserRuleContext {
		public List<Enum_member_declarationContext> enum_member_declaration() {
			return getRuleContexts(Enum_member_declarationContext.class);
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return getRuleContext(Enum_member_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Enum_member_declarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_member_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_member_declarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_member_declarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_member_declarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_member_declarationsContext enum_member_declarations() throws RecognitionException {
		Enum_member_declarationsContext _localctx = new Enum_member_declarationsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_enum_member_declarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3225);
			enum_member_declaration();
			setState(3230);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3226);
					match(COMMA);
					setState(3227);
					enum_member_declaration();
					}
					} 
				}
				setState(3232);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_member_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_member_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_member_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_member_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_member_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_member_declarationContext enum_member_declaration() throws RecognitionException {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_enum_member_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3233);
				attributes();
				}
			}

			setState(3236);
			identifier();
			setState(3239);
			_la = _input.LA(1);
			if (_la==ASSIGNMENT) {
				{
				setState(3237);
				match(ASSIGNMENT);
				setState(3238);
				constant_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_declarationContext extends ParserRuleContext {
		public TerminalNode DELEGATE() { return getToken(CSharp5Parser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Delegate_modifiersContext delegate_modifiers() {
			return getRuleContext(Delegate_modifiersContext.class,0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return getRuleContext(Variant_type_parameter_listContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Delegate_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_declarationContext delegate_declaration() throws RecognitionException {
		Delegate_declarationContext _localctx = new Delegate_declarationContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_delegate_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3242);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3241);
				attributes();
				}
			}

			setState(3245);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				setState(3244);
				delegate_modifiers();
				}
			}

			setState(3247);
			match(DELEGATE);
			setState(3248);
			return_type();
			setState(3249);
			identifier();
			setState(3251);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3250);
				variant_type_parameter_list();
				}
			}

			setState(3253);
			match(OPEN_PARENS);
			setState(3255);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(3254);
				formal_parameter_list();
				}
			}

			setState(3257);
			match(CLOSE_PARENS);
			setState(3259);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3258);
				type_parameter_constraints_clauses();
				}
			}

			setState(3261);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_modifiersContext extends ParserRuleContext {
		public List<Delegate_modifierContext> delegate_modifier() {
			return getRuleContexts(Delegate_modifierContext.class);
		}
		public Delegate_modifierContext delegate_modifier(int i) {
			return getRuleContext(Delegate_modifierContext.class,i);
		}
		public Delegate_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_modifiersContext delegate_modifiers() throws RecognitionException {
		Delegate_modifiersContext _localctx = new Delegate_modifiersContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_delegate_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			delegate_modifier();
			setState(3267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				{
				setState(3264);
				delegate_modifier();
				}
				}
				setState(3269);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
			return getRuleContext(Delegate_modifier_unsafeContext.class,0);
		}
		public Delegate_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_modifierContext delegate_modifier() throws RecognitionException {
		Delegate_modifierContext _localctx = new Delegate_modifierContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_delegate_modifier);
		try {
			setState(3276);
			switch (_input.LA(1)) {
			case NEW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3270);
				match(NEW);
				}
				break;
			case PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(3271);
				match(PUBLIC);
				}
				break;
			case PROTECTED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3272);
				match(PROTECTED);
				}
				break;
			case INTERNAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3273);
				match(INTERNAL);
				}
				break;
			case PRIVATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3274);
				match(PRIVATE);
				}
				break;
			case UNSAFE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3275);
				delegate_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_attributesContext extends ParserRuleContext {
		public Global_attribute_sectionsContext global_attribute_sections() {
			return getRuleContext(Global_attribute_sectionsContext.class,0);
		}
		public Global_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGlobal_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGlobal_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGlobal_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_attributesContext global_attributes() throws RecognitionException {
		Global_attributesContext _localctx = new Global_attributesContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_global_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3278);
			global_attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_attribute_sectionsContext extends ParserRuleContext {
		public List<Global_attribute_sectionContext> global_attribute_section() {
			return getRuleContexts(Global_attribute_sectionContext.class);
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return getRuleContext(Global_attribute_sectionContext.class,i);
		}
		public Global_attribute_sectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_attribute_sections; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGlobal_attribute_sections(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGlobal_attribute_sections(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGlobal_attribute_sections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_attribute_sectionsContext global_attribute_sections() throws RecognitionException {
		Global_attribute_sectionsContext _localctx = new Global_attribute_sectionsContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_global_attribute_sections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3281); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3280);
				global_attribute_section();
				}
				}
				setState(3283); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_attribute_sectionContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Global_attribute_target_specifierContext global_attribute_target_specifier() {
			return getRuleContext(Global_attribute_target_specifierContext.class,0);
		}
		public Attribute_listContext attribute_list() {
			return getRuleContext(Attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_attribute_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGlobal_attribute_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGlobal_attribute_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGlobal_attribute_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_attribute_sectionContext global_attribute_section() throws RecognitionException {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_global_attribute_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3285);
			match(OPEN_BRACKET);
			setState(3286);
			global_attribute_target_specifier();
			setState(3287);
			attribute_list();
			setState(3289);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3288);
				match(COMMA);
				}
			}

			setState(3291);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_attribute_target_specifierContext extends ParserRuleContext {
		public Global_attribute_targetContext global_attribute_target() {
			return getRuleContext(Global_attribute_targetContext.class,0);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Global_attribute_target_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_attribute_target_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGlobal_attribute_target_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGlobal_attribute_target_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGlobal_attribute_target_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_attribute_target_specifierContext global_attribute_target_specifier() throws RecognitionException {
		Global_attribute_target_specifierContext _localctx = new Global_attribute_target_specifierContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_global_attribute_target_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3293);
			global_attribute_target();
			setState(3294);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_attribute_targetContext extends ParserRuleContext {
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_attribute_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGlobal_attribute_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGlobal_attribute_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGlobal_attribute_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_attribute_targetContext global_attribute_target() throws RecognitionException {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_global_attribute_target);
		try {
			setState(3298);
			switch (_input.LA(1)) {
			case ABSTRACT:
			case AS:
			case ASYNC:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3296);
				keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3297);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributesContext extends ParserRuleContext {
		public Attribute_sectionsContext attribute_sections() {
			return getRuleContext(Attribute_sectionsContext.class,0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributesContext attributes() throws RecognitionException {
		AttributesContext _localctx = new AttributesContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3300);
			attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_sectionsContext extends ParserRuleContext {
		public List<Attribute_sectionContext> attribute_section() {
			return getRuleContexts(Attribute_sectionContext.class);
		}
		public Attribute_sectionContext attribute_section(int i) {
			return getRuleContext(Attribute_sectionContext.class,i);
		}
		public Attribute_sectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_sections; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_sections(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_sections(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_sections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_sectionsContext attribute_sections() throws RecognitionException {
		Attribute_sectionsContext _localctx = new Attribute_sectionsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_attribute_sections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3303); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3302);
				attribute_section();
				}
				}
				setState(3305); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_sectionContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Attribute_listContext attribute_list() {
			return getRuleContext(Attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Attribute_target_specifierContext attribute_target_specifier() {
			return getRuleContext(Attribute_target_specifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_sectionContext attribute_section() throws RecognitionException {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_attribute_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3307);
			match(OPEN_BRACKET);
			setState(3309);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(3308);
				attribute_target_specifier();
				}
				break;
			}
			setState(3311);
			attribute_list();
			setState(3313);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3312);
				match(COMMA);
				}
			}

			setState(3315);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_target_specifierContext extends ParserRuleContext {
		public Attribute_targetContext attribute_target() {
			return getRuleContext(Attribute_targetContext.class,0);
		}
		public TerminalNode COLON() { return getToken(CSharp5Parser.COLON, 0); }
		public Attribute_target_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_target_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_target_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_target_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_target_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_target_specifierContext attribute_target_specifier() throws RecognitionException {
		Attribute_target_specifierContext _localctx = new Attribute_target_specifierContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_attribute_target_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317);
			attribute_target();
			setState(3318);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_targetContext extends ParserRuleContext {
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_targetContext attribute_target() throws RecognitionException {
		Attribute_targetContext _localctx = new Attribute_targetContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_attribute_target);
		try {
			setState(3322);
			switch (_input.LA(1)) {
			case ABSTRACT:
			case AS:
			case ASYNC:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3320);
				keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3321);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_listContext extends ParserRuleContext {
		public List<AttributeContext> attribute() {
			return getRuleContexts(AttributeContext.class);
		}
		public AttributeContext attribute(int i) {
			return getRuleContext(AttributeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_listContext attribute_list() throws RecognitionException {
		Attribute_listContext _localctx = new Attribute_listContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_attribute_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3324);
			attribute();
			setState(3329);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3325);
					match(COMMA);
					setState(3326);
					attribute();
					}
					} 
				}
				setState(3331);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Attribute_argumentsContext attribute_arguments() {
			return getRuleContext(Attribute_argumentsContext.class,0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeContext attribute() throws RecognitionException {
		AttributeContext _localctx = new AttributeContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3332);
			attribute_name();
			setState(3334);
			_la = _input.LA(1);
			if (_la==OPEN_PARENS) {
				{
				setState(3333);
				attribute_arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3336);
			type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_argumentsContext extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Positional_argument_listContext positional_argument_list() {
			return getRuleContext(Positional_argument_listContext.class,0);
		}
		public Attribute_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_argumentsContext attribute_arguments() throws RecognitionException {
		Attribute_argumentsContext _localctx = new Attribute_argumentsContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_attribute_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3338);
			match(OPEN_PARENS);
			setState(3340);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(3339);
				positional_argument_list();
				}
			}

			setState(3342);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Positional_argument_listContext extends ParserRuleContext {
		public Positional_argumentContext arg;
		public Positional_argumentContext arg2;
		public List<Positional_argumentContext> positional_argument() {
			return getRuleContexts(Positional_argumentContext.class);
		}
		public Positional_argumentContext positional_argument(int i) {
			return getRuleContext(Positional_argumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Positional_argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positional_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPositional_argument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPositional_argument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPositional_argument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Positional_argument_listContext positional_argument_list() throws RecognitionException {
		Positional_argument_listContext _localctx = new Positional_argument_listContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_positional_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3344);
			((Positional_argument_listContext)_localctx).arg = positional_argument();
			setState(3349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3345);
				match(COMMA);
				setState(3346);
				((Positional_argument_listContext)_localctx).arg2 = positional_argument();
				}
				}
				setState(3351);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Positional_argumentContext extends ParserRuleContext {
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return getRuleContext(Attribute_argument_expressionContext.class,0);
		}
		public Positional_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positional_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPositional_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPositional_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPositional_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Positional_argumentContext positional_argument() throws RecognitionException {
		Positional_argumentContext _localctx = new Positional_argumentContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_positional_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3352);
			attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_argument_listContext extends ParserRuleContext {
		public List<Named_argumentContext> named_argument() {
			return getRuleContexts(Named_argumentContext.class);
		}
		public Named_argumentContext named_argument(int i) {
			return getRuleContext(Named_argumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Named_argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamed_argument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamed_argument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamed_argument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_argument_listContext named_argument_list() throws RecognitionException {
		Named_argument_listContext _localctx = new Named_argument_listContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_named_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3354);
			named_argument();
			setState(3359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3355);
				match(COMMA);
				setState(3356);
				named_argument();
				}
				}
				setState(3361);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_argumentContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return getRuleContext(Attribute_argument_expressionContext.class,0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterNamed_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitNamed_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitNamed_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_argumentContext named_argument() throws RecognitionException {
		Named_argumentContext _localctx = new Named_argumentContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_named_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3362);
			identifier();
			setState(3363);
			match(ASSIGNMENT);
			setState(3364);
			attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_argument_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Attribute_argument_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_argument_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAttribute_argument_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAttribute_argument_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAttribute_argument_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_argument_expressionContext attribute_argument_expression() throws RecognitionException {
		Attribute_argument_expressionContext _localctx = new Attribute_argument_expressionContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_attribute_argument_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3366);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Class_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_modifier_unsafeContext class_modifier_unsafe() throws RecognitionException {
		Class_modifier_unsafeContext _localctx = new Class_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_class_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Struct_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_modifier_unsafeContext struct_modifier_unsafe() throws RecognitionException {
		Struct_modifier_unsafeContext _localctx = new Struct_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_struct_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3370);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Interface_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_modifier_unsafeContext interface_modifier_unsafe() throws RecognitionException {
		Interface_modifier_unsafeContext _localctx = new Interface_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_interface_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3372);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Delegate_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_modifier_unsafeContext delegate_modifier_unsafe() throws RecognitionException {
		Delegate_modifier_unsafeContext _localctx = new Delegate_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_delegate_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Field_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterField_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitField_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitField_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_modifier_unsafeContext field_modifier_unsafe() throws RecognitionException {
		Field_modifier_unsafeContext _localctx = new Field_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_field_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Method_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_modifier_unsafeContext method_modifier_unsafe() throws RecognitionException {
		Method_modifier_unsafeContext _localctx = new Method_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_method_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Property_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Property_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterProperty_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitProperty_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitProperty_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Property_modifier_unsafeContext property_modifier_unsafe() throws RecognitionException {
		Property_modifier_unsafeContext _localctx = new Property_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_property_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3380);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Event_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEvent_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEvent_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEvent_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_modifier_unsafeContext event_modifier_unsafe() throws RecognitionException {
		Event_modifier_unsafeContext _localctx = new Event_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_event_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexer_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Indexer_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexer_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIndexer_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIndexer_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIndexer_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indexer_modifier_unsafeContext indexer_modifier_unsafe() throws RecognitionException {
		Indexer_modifier_unsafeContext _localctx = new Indexer_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_indexer_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Operator_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_modifier_unsafeContext operator_modifier_unsafe() throws RecognitionException {
		Operator_modifier_unsafeContext _localctx = new Operator_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_operator_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_modifier_unsafeContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Constructor_modifier_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_modifier_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_modifier_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_modifier_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_modifier_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_modifier_unsafeContext constructor_modifier_unsafe() throws RecognitionException {
		Constructor_modifier_unsafeContext _localctx = new Constructor_modifier_unsafeContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_constructor_modifier_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3388);
			match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Destructor_declaration_unsafeContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return getRuleContext(Destructor_bodyContext.class,0);
		}
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Destructor_declaration_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destructor_declaration_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDestructor_declaration_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDestructor_declaration_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDestructor_declaration_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Destructor_declaration_unsafeContext destructor_declaration_unsafe() throws RecognitionException {
		Destructor_declaration_unsafeContext _localctx = new Destructor_declaration_unsafeContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_destructor_declaration_unsafe);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3391);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3390);
				attributes();
				}
			}

			setState(3401);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(3394);
				_la = _input.LA(1);
				if (_la==EXTERN) {
					{
					setState(3393);
					match(EXTERN);
					}
				}

				setState(3397);
				_la = _input.LA(1);
				if (_la==UNSAFE) {
					{
					setState(3396);
					match(UNSAFE);
					}
				}

				}
				break;
			case 2:
				{
				setState(3399);
				match(UNSAFE);
				setState(3400);
				match(EXTERN);
				}
				break;
			}
			setState(3403);
			match(TILDE);
			setState(3404);
			identifier();
			setState(3405);
			match(OPEN_PARENS);
			setState(3406);
			match(CLOSE_PARENS);
			setState(3407);
			destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_constructor_modifiers_unsafeContext extends ParserRuleContext {
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Static_constructor_modifiers_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_constructor_modifiers_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStatic_constructor_modifiers_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStatic_constructor_modifiers_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStatic_constructor_modifiers_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() throws RecognitionException {
		Static_constructor_modifiers_unsafeContext _localctx = new Static_constructor_modifiers_unsafeContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_static_constructor_modifiers_unsafe);
		int _la;
		try {
			setState(3433);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3410);
				_la = _input.LA(1);
				if (_la==EXTERN || _la==UNSAFE) {
					{
					setState(3409);
					_la = _input.LA(1);
					if ( !(_la==EXTERN || _la==UNSAFE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(3412);
				match(STATIC);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3413);
				match(EXTERN);
				setState(3414);
				match(UNSAFE);
				setState(3415);
				match(STATIC);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3416);
				match(UNSAFE);
				setState(3417);
				match(EXTERN);
				setState(3418);
				match(STATIC);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3419);
				match(EXTERN);
				setState(3420);
				match(STATIC);
				setState(3421);
				match(UNSAFE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3422);
				match(UNSAFE);
				setState(3423);
				match(STATIC);
				setState(3424);
				match(EXTERN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3425);
				match(STATIC);
				setState(3426);
				_la = _input.LA(1);
				if ( !(_la==EXTERN || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3427);
				match(STATIC);
				setState(3428);
				match(EXTERN);
				setState(3429);
				match(UNSAFE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3430);
				match(STATIC);
				setState(3431);
				match(UNSAFE);
				setState(3432);
				match(EXTERN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Embedded_statement_unsafeContext extends ParserRuleContext {
		public Unsafe_statementContext unsafe_statement() {
			return getRuleContext(Unsafe_statementContext.class,0);
		}
		public Fixed_statementContext fixed_statement() {
			return getRuleContext(Fixed_statementContext.class,0);
		}
		public Embedded_statement_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_embedded_statement_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEmbedded_statement_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEmbedded_statement_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEmbedded_statement_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Embedded_statement_unsafeContext embedded_statement_unsafe() throws RecognitionException {
		Embedded_statement_unsafeContext _localctx = new Embedded_statement_unsafeContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_embedded_statement_unsafe);
		try {
			setState(3437);
			switch (_input.LA(1)) {
			case UNSAFE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3435);
				unsafe_statement();
				}
				break;
			case FIXED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3436);
				fixed_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsafe_statementContext extends ParserRuleContext {
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Unsafe_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsafe_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnsafe_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnsafe_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnsafe_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unsafe_statementContext unsafe_statement() throws RecognitionException {
		Unsafe_statementContext _localctx = new Unsafe_statementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_unsafe_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3439);
			match(UNSAFE);
			setState(3440);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_unsafeContext extends ParserRuleContext {
		public Pointer_typeContext pointer_type() {
			return getRuleContext(Pointer_typeContext.class,0);
		}
		public Type_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterType_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitType_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitType_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_unsafeContext type_unsafe() throws RecognitionException {
		Type_unsafeContext _localctx = new Type_unsafeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_type_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442);
			pointer_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pointer_typeContext extends ParserRuleContext {
		public Simple_typeContext simple_type() {
			return getRuleContext(Simple_typeContext.class,0);
		}
		public TerminalNode STAR() { return getToken(CSharp5Parser.STAR, 0); }
		public List<Rank_specifierContext> rank_specifier() {
			return getRuleContexts(Rank_specifierContext.class);
		}
		public Rank_specifierContext rank_specifier(int i) {
			return getRuleContext(Rank_specifierContext.class,i);
		}
		public List<TerminalNode> INTERR() { return getTokens(CSharp5Parser.INTERR); }
		public TerminalNode INTERR(int i) {
			return getToken(CSharp5Parser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pointer_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPointer_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPointer_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPointer_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pointer_typeContext pointer_type() throws RecognitionException {
		Pointer_typeContext _localctx = new Pointer_typeContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_pointer_type);
		int _la;
		try {
			setState(3466);
			switch (_input.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3444);
				simple_type();
				setState(3449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					setState(3447);
					switch (_input.LA(1)) {
					case OPEN_BRACKET:
						{
						setState(3445);
						rank_specifier();
						}
						break;
					case INTERR:
						{
						setState(3446);
						match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3451);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3452);
				match(STAR);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3454);
				class_type();
				setState(3459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					setState(3457);
					switch (_input.LA(1)) {
					case OPEN_BRACKET:
						{
						setState(3455);
						rank_specifier();
						}
						break;
					case INTERR:
						{
						setState(3456);
						match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3461);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3462);
				match(STAR);
				}
				break;
			case VOID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3464);
				match(VOID);
				setState(3465);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unmanaged_typeContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Unmanaged_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unmanaged_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnmanaged_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnmanaged_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnmanaged_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unmanaged_typeContext unmanaged_type() throws RecognitionException {
		Unmanaged_typeContext _localctx = new Unmanaged_typeContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_unmanaged_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3468);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_no_array_creation_expression_unsafeContext extends ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return getRuleContext(Primary_expressionContext.class,0);
		}
		public Primary_no_array_creation_expression_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_no_array_creation_expression_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPrimary_no_array_creation_expression_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPrimary_no_array_creation_expression_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPrimary_no_array_creation_expression_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_no_array_creation_expression_unsafeContext primary_no_array_creation_expression_unsafe() throws RecognitionException {
		Primary_no_array_creation_expression_unsafeContext _localctx = new Primary_no_array_creation_expression_unsafeContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_primary_no_array_creation_expression_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3470);
			primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expression_unsafeContext extends ParserRuleContext {
		public Pointer_indirection_expressionContext pointer_indirection_expression() {
			return getRuleContext(Pointer_indirection_expressionContext.class,0);
		}
		public Addressof_expressionContext addressof_expression() {
			return getRuleContext(Addressof_expressionContext.class,0);
		}
		public Unary_expression_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterUnary_expression_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitUnary_expression_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitUnary_expression_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expression_unsafeContext unary_expression_unsafe() throws RecognitionException {
		Unary_expression_unsafeContext _localctx = new Unary_expression_unsafeContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_unary_expression_unsafe);
		try {
			setState(3474);
			switch (_input.LA(1)) {
			case STAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3472);
				pointer_indirection_expression();
				}
				break;
			case AMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3473);
				addressof_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pointer_indirection_expressionContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(CSharp5Parser.STAR, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Pointer_indirection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pointer_indirection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPointer_indirection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPointer_indirection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPointer_indirection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pointer_indirection_expressionContext pointer_indirection_expression() throws RecognitionException {
		Pointer_indirection_expressionContext _localctx = new Pointer_indirection_expressionContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_pointer_indirection_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3476);
			match(STAR);
			setState(3477);
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Addressof_expressionContext extends ParserRuleContext {
		public TerminalNode AMP() { return getToken(CSharp5Parser.AMP, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Addressof_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addressof_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAddressof_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAddressof_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAddressof_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Addressof_expressionContext addressof_expression() throws RecognitionException {
		Addressof_expressionContext _localctx = new Addressof_expressionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_addressof_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3479);
			match(AMP);
			setState(3480);
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sizeof_expressionContext extends ParserRuleContext {
		public TerminalNode SIZEOF() { return getToken(CSharp5Parser.SIZEOF, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return getRuleContext(Unmanaged_typeContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Sizeof_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeof_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSizeof_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSizeof_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSizeof_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sizeof_expressionContext sizeof_expression() throws RecognitionException {
		Sizeof_expressionContext _localctx = new Sizeof_expressionContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_sizeof_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3482);
			match(SIZEOF);
			setState(3483);
			match(OPEN_PARENS);
			setState(3484);
			unmanaged_type();
			setState(3485);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_statementContext extends ParserRuleContext {
		public TerminalNode FIXED() { return getToken(CSharp5Parser.FIXED, 0); }
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public Pointer_typeContext pointer_type() {
			return getRuleContext(Pointer_typeContext.class,0);
		}
		public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return getRuleContext(Fixed_pointer_declaratorsContext.class,0);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return getRuleContext(Embedded_statementContext.class,0);
		}
		public Fixed_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_statementContext fixed_statement() throws RecognitionException {
		Fixed_statementContext _localctx = new Fixed_statementContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_fixed_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3487);
			match(FIXED);
			setState(3488);
			match(OPEN_PARENS);
			setState(3489);
			pointer_type();
			setState(3490);
			fixed_pointer_declarators();
			setState(3491);
			match(CLOSE_PARENS);
			setState(3492);
			embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_pointer_declaratorsContext extends ParserRuleContext {
		public List<Fixed_pointer_declaratorContext> fixed_pointer_declarator() {
			return getRuleContexts(Fixed_pointer_declaratorContext.class);
		}
		public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return getRuleContext(Fixed_pointer_declaratorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(CSharp5Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(CSharp5Parser.COMMA, i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_pointer_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_pointer_declarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_pointer_declarators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_pointer_declarators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_pointer_declaratorsContext fixed_pointer_declarators() throws RecognitionException {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_fixed_pointer_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3494);
			fixed_pointer_declarator();
			setState(3499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3495);
				match(COMMA);
				setState(3496);
				fixed_pointer_declarator();
				}
				}
				setState(3501);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_pointer_declaratorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return getRuleContext(Fixed_pointer_initializerContext.class,0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_pointer_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_pointer_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_pointer_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_pointer_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_pointer_declaratorContext fixed_pointer_declarator() throws RecognitionException {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_fixed_pointer_declarator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			identifier();
			setState(3503);
			match(ASSIGNMENT);
			setState(3504);
			fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_pointer_initializerContext extends ParserRuleContext {
		public TerminalNode AMP() { return getToken(CSharp5Parser.AMP, 0); }
		public Variable_referenceContext variable_reference() {
			return getRuleContext(Variable_referenceContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_pointer_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_pointer_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_pointer_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_pointer_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_pointer_initializerContext fixed_pointer_initializer() throws RecognitionException {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_fixed_pointer_initializer);
		try {
			setState(3509);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3506);
				match(AMP);
				setState(3507);
				variable_reference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3508);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_member_declaration_unsafeContext extends ParserRuleContext {
		public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
			return getRuleContext(Fixed_size_buffer_declarationContext.class,0);
		}
		public Struct_member_declaration_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_member_declaration_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_member_declaration_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_member_declaration_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_member_declaration_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_member_declaration_unsafeContext struct_member_declaration_unsafe() throws RecognitionException {
		Struct_member_declaration_unsafeContext _localctx = new Struct_member_declaration_unsafeContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_struct_member_declaration_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			fixed_size_buffer_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_size_buffer_declarationContext extends ParserRuleContext {
		public TerminalNode FIXED() { return getToken(CSharp5Parser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return getRuleContext(Buffer_element_typeContext.class,0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return getRuleContext(Fixed_size_buffer_declaratorsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return getRuleContext(AttributesContext.class,0);
		}
		public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
			return getRuleContext(Fixed_size_buffer_modifiersContext.class,0);
		}
		public Fixed_size_buffer_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_size_buffer_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_size_buffer_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_size_buffer_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_size_buffer_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() throws RecognitionException {
		Fixed_size_buffer_declarationContext _localctx = new Fixed_size_buffer_declarationContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_fixed_size_buffer_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3514);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				setState(3513);
				attributes();
				}
			}

			setState(3517);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) {
				{
				setState(3516);
				fixed_size_buffer_modifiers();
				}
			}

			setState(3519);
			match(FIXED);
			setState(3520);
			buffer_element_type();
			setState(3521);
			fixed_size_buffer_declarators();
			setState(3522);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_size_buffer_modifiersContext extends ParserRuleContext {
		public List<Fixed_size_buffer_modifierContext> fixed_size_buffer_modifier() {
			return getRuleContexts(Fixed_size_buffer_modifierContext.class);
		}
		public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier(int i) {
			return getRuleContext(Fixed_size_buffer_modifierContext.class,i);
		}
		public Fixed_size_buffer_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_size_buffer_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_size_buffer_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_size_buffer_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_size_buffer_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() throws RecognitionException {
		Fixed_size_buffer_modifiersContext _localctx = new Fixed_size_buffer_modifiersContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_fixed_size_buffer_modifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3525); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3524);
				fixed_size_buffer_modifier();
				}
				}
				setState(3527); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_size_buffer_modifierContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public Fixed_size_buffer_modifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_size_buffer_modifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_size_buffer_modifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_size_buffer_modifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_size_buffer_modifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_size_buffer_modifierContext fixed_size_buffer_modifier() throws RecognitionException {
		Fixed_size_buffer_modifierContext _localctx = new Fixed_size_buffer_modifierContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_fixed_size_buffer_modifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3529);
			_la = _input.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (INTERNAL - 57)) | (1L << (NEW - 57)) | (1L << (PRIVATE - 57)) | (1L << (PROTECTED - 57)) | (1L << (PUBLIC - 57)) | (1L << (UNSAFE - 57)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Buffer_element_typeContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Buffer_element_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_buffer_element_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBuffer_element_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBuffer_element_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBuffer_element_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Buffer_element_typeContext buffer_element_type() throws RecognitionException {
		Buffer_element_typeContext _localctx = new Buffer_element_typeContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_buffer_element_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_size_buffer_declaratorsContext extends ParserRuleContext {
		public List<Fixed_size_buffer_declaratorContext> fixed_size_buffer_declarator() {
			return getRuleContexts(Fixed_size_buffer_declaratorContext.class);
		}
		public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return getRuleContext(Fixed_size_buffer_declaratorContext.class,i);
		}
		public Fixed_size_buffer_declaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_size_buffer_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_size_buffer_declarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_size_buffer_declarators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_size_buffer_declarators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() throws RecognitionException {
		Fixed_size_buffer_declaratorsContext _localctx = new Fixed_size_buffer_declaratorsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_fixed_size_buffer_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3533);
				fixed_size_buffer_declarator();
				}
				}
				setState(3536); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fixed_size_buffer_declaratorContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixed_size_buffer_declarator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFixed_size_buffer_declarator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFixed_size_buffer_declarator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFixed_size_buffer_declarator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() throws RecognitionException {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_fixed_size_buffer_declarator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3538);
			identifier();
			setState(3539);
			match(OPEN_BRACKET);
			setState(3540);
			constant_expression();
			setState(3541);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_variable_initializer_unsafeContext extends ParserRuleContext {
		public Stackalloc_initializerContext stackalloc_initializer() {
			return getRuleContext(Stackalloc_initializerContext.class,0);
		}
		public Local_variable_initializer_unsafeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_variable_initializer_unsafe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLocal_variable_initializer_unsafe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLocal_variable_initializer_unsafe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLocal_variable_initializer_unsafe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() throws RecognitionException {
		Local_variable_initializer_unsafeContext _localctx = new Local_variable_initializer_unsafeContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_local_variable_initializer_unsafe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			stackalloc_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stackalloc_initializerContext extends ParserRuleContext {
		public TerminalNode STACKALLOC() { return getToken(CSharp5Parser.STACKALLOC, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return getRuleContext(Unmanaged_typeContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public Stackalloc_initializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stackalloc_initializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStackalloc_initializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStackalloc_initializer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStackalloc_initializer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stackalloc_initializerContext stackalloc_initializer() throws RecognitionException {
		Stackalloc_initializerContext _localctx = new Stackalloc_initializerContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_stackalloc_initializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			match(STACKALLOC);
			setState(3546);
			unmanaged_type();
			setState(3547);
			match(OPEN_BRACKET);
			setState(3548);
			expression();
			setState(3549);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(CSharp5Parser.FROM, 0); }
		public From_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterFrom_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitFrom_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitFrom_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_contextual_keywordContext from_contextual_keyword() throws RecognitionException {
		From_contextual_keywordContext _localctx = new From_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_from_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Let_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode LET() { return getToken(CSharp5Parser.LET, 0); }
		public Let_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_let_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLet_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLet_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLet_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Let_contextual_keywordContext let_contextual_keyword() throws RecognitionException {
		Let_contextual_keywordContext _localctx = new Let_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_let_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553);
			match(LET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(CSharp5Parser.WHERE, 0); }
		public Where_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterWhere_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitWhere_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitWhere_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_contextual_keywordContext where_contextual_keyword() throws RecognitionException {
		Where_contextual_keywordContext _localctx = new Where_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_where_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3555);
			match(WHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(CSharp5Parser.JOIN, 0); }
		public Join_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterJoin_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitJoin_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitJoin_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_contextual_keywordContext join_contextual_keyword() throws RecognitionException {
		Join_contextual_keywordContext _localctx = new Join_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_join_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(CSharp5Parser.ON, 0); }
		public On_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOn_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOn_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOn_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_contextual_keywordContext on_contextual_keyword() throws RecognitionException {
		On_contextual_keywordContext _localctx = new On_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_on_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3559);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equals_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode EQUALS() { return getToken(CSharp5Parser.EQUALS, 0); }
		public Equals_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equals_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEquals_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEquals_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEquals_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equals_contextual_keywordContext equals_contextual_keyword() throws RecognitionException {
		Equals_contextual_keywordContext _localctx = new Equals_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_equals_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(EQUALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(CSharp5Parser.INTO, 0); }
		public Into_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInto_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInto_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInto_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_contextual_keywordContext into_contextual_keyword() throws RecognitionException {
		Into_contextual_keywordContext _localctx = new Into_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_into_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3563);
			match(INTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode ORDERBY() { return getToken(CSharp5Parser.ORDERBY, 0); }
		public Orderby_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOrderby_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOrderby_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOrderby_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Orderby_contextual_keywordContext orderby_contextual_keyword() throws RecognitionException {
		Orderby_contextual_keywordContext _localctx = new Orderby_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_orderby_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3565);
			match(ORDERBY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ascending_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode ASCENDING() { return getToken(CSharp5Parser.ASCENDING, 0); }
		public Ascending_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascending_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAscending_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAscending_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAscending_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ascending_contextual_keywordContext ascending_contextual_keyword() throws RecognitionException {
		Ascending_contextual_keywordContext _localctx = new Ascending_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_ascending_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3567);
			match(ASCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Descending_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode DESCENDING() { return getToken(CSharp5Parser.DESCENDING, 0); }
		public Descending_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descending_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDescending_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDescending_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDescending_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Descending_contextual_keywordContext descending_contextual_keyword() throws RecognitionException {
		Descending_contextual_keywordContext _localctx = new Descending_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_descending_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569);
			match(DESCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(CSharp5Parser.SELECT, 0); }
		public Select_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSelect_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSelect_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSelect_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_contextual_keywordContext select_contextual_keyword() throws RecognitionException {
		Select_contextual_keywordContext _localctx = new Select_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_select_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3571);
			match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(CSharp5Parser.GROUP, 0); }
		public Group_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGroup_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGroup_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGroup_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_contextual_keywordContext group_contextual_keyword() throws RecognitionException {
		Group_contextual_keywordContext _localctx = new Group_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_group_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			match(GROUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class By_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(CSharp5Parser.BY, 0); }
		public By_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_by_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBy_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBy_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBy_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final By_contextual_keywordContext by_contextual_keyword() throws RecognitionException {
		By_contextual_keywordContext _localctx = new By_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_by_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3575);
			match(BY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partial_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode PARTIAL() { return getToken(CSharp5Parser.PARTIAL, 0); }
		public Partial_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partial_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterPartial_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitPartial_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitPartial_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partial_contextual_keywordContext partial_contextual_keyword() throws RecognitionException {
		Partial_contextual_keywordContext _localctx = new Partial_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_partial_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3577);
			match(PARTIAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode ALIAS() { return getToken(CSharp5Parser.ALIAS, 0); }
		public Alias_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAlias_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAlias_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAlias_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_contextual_keywordContext alias_contextual_keyword() throws RecognitionException {
		Alias_contextual_keywordContext _localctx = new Alias_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_alias_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3579);
			match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Yield_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode YIELD() { return getToken(CSharp5Parser.YIELD, 0); }
		public Yield_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yield_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterYield_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitYield_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitYield_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Yield_contextual_keywordContext yield_contextual_keyword() throws RecognitionException {
		Yield_contextual_keywordContext _localctx = new Yield_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_yield_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3581);
			match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(CSharp5Parser.GET, 0); }
		public Get_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterGet_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitGet_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitGet_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_contextual_keywordContext get_contextual_keyword() throws RecognitionException {
		Get_contextual_keywordContext _localctx = new Get_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_get_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583);
			match(GET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(CSharp5Parser.SET, 0); }
		public Set_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterSet_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitSet_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitSet_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_contextual_keywordContext set_contextual_keyword() throws RecognitionException {
		Set_contextual_keywordContext _localctx = new Set_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_set_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3585);
			match(SET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(CSharp5Parser.ADD, 0); }
		public Add_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterAdd_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitAdd_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitAdd_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_contextual_keywordContext add_contextual_keyword() throws RecognitionException {
		Add_contextual_keywordContext _localctx = new Add_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_add_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Remove_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode REMOVE() { return getToken(CSharp5Parser.REMOVE, 0); }
		public Remove_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_remove_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRemove_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRemove_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRemove_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Remove_contextual_keywordContext remove_contextual_keyword() throws RecognitionException {
		Remove_contextual_keywordContext _localctx = new Remove_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_remove_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			match(REMOVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_contextual_keywordContext extends ParserRuleContext {
		public TerminalNode DYNAMIC() { return getToken(CSharp5Parser.DYNAMIC, 0); }
		public Dynamic_contextual_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_contextual_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDynamic_contextual_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDynamic_contextual_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDynamic_contextual_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_contextual_keywordContext dynamic_contextual_keyword() throws RecognitionException {
		Dynamic_contextual_keywordContext _localctx = new Dynamic_contextual_keywordContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_dynamic_contextual_keyword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(DYNAMIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArglistContext extends ParserRuleContext {
		public TerminalNode ARGLIST() { return getToken(CSharp5Parser.ARGLIST, 0); }
		public ArglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arglist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterArglist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitArglist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitArglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArglistContext arglist() throws RecognitionException {
		ArglistContext _localctx = new ArglistContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_arglist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3593);
			match(ARGLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Right_arrowContext extends ParserRuleContext {
		public Token first;
		public Token second;
		public TerminalNode ASSIGNMENT() { return getToken(CSharp5Parser.ASSIGNMENT, 0); }
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_right_arrow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRight_arrow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRight_arrow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRight_arrow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Right_arrowContext right_arrow() throws RecognitionException {
		Right_arrowContext _localctx = new Right_arrowContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_right_arrow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3595);
			((Right_arrowContext)_localctx).first = match(ASSIGNMENT);
			setState(3596);
			((Right_arrowContext)_localctx).second = match(GT);
			setState(3597);
			if (!((((Right_arrowContext)_localctx).first!=null?((Right_arrowContext)_localctx).first.getTokenIndex():0) + 1 == (((Right_arrowContext)_localctx).second!=null?((Right_arrowContext)_localctx).second.getTokenIndex():0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Right_shiftContext extends ParserRuleContext {
		public Token first;
		public Token second;
		public List<TerminalNode> GT() { return getTokens(CSharp5Parser.GT); }
		public TerminalNode GT(int i) {
			return getToken(CSharp5Parser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_right_shift; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRight_shift(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRight_shift(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRight_shift(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Right_shiftContext right_shift() throws RecognitionException {
		Right_shiftContext _localctx = new Right_shiftContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_right_shift);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			((Right_shiftContext)_localctx).first = match(GT);
			setState(3600);
			((Right_shiftContext)_localctx).second = match(GT);
			setState(3601);
			if (!((((Right_shiftContext)_localctx).first!=null?((Right_shiftContext)_localctx).first.getTokenIndex():0) + 1 == (((Right_shiftContext)_localctx).second!=null?((Right_shiftContext)_localctx).second.getTokenIndex():0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Right_shift_assignmentContext extends ParserRuleContext {
		public Token first;
		public Token second;
		public TerminalNode GT() { return getToken(CSharp5Parser.GT, 0); }
		public TerminalNode OP_GE() { return getToken(CSharp5Parser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_right_shift_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterRight_shift_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitRight_shift_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitRight_shift_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Right_shift_assignmentContext right_shift_assignment() throws RecognitionException {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_right_shift_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			((Right_shift_assignmentContext)_localctx).first = match(GT);
			setState(3604);
			((Right_shift_assignmentContext)_localctx).second = match(OP_GE);
			setState(3605);
			if (!((((Right_shift_assignmentContext)_localctx).first!=null?((Right_shift_assignmentContext)_localctx).first.getTokenIndex():0) + 1 == (((Right_shift_assignmentContext)_localctx).second!=null?((Right_shift_assignmentContext)_localctx).second.getTokenIndex():0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return getRuleContext(Boolean_literalContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL() { return getToken(CSharp5Parser.INTEGER_LITERAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(CSharp5Parser.REAL_LITERAL, 0); }
		public TerminalNode CHARACTER_LITERAL() { return getToken(CSharp5Parser.CHARACTER_LITERAL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(CSharp5Parser.STRING_LITERAL, 0); }
		public TerminalNode NULL() { return getToken(CSharp5Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_literal);
		try {
			setState(3613);
			switch (_input.LA(1)) {
			case FALSE:
			case TRUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3607);
				boolean_literal();
				}
				break;
			case INTEGER_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3608);
				match(INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3609);
				match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3610);
				match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3611);
				match(STRING_LITERAL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3612);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_literalContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(CSharp5Parser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(CSharp5Parser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterBoolean_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitBoolean_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitBoolean_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Boolean_literalContext boolean_literal() throws RecognitionException {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_boolean_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordContext extends ParserRuleContext {
		public TerminalNode ABSTRACT() { return getToken(CSharp5Parser.ABSTRACT, 0); }
		public TerminalNode AS() { return getToken(CSharp5Parser.AS, 0); }
		public TerminalNode ASYNC() { return getToken(CSharp5Parser.ASYNC, 0); }
		public TerminalNode BASE() { return getToken(CSharp5Parser.BASE, 0); }
		public TerminalNode BOOL() { return getToken(CSharp5Parser.BOOL, 0); }
		public TerminalNode BREAK() { return getToken(CSharp5Parser.BREAK, 0); }
		public TerminalNode BYTE() { return getToken(CSharp5Parser.BYTE, 0); }
		public TerminalNode CASE() { return getToken(CSharp5Parser.CASE, 0); }
		public TerminalNode CATCH() { return getToken(CSharp5Parser.CATCH, 0); }
		public TerminalNode CHAR() { return getToken(CSharp5Parser.CHAR, 0); }
		public TerminalNode CHECKED() { return getToken(CSharp5Parser.CHECKED, 0); }
		public TerminalNode CLASS() { return getToken(CSharp5Parser.CLASS, 0); }
		public TerminalNode CONST() { return getToken(CSharp5Parser.CONST, 0); }
		public TerminalNode CONTINUE() { return getToken(CSharp5Parser.CONTINUE, 0); }
		public TerminalNode DECIMAL() { return getToken(CSharp5Parser.DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(CSharp5Parser.DEFAULT, 0); }
		public TerminalNode DELEGATE() { return getToken(CSharp5Parser.DELEGATE, 0); }
		public TerminalNode DO() { return getToken(CSharp5Parser.DO, 0); }
		public TerminalNode DOUBLE() { return getToken(CSharp5Parser.DOUBLE, 0); }
		public TerminalNode ELSE() { return getToken(CSharp5Parser.ELSE, 0); }
		public TerminalNode ENUM() { return getToken(CSharp5Parser.ENUM, 0); }
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public TerminalNode EXPLICIT() { return getToken(CSharp5Parser.EXPLICIT, 0); }
		public TerminalNode EXTERN() { return getToken(CSharp5Parser.EXTERN, 0); }
		public TerminalNode FALSE() { return getToken(CSharp5Parser.FALSE, 0); }
		public TerminalNode FINALLY() { return getToken(CSharp5Parser.FINALLY, 0); }
		public TerminalNode FIXED() { return getToken(CSharp5Parser.FIXED, 0); }
		public TerminalNode FLOAT() { return getToken(CSharp5Parser.FLOAT, 0); }
		public TerminalNode FOR() { return getToken(CSharp5Parser.FOR, 0); }
		public TerminalNode FOREACH() { return getToken(CSharp5Parser.FOREACH, 0); }
		public TerminalNode GOTO() { return getToken(CSharp5Parser.GOTO, 0); }
		public TerminalNode IF() { return getToken(CSharp5Parser.IF, 0); }
		public TerminalNode IMPLICIT() { return getToken(CSharp5Parser.IMPLICIT, 0); }
		public TerminalNode IN() { return getToken(CSharp5Parser.IN, 0); }
		public TerminalNode INT() { return getToken(CSharp5Parser.INT, 0); }
		public TerminalNode INTERFACE() { return getToken(CSharp5Parser.INTERFACE, 0); }
		public TerminalNode INTERNAL() { return getToken(CSharp5Parser.INTERNAL, 0); }
		public TerminalNode IS() { return getToken(CSharp5Parser.IS, 0); }
		public TerminalNode LOCK() { return getToken(CSharp5Parser.LOCK, 0); }
		public TerminalNode LONG() { return getToken(CSharp5Parser.LONG, 0); }
		public TerminalNode NAMESPACE() { return getToken(CSharp5Parser.NAMESPACE, 0); }
		public TerminalNode NEW() { return getToken(CSharp5Parser.NEW, 0); }
		public TerminalNode NULL() { return getToken(CSharp5Parser.NULL, 0); }
		public TerminalNode OBJECT() { return getToken(CSharp5Parser.OBJECT, 0); }
		public TerminalNode OPERATOR() { return getToken(CSharp5Parser.OPERATOR, 0); }
		public TerminalNode OUT() { return getToken(CSharp5Parser.OUT, 0); }
		public TerminalNode OVERRIDE() { return getToken(CSharp5Parser.OVERRIDE, 0); }
		public TerminalNode PARAMS() { return getToken(CSharp5Parser.PARAMS, 0); }
		public TerminalNode PRIVATE() { return getToken(CSharp5Parser.PRIVATE, 0); }
		public TerminalNode PROTECTED() { return getToken(CSharp5Parser.PROTECTED, 0); }
		public TerminalNode PUBLIC() { return getToken(CSharp5Parser.PUBLIC, 0); }
		public TerminalNode READONLY() { return getToken(CSharp5Parser.READONLY, 0); }
		public TerminalNode REF() { return getToken(CSharp5Parser.REF, 0); }
		public TerminalNode RETURN() { return getToken(CSharp5Parser.RETURN, 0); }
		public TerminalNode SBYTE() { return getToken(CSharp5Parser.SBYTE, 0); }
		public TerminalNode SEALED() { return getToken(CSharp5Parser.SEALED, 0); }
		public TerminalNode SHORT() { return getToken(CSharp5Parser.SHORT, 0); }
		public TerminalNode SIZEOF() { return getToken(CSharp5Parser.SIZEOF, 0); }
		public TerminalNode STACKALLOC() { return getToken(CSharp5Parser.STACKALLOC, 0); }
		public TerminalNode STATIC() { return getToken(CSharp5Parser.STATIC, 0); }
		public TerminalNode STRING() { return getToken(CSharp5Parser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(CSharp5Parser.STRUCT, 0); }
		public TerminalNode SWITCH() { return getToken(CSharp5Parser.SWITCH, 0); }
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode THROW() { return getToken(CSharp5Parser.THROW, 0); }
		public TerminalNode TRUE() { return getToken(CSharp5Parser.TRUE, 0); }
		public TerminalNode TRY() { return getToken(CSharp5Parser.TRY, 0); }
		public TerminalNode TYPEOF() { return getToken(CSharp5Parser.TYPEOF, 0); }
		public TerminalNode UINT() { return getToken(CSharp5Parser.UINT, 0); }
		public TerminalNode ULONG() { return getToken(CSharp5Parser.ULONG, 0); }
		public TerminalNode UNCHECKED() { return getToken(CSharp5Parser.UNCHECKED, 0); }
		public TerminalNode UNSAFE() { return getToken(CSharp5Parser.UNSAFE, 0); }
		public TerminalNode USHORT() { return getToken(CSharp5Parser.USHORT, 0); }
		public TerminalNode USING() { return getToken(CSharp5Parser.USING, 0); }
		public TerminalNode VIRTUAL() { return getToken(CSharp5Parser.VIRTUAL, 0); }
		public TerminalNode VOID() { return getToken(CSharp5Parser.VOID, 0); }
		public TerminalNode VOLATILE() { return getToken(CSharp5Parser.VOLATILE, 0); }
		public TerminalNode WHILE() { return getToken(CSharp5Parser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordContext keyword() throws RecognitionException {
		KeywordContext _localctx = new KeywordContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3617);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << ASYNC) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_definitionContext extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(CSharp5Parser.CLASS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Class_bodyContext class_body() {
			return getRuleContext(Class_bodyContext.class,0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Class_baseContext class_base() {
			return getRuleContext(Class_baseContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterClass_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitClass_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitClass_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_definitionContext class_definition() throws RecognitionException {
		Class_definitionContext _localctx = new Class_definitionContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_class_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3619);
			match(CLASS);
			setState(3620);
			identifier();
			setState(3622);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3621);
				type_parameter_list();
				}
			}

			setState(3625);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3624);
				class_base();
				}
			}

			setState(3628);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3627);
				type_parameter_constraints_clauses();
				}
			}

			setState(3630);
			class_body();
			setState(3632);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(3631);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Struct_definitionContext extends ParserRuleContext {
		public TerminalNode STRUCT() { return getToken(CSharp5Parser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Struct_bodyContext struct_body() {
			return getRuleContext(Struct_bodyContext.class,0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return getRuleContext(Struct_interfacesContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Struct_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_struct_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterStruct_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitStruct_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitStruct_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Struct_definitionContext struct_definition() throws RecognitionException {
		Struct_definitionContext _localctx = new Struct_definitionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_struct_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634);
			match(STRUCT);
			setState(3635);
			identifier();
			setState(3637);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3636);
				type_parameter_list();
				}
			}

			setState(3640);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3639);
				struct_interfaces();
				}
			}

			setState(3643);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3642);
				type_parameter_constraints_clauses();
				}
			}

			setState(3645);
			struct_body();
			setState(3647);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(3646);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_definitionContext extends ParserRuleContext {
		public TerminalNode INTERFACE() { return getToken(CSharp5Parser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Interface_bodyContext interface_body() {
			return getRuleContext(Interface_bodyContext.class,0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return getRuleContext(Variant_type_parameter_listContext.class,0);
		}
		public Interface_baseContext interface_base() {
			return getRuleContext(Interface_baseContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_definitionContext interface_definition() throws RecognitionException {
		Interface_definitionContext _localctx = new Interface_definitionContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_interface_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			match(INTERFACE);
			setState(3650);
			identifier();
			setState(3652);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3651);
				variant_type_parameter_list();
				}
			}

			setState(3655);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3654);
				interface_base();
				}
			}

			setState(3658);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3657);
				type_parameter_constraints_clauses();
				}
			}

			setState(3660);
			interface_body();
			setState(3662);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(3661);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_definitionContext extends ParserRuleContext {
		public TerminalNode ENUM() { return getToken(CSharp5Parser.ENUM, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Enum_bodyContext enum_body() {
			return getRuleContext(Enum_bodyContext.class,0);
		}
		public Enum_baseContext enum_base() {
			return getRuleContext(Enum_baseContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEnum_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEnum_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEnum_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_definitionContext enum_definition() throws RecognitionException {
		Enum_definitionContext _localctx = new Enum_definitionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_enum_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3664);
			match(ENUM);
			setState(3665);
			identifier();
			setState(3667);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3666);
				enum_base();
				}
			}

			setState(3669);
			enum_body();
			setState(3671);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(3670);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delegate_definitionContext extends ParserRuleContext {
		public TerminalNode DELEGATE() { return getToken(CSharp5Parser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return getRuleContext(Variant_type_parameter_listContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delegate_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDelegate_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDelegate_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDelegate_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delegate_definitionContext delegate_definition() throws RecognitionException {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_delegate_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			match(DELEGATE);
			setState(3674);
			return_type();
			setState(3675);
			identifier();
			setState(3677);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3676);
				variant_type_parameter_list();
				}
			}

			setState(3679);
			match(OPEN_PARENS);
			setState(3681);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(3680);
				formal_parameter_list();
				}
			}

			setState(3683);
			match(CLOSE_PARENS);
			setState(3685);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3684);
				type_parameter_constraints_clauses();
				}
			}

			setState(3687);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_declaration2Context extends ParserRuleContext {
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return getRuleContext(Variable_declaratorsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return getRuleContext(Member_nameContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return getRuleContext(Event_accessor_declarationsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Event_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterEvent_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitEvent_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitEvent_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_declaration2Context event_declaration2() throws RecognitionException {
		Event_declaration2Context _localctx = new Event_declaration2Context(_ctx, getState());
		enterRule(_localctx, 776, RULE_event_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3689);
			match(EVENT);
			setState(3690);
			type();
			setState(3699);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3691);
				variable_declarators();
				setState(3692);
				match(SEMICOLON);
				}
				break;
			case 2:
				{
				setState(3694);
				member_name();
				setState(3695);
				match(OPEN_BRACE);
				setState(3696);
				event_accessor_declarations();
				setState(3697);
				match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_declaration2Context extends ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return getRuleContext(Variable_declaratorsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Field_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterField_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitField_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitField_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_declaration2Context field_declaration2() throws RecognitionException {
		Field_declaration2Context _localctx = new Field_declaration2Context(_ctx, getState());
		enterRule(_localctx, 778, RULE_field_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3701);
			variable_declarators();
			setState(3702);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Property_declaration2Context extends ParserRuleContext {
		public Member_nameContext member_name() {
			return getRuleContext(Member_nameContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return getRuleContext(Accessor_declarationsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Property_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterProperty_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitProperty_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitProperty_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Property_declaration2Context property_declaration2() throws RecognitionException {
		Property_declaration2Context _localctx = new Property_declaration2Context(_ctx, getState());
		enterRule(_localctx, 780, RULE_property_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704);
			member_name();
			setState(3705);
			match(OPEN_BRACE);
			setState(3706);
			accessor_declarations();
			setState(3707);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_declaration2Context extends ParserRuleContext {
		public TerminalNode CONST() { return getToken(CSharp5Parser.CONST, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return getRuleContext(Constant_declaratorsContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Constant_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstant_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstant_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstant_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_declaration2Context constant_declaration2() throws RecognitionException {
		Constant_declaration2Context _localctx = new Constant_declaration2Context(_ctx, getState());
		enterRule(_localctx, 782, RULE_constant_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(CONST);
			setState(3710);
			type();
			setState(3711);
			constant_declarators();
			setState(3712);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexer_declaration2Context extends ParserRuleContext {
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return getRuleContext(Accessor_declarationsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Indexer_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexer_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterIndexer_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitIndexer_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitIndexer_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indexer_declaration2Context indexer_declaration2() throws RecognitionException {
		Indexer_declaration2Context _localctx = new Indexer_declaration2Context(_ctx, getState());
		enterRule(_localctx, 784, RULE_indexer_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3714);
			match(THIS);
			setState(3715);
			match(OPEN_BRACKET);
			setState(3716);
			formal_parameter_list();
			setState(3717);
			match(CLOSE_BRACKET);
			setState(3718);
			match(OPEN_BRACE);
			setState(3719);
			accessor_declarations();
			setState(3720);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Destructor_definitionContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(CSharp5Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return getRuleContext(Destructor_bodyContext.class,0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destructor_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterDestructor_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitDestructor_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitDestructor_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Destructor_definitionContext destructor_definition() throws RecognitionException {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_destructor_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3722);
			match(TILDE);
			setState(3723);
			identifier();
			setState(3724);
			match(OPEN_PARENS);
			setState(3725);
			match(CLOSE_PARENS);
			setState(3726);
			destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declaration2Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return getRuleContext(Constructor_initializerContext.class,0);
		}
		public Constructor_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterConstructor_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitConstructor_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitConstructor_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declaration2Context constructor_declaration2() throws RecognitionException {
		Constructor_declaration2Context _localctx = new Constructor_declaration2Context(_ctx, getState());
		enterRule(_localctx, 788, RULE_constructor_declaration2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3728);
			identifier();
			setState(3729);
			match(OPEN_PARENS);
			setState(3731);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(3730);
				formal_parameter_list();
				}
			}

			setState(3733);
			match(CLOSE_PARENS);
			setState(3735);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(3734);
				constructor_initializer();
				}
			}

			setState(3737);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_declaration2Context extends ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return getRuleContext(Method_member_nameContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return getRuleContext(Method_bodyContext.class,0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Method_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_declaration2Context method_declaration2() throws RecognitionException {
		Method_declaration2Context _localctx = new Method_declaration2Context(_ctx, getState());
		enterRule(_localctx, 790, RULE_method_declaration2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3739);
			method_member_name();
			setState(3741);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3740);
				type_parameter_list();
				}
			}

			setState(3743);
			match(OPEN_PARENS);
			setState(3745);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(3744);
				formal_parameter_list();
				}
			}

			setState(3747);
			match(CLOSE_PARENS);
			setState(3749);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3748);
				type_parameter_constraints_clauses();
				}
			}

			setState(3751);
			method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_member_nameContext extends ParserRuleContext {
		public Method_member_name2Context method_member_name2() {
			return getRuleContext(Method_member_name2Context.class,0);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_member_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_member_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_member_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_member_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_member_nameContext method_member_name() throws RecognitionException {
		Method_member_nameContext _localctx = new Method_member_nameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_method_member_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			method_member_name2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_member_name2Context extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOUBLE_COLON() { return getToken(CSharp5Parser.DOUBLE_COLON, 0); }
		public List<Type_argument_list_optContext> type_argument_list_opt() {
			return getRuleContexts(Type_argument_list_optContext.class);
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return getRuleContext(Type_argument_list_optContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(CSharp5Parser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(CSharp5Parser.DOT, i);
		}
		public Method_member_name2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_member_name2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_member_name2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_member_name2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_member_name2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_member_name2Context method_member_name2() throws RecognitionException {
		Method_member_name2Context _localctx = new Method_member_name2Context(_ctx, getState());
		enterRule(_localctx, 794, RULE_method_member_name2);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3760);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				setState(3755);
				identifier();
				}
				break;
			case 2:
				{
				setState(3756);
				identifier();
				setState(3757);
				match(DOUBLE_COLON);
				setState(3758);
				identifier();
				}
				break;
			}
			setState(3768);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3762);
					type_argument_list_opt();
					setState(3763);
					match(DOT);
					setState(3764);
					identifier();
					}
					} 
				}
				setState(3770);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_declaration2Context extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(CSharp5Parser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return getRuleContext(Overloadable_operatorContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Operator_bodyContext operator_body() {
			return getRuleContext(Operator_bodyContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(CSharp5Parser.COMMA, 0); }
		public Operator_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterOperator_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitOperator_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitOperator_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_declaration2Context operator_declaration2() throws RecognitionException {
		Operator_declaration2Context _localctx = new Operator_declaration2Context(_ctx, getState());
		enterRule(_localctx, 796, RULE_operator_declaration2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3771);
			match(OPERATOR);
			setState(3772);
			overloadable_operator();
			setState(3773);
			match(OPEN_PARENS);
			setState(3774);
			type();
			setState(3775);
			identifier();
			setState(3780);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3776);
				match(COMMA);
				setState(3777);
				type();
				setState(3778);
				identifier();
				}
			}

			setState(3782);
			match(CLOSE_PARENS);
			setState(3783);
			operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_method_declaration2Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return getRuleContext(Type_parameter_listContext.class,0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return getRuleContext(Type_parameter_constraints_clausesContext.class,0);
		}
		public Interface_method_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_method_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_method_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_method_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_method_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_method_declaration2Context interface_method_declaration2() throws RecognitionException {
		Interface_method_declaration2Context _localctx = new Interface_method_declaration2Context(_ctx, getState());
		enterRule(_localctx, 798, RULE_interface_method_declaration2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			identifier();
			setState(3787);
			_la = _input.LA(1);
			if (_la==LT) {
				{
				setState(3786);
				type_parameter_list();
				}
			}

			setState(3789);
			match(OPEN_PARENS);
			setState(3791);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				setState(3790);
				formal_parameter_list();
				}
			}

			setState(3793);
			match(CLOSE_PARENS);
			setState(3795);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3794);
				type_parameter_constraints_clauses();
				}
			}

			setState(3797);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_property_declaration2Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return getRuleContext(Interface_accessorsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Interface_property_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_property_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_property_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_property_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_property_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_property_declaration2Context interface_property_declaration2() throws RecognitionException {
		Interface_property_declaration2Context _localctx = new Interface_property_declaration2Context(_ctx, getState());
		enterRule(_localctx, 800, RULE_interface_property_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			identifier();
			setState(3800);
			match(OPEN_BRACE);
			setState(3801);
			interface_accessors();
			setState(3802);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_event_declaration2Context extends ParserRuleContext {
		public TerminalNode EVENT() { return getToken(CSharp5Parser.EVENT, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(CSharp5Parser.SEMICOLON, 0); }
		public Interface_event_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_event_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_event_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_event_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_event_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_event_declaration2Context interface_event_declaration2() throws RecognitionException {
		Interface_event_declaration2Context _localctx = new Interface_event_declaration2Context(_ctx, getState());
		enterRule(_localctx, 802, RULE_interface_event_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3804);
			match(EVENT);
			setState(3805);
			type();
			setState(3806);
			identifier();
			setState(3807);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_indexer_declaration2Context extends ParserRuleContext {
		public TerminalNode THIS() { return getToken(CSharp5Parser.THIS, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(CSharp5Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return getRuleContext(Formal_parameter_listContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(CSharp5Parser.CLOSE_BRACKET, 0); }
		public TerminalNode OPEN_BRACE() { return getToken(CSharp5Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return getRuleContext(Interface_accessorsContext.class,0);
		}
		public TerminalNode CLOSE_BRACE() { return getToken(CSharp5Parser.CLOSE_BRACE, 0); }
		public Interface_indexer_declaration2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_indexer_declaration2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterInterface_indexer_declaration2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitInterface_indexer_declaration2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitInterface_indexer_declaration2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interface_indexer_declaration2Context interface_indexer_declaration2() throws RecognitionException {
		Interface_indexer_declaration2Context _localctx = new Interface_indexer_declaration2Context(_ctx, getState());
		enterRule(_localctx, 804, RULE_interface_indexer_declaration2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3809);
			match(THIS);
			setState(3810);
			match(OPEN_BRACKET);
			setState(3811);
			formal_parameter_list();
			setState(3812);
			match(CLOSE_BRACKET);
			setState(3813);
			match(OPEN_BRACE);
			setState(3814);
			interface_accessors();
			setState(3815);
			match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Member_access2Context extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(CSharp5Parser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return getRuleContext(Type_argument_list_optContext.class,0);
		}
		public Member_access2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member_access2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMember_access2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMember_access2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMember_access2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Member_access2Context member_access2() throws RecognitionException {
		Member_access2Context _localctx = new Member_access2Context(_ctx, getState());
		enterRule(_localctx, 806, RULE_member_access2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3817);
			match(DOT);
			setState(3818);
			identifier();
			setState(3819);
			type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_invocation2Context extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Method_invocation2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_invocation2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterMethod_invocation2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitMethod_invocation2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitMethod_invocation2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Method_invocation2Context method_invocation2() throws RecognitionException {
		Method_invocation2Context _localctx = new Method_invocation2Context(_ctx, getState());
		enterRule(_localctx, 808, RULE_method_invocation2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(OPEN_PARENS);
			setState(3823);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(3822);
				argument_list();
				}
			}

			setState(3825);
			match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_creation_expression2Context extends ParserRuleContext {
		public TerminalNode OPEN_PARENS() { return getToken(CSharp5Parser.OPEN_PARENS, 0); }
		public TerminalNode CLOSE_PARENS() { return getToken(CSharp5Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return getRuleContext(Object_or_collection_initializerContext.class,0);
		}
		public Object_creation_expression2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_creation_expression2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).enterObject_creation_expression2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CSharp5Listener ) ((CSharp5Listener)listener).exitObject_creation_expression2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof CSharp5Visitor ) return ((CSharp5Visitor<? extends T>)visitor).visitObject_creation_expression2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_creation_expression2Context object_creation_expression2() throws RecognitionException {
		Object_creation_expression2Context _localctx = new Object_creation_expression2Context(_ctx, getState());
		enterRule(_localctx, 810, RULE_object_creation_expression2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			match(OPEN_PARENS);
			setState(3829);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (OPEN_PARENS - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (STAR - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				setState(3828);
				argument_list();
				}
			}

			setState(3831);
			match(CLOSE_PARENS);
			setState(3833);
			_la = _input.LA(1);
			if (_la==OPEN_BRACE) {
				{
				setState(3832);
				object_or_collection_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 377:
			return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 378:
			return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 379:
			return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return (((Right_arrowContext)_localctx).first!=null?((Right_arrowContext)_localctx).first.getTokenIndex():0) + 1 == (((Right_arrowContext)_localctx).second!=null?((Right_arrowContext)_localctx).second.getTokenIndex():0);
		}
		return true;
	}
	private boolean right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return (((Right_shiftContext)_localctx).first!=null?((Right_shiftContext)_localctx).first.getTokenIndex():0) + 1 == (((Right_shiftContext)_localctx).second!=null?((Right_shiftContext)_localctx).second.getTokenIndex():0);
		}
		return true;
	}
	private boolean right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return (((Right_shift_assignmentContext)_localctx).first!=null?((Right_shift_assignmentContext)_localctx).first.getTokenIndex():0) + 1 == (((Right_shift_assignmentContext)_localctx).second!=null?((Right_shift_assignmentContext)_localctx).second.getTokenIndex():0);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u00a7\u0efe\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u0339\n\5\3\5\3\5\3\5\3\5"+
		"\7\5\u033f\n\5\f\5\16\5\u0342\13\5\3\6\3\6\5\6\u0346\n\6\3\7\3\7\3\7\3"+
		"\7\7\7\u034c\n\7\f\7\16\7\u034f\13\7\3\b\3\b\3\b\3\b\5\b\u0355\n\b\3\t"+
		"\3\t\5\t\u0359\n\t\3\n\3\n\3\n\5\n\u035e\n\n\3\13\3\13\3\f\3\f\3\r\3\r"+
		"\3\r\3\16\3\16\3\16\7\16\u036a\n\16\f\16\16\16\u036d\13\16\3\17\3\17\7"+
		"\17\u0371\n\17\f\17\16\17\u0374\13\17\3\17\7\17\u0377\n\17\f\17\16\17"+
		"\u037a\13\17\3\17\7\17\u037d\n\17\f\17\16\17\u0380\13\17\3\17\3\17\3\17"+
		"\3\17\7\17\u0386\n\17\f\17\16\17\u0389\13\17\3\17\7\17\u038c\n\17\f\17"+
		"\16\17\u038f\13\17\3\17\3\17\3\17\7\17\u0394\n\17\f\17\16\17\u0397\13"+
		"\17\3\17\7\17\u039a\n\17\f\17\16\17\u039d\13\17\3\17\7\17\u03a0\n\17\f"+
		"\17\16\17\u03a3\13\17\3\17\5\17\u03a6\n\17\3\20\3\20\3\20\3\20\5\20\u03ac"+
		"\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\24\7\24\u03b9"+
		"\n\24\f\24\16\24\u03bc\13\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3"+
		"\30\7\30\u03c7\n\30\f\30\16\30\u03ca\13\30\3\31\5\31\u03cd\n\31\3\31\3"+
		"\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\5\33\u03d9\n\33\3\34\5\34"+
		"\u03dc\n\34\3\34\3\34\7\34\u03e0\n\34\f\34\16\34\u03e3\13\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\5\34\u03eb\n\34\3\34\7\34\u03ee\n\34\f\34\16\34\u03f1"+
		"\13\34\7\34\u03f3\n\34\f\34\16\34\u03f6\13\34\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0407\n\35\3\35"+
		"\5\35\u040a\n\35\3\35\3\35\3\35\5\35\u040f\n\35\3\35\3\35\3\35\3\35\5"+
		"\35\u0415\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u041d\n\35\3\36\3\36"+
		"\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\7#\u0431"+
		"\n#\f#\16#\u0434\13#\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0442\n%\3"+
		"&\3&\3&\3&\5&\u0448\n&\3&\3&\5&\u044c\n&\3&\5&\u044f\n&\3\'\3\'\5\'\u0453"+
		"\n\'\3(\3(\3(\3(\3(\5(\u045a\n(\3(\3(\5(\u045e\n(\3)\3)\3)\7)\u0463\n"+
		")\f)\16)\u0466\13)\3*\3*\3*\3*\3+\3+\5+\u046e\n+\3,\3,\3,\5,\u0473\n,"+
		"\3,\3,\3-\3-\3-\7-\u047a\n-\f-\16-\u047d\13-\3.\3.\3.\3.\3.\5.\u0484\n"+
		".\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u048f\n/\3/\5/\u0492\n/\3/\3/\3/\5/\u0497"+
		"\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3"+
		"\62\5\62\u04a7\n\62\3\62\3\62\5\62\u04ab\n\62\3\63\3\63\3\63\7\63\u04b0"+
		"\n\63\f\63\16\63\u04b3\13\63\3\64\3\64\3\64\3\64\3\64\5\64\u04ba\n\64"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u04c6\n\65\3\66"+
		"\3\66\5\66\u04ca\n\66\3\66\3\66\3\66\5\66\u04cf\n\66\5\66\u04d1\n\66\3"+
		"\66\3\66\3\66\5\66\u04d6\n\66\7\66\u04d8\n\66\f\66\16\66\u04db\13\66\3"+
		"\67\3\67\5\67\u04df\n\67\3\67\3\67\38\38\78\u04e5\n8\f8\168\u04e8\138"+
		"\39\39\39\39\39\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<"+
		"\3<\3<\3<\3<\3<\5<\u0506\n<\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\5>\u055b\n>\3?\3?\3?\3@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\3B\3B\7B"+
		"\u056f\nB\fB\16B\u0572\13B\3C\3C\3C\3C\3C\7C\u0579\nC\fC\16C\u057c\13"+
		"C\3D\3D\3D\3D\3D\3D\7D\u0584\nD\fD\16D\u0587\13D\3E\3E\3E\3E\3E\3E\3E"+
		"\3E\3E\3E\3E\3E\3E\7E\u0596\nE\fE\16E\u0599\13E\3F\3F\3F\3F\3F\7F\u05a0"+
		"\nF\fF\16F\u05a3\13F\3F\3F\3F\3G\3G\3H\3H\5H\u05ac\nH\3I\3I\3J\3J\3J\3"+
		"J\3J\7J\u05b5\nJ\fJ\16J\u05b8\13J\3K\3K\3K\7K\u05bd\nK\fK\16K\u05c0\13"+
		"K\3L\3L\3L\7L\u05c5\nL\fL\16L\u05c8\13L\3M\3M\3M\7M\u05cd\nM\fM\16M\u05d0"+
		"\13M\3N\3N\3N\7N\u05d5\nN\fN\16N\u05d8\13N\3O\3O\3O\7O\u05dd\nO\fO\16"+
		"O\u05e0\13O\3P\3P\3P\5P\u05e5\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u05ed\nQ\3R\3R\3"+
		"R\3R\3S\3S\5S\u05f5\nS\3S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u0604"+
		"\nT\3U\3U\5U\u0608\nU\3U\3U\3V\3V\3V\7V\u060f\nV\fV\16V\u0612\13V\3W\5"+
		"W\u0615\nW\3W\3W\3W\3X\3X\3Y\3Y\5Y\u061e\nY\3Y\3Y\5Y\u0622\nY\3Z\3Z\3"+
		"Z\7Z\u0627\nZ\fZ\16Z\u062a\13Z\3[\3[\3\\\3\\\5\\\u0630\n\\\3]\3]\3]\3"+
		"^\3^\5^\u0637\n^\3^\3^\3^\3^\3_\5_\u063e\n_\3_\3_\5_\u0642\n_\3`\3`\7"+
		"`\u0646\n`\f`\16`\u0649\13`\3a\3a\3a\3a\3a\5a\u0650\na\3b\3b\3b\3b\3b"+
		"\3c\3c\3c\3d\3d\5d\u065c\nd\3d\3d\3d\3d\3d\3d\3d\3d\3e\3e\5e\u0668\ne"+
		"\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3f\3f\5f\u0676\nf\3f\3f\3f\3f\3f\3f\3f"+
		"\3f\3f\3f\5f\u0682\nf\3g\3g\3g\3h\3h\3h\7h\u068a\nh\fh\16h\u068d\13h\3"+
		"i\3i\5i\u0691\ni\3j\3j\5j\u0695\nj\3k\3k\5k\u0699\nk\3l\3l\3l\3m\3m\3"+
		"m\3m\3m\3n\3n\3n\3n\3o\3o\3o\5o\u06aa\no\3o\3o\3p\3p\3p\3p\3p\3p\3p\3"+
		"p\3p\3p\3p\5p\u06b9\np\3q\3q\5q\u06bd\nq\3r\3r\3r\5r\u06c2\nr\3s\3s\3"+
		"t\3t\3u\3u\3u\5u\u06cb\nu\3v\3v\5v\u06cf\nv\3w\3w\3w\3w\3w\3w\3w\3w\3"+
		"w\3w\3w\3w\5w\u06dd\nw\3x\3x\5x\u06e1\nx\3x\3x\3y\6y\u06e6\ny\ry\16y\u06e7"+
		"\3z\3z\3{\3{\3{\3{\3|\3|\3|\3|\3|\3|\5|\u06f6\n|\3}\3}\3}\3~\3~\3\177"+
		"\3\177\3\177\7\177\u0700\n\177\f\177\16\177\u0703\13\177\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0708\n\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u070d\n"+
		"\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0084"+
		"\3\u0084\3\u0085\3\u0085\5\u0085\u071a\n\u0085\3\u0086\3\u0086\5\u0086"+
		"\u071e\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\5\u0087\u0727\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0089\3\u0089\5\u0089\u0731\n\u0089\3\u0089\3\u0089\3\u008a\3\u008a"+
		"\7\u008a\u0737\n\u008a\f\u008a\16\u008a\u073a\13\u008a\3\u008b\3\u008b"+
		"\3\u008b\3\u008c\3\u008c\7\u008c\u0741\n\u008c\f\u008c\16\u008c\u0744"+
		"\13\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u074c"+
		"\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0752\n\u008e\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u0765"+
		"\n\u0091\3\u0091\3\u0091\5\u0091\u0769\n\u0091\3\u0091\3\u0091\5\u0091"+
		"\u076d\n\u0091\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\5\u0092\u0774\n"+
		"\u0092\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\7\u0095"+
		"\u077d\n\u0095\f\u0095\16\u0095\u0780\13\u0095\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\5\u0097\u0790\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099"+
		"\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u07a4\n\u009a\3\u009b"+
		"\3\u009b\5\u009b\u07a8\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c\5\u009c"+
		"\u07ae\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u07b5\n"+
		"\u009d\3\u009d\5\u009d\u07b8\n\u009d\3\u009e\3\u009e\5\u009e\u07bc\n\u009e"+
		"\3\u009e\5\u009e\u07bf\n\u009e\3\u009f\3\u009f\7\u009f\u07c3\n\u009f\f"+
		"\u009f\16\u009f\u07c6\13\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0"+
		"\u07cc\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u07eb\n\u00a7\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u07f6"+
		"\n\u00a8\3\u00a9\5\u00a9\u07f9\n\u00a9\3\u00a9\5\u00a9\u07fc\n\u00a9\3"+
		"\u00a9\5\u00a9\u07ff\n\u00a9\3\u00a9\7\u00a9\u0802\n\u00a9\f\u00a9\16"+
		"\u00a9\u0805\13\u00a9\3\u00a9\5\u00a9\u0808\n\u00a9\3\u00a9\3\u00a9\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0810\n\u00aa\3\u00ab\3\u00ab\3"+
		"\u00ab\7\u00ab\u0815\n\u00ab\f\u00ab\16\u00ab\u0818\13\u00ab\3\u00ac\3"+
		"\u00ac\5\u00ac\u081c\n\u00ac\3\u00ac\5\u00ac\u081f\n\u00ac\3\u00ac\5\u00ac"+
		"\u0822\n\u00ac\3\u00ac\3\u00ac\3\u00ad\6\u00ad\u0827\n\u00ad\r\u00ad\16"+
		"\u00ad\u0828\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\6\u00af\u0831"+
		"\n\u00af\r\u00af\16\u00af\u0832\3\u00b0\3\u00b0\5\u00b0\u0837\n\u00b0"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b3\6\u00b3\u0844\n\u00b3\r\u00b3\16\u00b3\u0845\3\u00b4"+
		"\3\u00b4\5\u00b4\u084a\n\u00b4\3\u00b5\5\u00b5\u084d\n\u00b5\3\u00b5\5"+
		"\u00b5\u0850\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0857"+
		"\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7\5\u00b7\u085f"+
		"\n\u00b7\3\u00b7\5\u00b7\u0862\n\u00b7\3\u00b7\5\u00b7\u0865\n\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\5\u00b7\u086a\n\u00b7\3\u00b7\5\u00b7\u086d\n\u00b7"+
		"\3\u00b7\5\u00b7\u0870\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u0874\n\u00b7\3"+
		"\u00b8\3\u00b8\7\u00b8\u0878\n\u00b8\f\u00b8\16\u00b8\u087b\13\u00b8\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\5\u00b9\u0886\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\5\u00bb"+
		"\u088d\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0892\n\u00bb\3\u00bb\7"+
		"\u00bb\u0895\n\u00bb\f\u00bb\16\u00bb\u0898\13\u00bb\3\u00bc\3\u00bc\3"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u08a0\n\u00bd\f\u00bd\16\u00bd"+
		"\u08a3\13\u00bd\3\u00be\3\u00be\3\u00be\7\u00be\u08a8\n\u00be\f\u00be"+
		"\16\u00be\u08ab\13\u00be\3\u00bf\3\u00bf\7\u00bf\u08af\n\u00bf\f\u00bf"+
		"\16\u00bf\u08b2\13\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u08bd\n\u00c1\3\u00c1\3\u00c1\5\u00c1"+
		"\u08c1\n\u00c1\5\u00c1\u08c3\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u08c8"+
		"\n\u00c2\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u08cd\n\u00c3\f\u00c3\16\u00c3"+
		"\u08d0\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\5\u00c5"+
		"\u08d8\n\u00c5\3\u00c5\3\u00c5\3\u00c6\6\u00c6\u08dd\n\u00c6\r\u00c6\16"+
		"\u00c6\u08de\3\u00c7\5\u00c7\u08e2\n\u00c7\3\u00c7\5\u00c7\u08e5\n\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u08ee"+
		"\n\u00c7\3\u00c7\5\u00c7\u08f1\n\u00c7\3\u00c8\6\u00c8\u08f4\n\u00c8\r"+
		"\u00c8\16\u00c8\u08f5\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u0908\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\5\u00ca\u0919\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0925\n\u00cb\3\u00cc"+
		"\3\u00cc\3\u00cc\7\u00cc\u092a\n\u00cc\f\u00cc\16\u00cc\u092d\13\u00cc"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0936"+
		"\n\u00ce\f\u00ce\16\u00ce\u0939\13\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u0940\n\u00cf\3\u00d0\3\u00d0\5\u00d0\u0944\n\u00d0\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d2\5\u00d2\u094a\n\u00d2\3\u00d2\5\u00d2\u094d"+
		"\n\u00d2\3\u00d2\5\u00d2\u0950\n\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u0955\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0959\n\u00d2\3\u00d2\3\u00d2\5"+
		"\u00d2\u095d\n\u00d2\3\u00d3\6\u00d3\u0960\n\u00d3\r\u00d3\16\u00d3\u0961"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0971\n\u00d4\3\u00d5\3\u00d5"+
		"\5\u00d5\u0975\n\u00d5\3\u00d6\3\u00d6\3\u00d7\3\u00d7\5\u00d7\u097b\n"+
		"\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0981\n\u00d8\5\u00d8\u0983"+
		"\n\u00d8\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u0988\n\u00d9\f\u00d9\16\u00d9"+
		"\u098b\13\u00d9\3\u00da\5\u00da\u098e\n\u00da\3\u00da\5\u00da\u0991\n"+
		"\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0996\n\u00da\3\u00da\5\u00da\u0999"+
		"\n\u00da\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dd\5\u00dd\u09a1"+
		"\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\5\u00de\u09a8\n\u00de"+
		"\3\u00de\5\u00de\u09ab\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00df\6\u00df\u09b4\n\u00df\r\u00df\16\u00df\u09b5\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u09c4\n\u00e0\3\u00e1\5\u00e1\u09c7\n\u00e1\3"+
		"\u00e1\5\u00e1\u09ca\n\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u09cf\n\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u09d4\n\u00e1\5\u00e1\u09d6\n\u00e1\3"+
		"\u00e2\5\u00e2\u09d9\n\u00e2\3\u00e2\5\u00e2\u09dc\n\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e3\5\u00e3\u09e2\n\u00e3\3\u00e3\5\u00e3\u09e5\n\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u09f1\n\u00e4\3\u00e5\3\u00e5\5\u00e5\u09f5\n\u00e5\3"+
		"\u00e6\5\u00e6\u09f8\n\u00e6\3\u00e6\5\u00e6\u09fb\n\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6"+
		"\u0a07\n\u00e6\3\u00e7\3\u00e7\7\u00e7\u0a0b\n\u00e7\f\u00e7\16\u00e7"+
		"\u0a0e\13\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0a1d\n\u00e8"+
		"\3\u00e9\5\u00e9\u0a20\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0a2a\n\u00e9\3\u00ea\5\u00ea\u0a2d\n"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\5\u00eb\u0a33\n\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00ec\5\u00ec\u0a39\n\u00ec\3\u00ec\5\u00ec\u0a3c\n\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\7\u00ed\u0a45"+
		"\n\u00ed\f\u00ed\16\u00ed\u0a48\13\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0a55"+
		"\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0a5b\n\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00f0\5\u00f0\u0a63\n\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\7\u00f1\u0a6b\n\u00f1\f\u00f1"+
		"\16\u00f1\u0a6e\13\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0a74"+
		"\n\u00f2\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0a79\n\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u0aa0\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0ab8\n\u00f8"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0aca"+
		"\n\u00f9\3\u00fa\3\u00fa\5\u00fa\u0ace\n\u00fa\3\u00fb\5\u00fb\u0ad1\n"+
		"\u00fb\3\u00fb\5\u00fb\u0ad4\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\6"+
		"\u00fc\u0ada\n\u00fc\r\u00fc\16\u00fc\u0adb\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\5\u00fd\u0ae4\n\u00fd\3\u00fe\3\u00fe\3\u00fe\5"+
		"\u00fe\u0ae9\n\u00fe\3\u00fe\3\u00fe\5\u00fe\u0aed\n\u00fe\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\5\u00ff\u0af3\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\5\u00ff\u0afa\n\u00ff\3\u00ff\5\u00ff\u0afd\n\u00ff\3\u0100\3"+
		"\u0100\5\u0100\u0b01\n\u0100\3\u0101\5\u0101\u0b04\n\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102\3\u0103\3\u0103\5\u0103"+
		"\u0b10\n\u0103\3\u0104\3\u0104\3\u0105\3\u0105\5\u0105\u0b16\n\u0105\3"+
		"\u0106\3\u0106\5\u0106\u0b1a\n\u0106\3\u0107\5\u0107\u0b1d\n\u0107\3\u0107"+
		"\5\u0107\u0b20\n\u0107\3\u0107\5\u0107\u0b23\n\u0107\3\u0107\3\u0107\3"+
		"\u0107\5\u0107\u0b28\n\u0107\3\u0107\5\u0107\u0b2b\n\u0107\3\u0107\5\u0107"+
		"\u0b2e\n\u0107\3\u0107\3\u0107\5\u0107\u0b32\n\u0107\3\u0108\3\u0108\7"+
		"\u0108\u0b36\n\u0108\f\u0108\16\u0108\u0b39\13\u0108\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u0b41\n\u0109\3\u010a\3\u010a\3"+
		"\u010a\3\u010b\3\u010b\5\u010b\u0b48\n\u010b\3\u010b\3\u010b\3\u010c\3"+
		"\u010c\7\u010c\u0b4e\n\u010c\f\u010c\16\u010c\u0b51\13\u010c\3\u010d\5"+
		"\u010d\u0b54\n\u010d\3\u010d\5\u010d\u0b57\n\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\5\u010d\u0b5f\n\u010d\3\u010e\3\u010e\7\u010e"+
		"\u0b63\n\u010e\f\u010e\16\u010e\u0b66\13\u010e\3\u010e\6\u010e\u0b69\n"+
		"\u010e\r\u010e\16\u010e\u0b6a\3\u010f\3\u010f\3\u010f\3\u010f\7\u010f"+
		"\u0b71\n\u010f\f\u010f\16\u010f\u0b74\13\u010f\3\u0110\6\u0110\u0b77\n"+
		"\u0110\r\u0110\16\u0110\u0b78\3\u0111\3\u0111\5\u0111\u0b7d\n\u0111\3"+
		"\u0111\3\u0111\3\u0112\3\u0112\7\u0112\u0b83\n\u0112\f\u0112\16\u0112"+
		"\u0b86\13\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u0b8d"+
		"\n\u0113\3\u0113\3\u0113\5\u0113\u0b91\n\u0113\3\u0114\3\u0114\3\u0114"+
		"\7\u0114\u0b96\n\u0114\f\u0114\16\u0114\u0b99\13\u0114\3\u0115\5\u0115"+
		"\u0b9c\n\u0115\3\u0115\5\u0115\u0b9f\n\u0115\3\u0115\5\u0115\u0ba2\n\u0115"+
		"\3\u0115\3\u0115\3\u0115\5\u0115\u0ba7\n\u0115\3\u0115\5\u0115\u0baa\n"+
		"\u0115\3\u0115\5\u0115\u0bad\n\u0115\3\u0115\3\u0115\5\u0115\u0bb1\n\u0115"+
		"\3\u0116\3\u0116\7\u0116\u0bb5\n\u0116\f\u0116\16\u0116\u0bb8\13\u0116"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u0bc0\n\u0117"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0119\5\u0119\u0bc7\n\u0119\3\u0119"+
		"\5\u0119\u0bca\n\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u0bcf\n\u0119\3"+
		"\u0119\5\u0119\u0bd2\n\u0119\3\u0119\7\u0119\u0bd5\n\u0119\f\u0119\16"+
		"\u0119\u0bd8\13\u0119\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011c"+
		"\3\u011c\5\u011c\u0be1\n\u011c\3\u011c\3\u011c\3\u011d\6\u011d\u0be6\n"+
		"\u011d\r\u011d\16\u011d\u0be7\3\u011e\5\u011e\u0beb\n\u011e\3\u011e\5"+
		"\u011e\u0bee\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u0bf3\n\u011e\3\u011e"+
		"\3\u011e\5\u011e\u0bf7\n\u011e\3\u011e\3\u011e\5\u011e\u0bfb\n\u011e\3"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u0c0c\n\u011e"+
		"\3\u011e\3\u011e\3\u011e\5\u011e\u0c11\n\u011e\3\u011e\3\u011e\5\u011e"+
		"\u0c15\n\u011e\3\u011e\3\u011e\5\u011e\u0c19\n\u011e\3\u011e\3\u011e\3"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u0c22\n\u011e\3\u011f\5"+
		"\u011f\u0c25\n\u011f\3\u011f\5\u011f\u0c28\n\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u0c2d\n\u011f\3\u011f\3\u011f\5\u011f\u0c31\n\u011f\3\u011f\3"+
		"\u011f\5\u011f\u0c35\n\u011f\3\u011f\3\u011f\3\u0120\5\u0120\u0c3a\n\u0120"+
		"\3\u0120\5\u0120\u0c3d\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0121\5\u0121\u0c46\n\u0121\3\u0121\3\u0121\3\u0121\5\u0121"+
		"\u0c4b\n\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u0c50\n\u0121\3\u0121\3"+
		"\u0121\3\u0121\5\u0121\u0c55\n\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u0c5a"+
		"\n\u0121\5\u0121\u0c5c\n\u0121\3\u0122\5\u0122\u0c5f\n\u0122\3\u0122\5"+
		"\u0122\u0c62\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0123\5"+
		"\u0123\u0c6a\n\u0123\3\u0123\5\u0123\u0c6d\n\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\5\u0124\u0c79"+
		"\n\u0124\3\u0124\5\u0124\u0c7c\n\u0124\3\u0124\3\u0124\3\u0124\5\u0124"+
		"\u0c81\n\u0124\3\u0124\3\u0124\5\u0124\u0c85\n\u0124\3\u0125\3\u0125\3"+
		"\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u0c8f\n\u0126\3"+
		"\u0126\3\u0126\5\u0126\u0c93\n\u0126\3\u0127\6\u0127\u0c96\n\u0127\r\u0127"+
		"\16\u0127\u0c97\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\7\u0129\u0c9f"+
		"\n\u0129\f\u0129\16\u0129\u0ca2\13\u0129\3\u012a\5\u012a\u0ca5\n\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u0caa\n\u012a\3\u012b\5\u012b\u0cad\n"+
		"\u012b\3\u012b\5\u012b\u0cb0\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5"+
		"\u012b\u0cb6\n\u012b\3\u012b\3\u012b\5\u012b\u0cba\n\u012b\3\u012b\3\u012b"+
		"\5\u012b\u0cbe\n\u012b\3\u012b\3\u012b\3\u012c\3\u012c\7\u012c\u0cc4\n"+
		"\u012c\f\u012c\16\u012c\u0cc7\13\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\5\u012d\u0ccf\n\u012d\3\u012e\3\u012e\3\u012f\6\u012f"+
		"\u0cd4\n\u012f\r\u012f\16\u012f\u0cd5\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u0cdc\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0132"+
		"\3\u0132\5\u0132\u0ce5\n\u0132\3\u0133\3\u0133\3\u0134\6\u0134\u0cea\n"+
		"\u0134\r\u0134\16\u0134\u0ceb\3\u0135\3\u0135\5\u0135\u0cf0\n\u0135\3"+
		"\u0135\3\u0135\5\u0135\u0cf4\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3"+
		"\u0136\3\u0137\3\u0137\5\u0137\u0cfd\n\u0137\3\u0138\3\u0138\3\u0138\7"+
		"\u0138\u0d02\n\u0138\f\u0138\16\u0138\u0d05\13\u0138\3\u0139\3\u0139\5"+
		"\u0139\u0d09\n\u0139\3\u013a\3\u013a\3\u013b\3\u013b\5\u013b\u0d0f\n\u013b"+
		"\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\7\u013c\u0d16\n\u013c\f\u013c"+
		"\16\u013c\u0d19\13\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e\7\u013e"+
		"\u0d20\n\u013e\f\u013e\16\u013e\u0d23\13\u013e\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u0140\3\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0143\3\u0143"+
		"\3\u0144\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146\3\u0147\3\u0147\3\u0148"+
		"\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014c\5\u014c"+
		"\u0d42\n\u014c\3\u014c\5\u014c\u0d45\n\u014c\3\u014c\5\u014c\u0d48\n\u014c"+
		"\3\u014c\3\u014c\5\u014c\u0d4c\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014d\5\u014d\u0d55\n\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\5\u014d\u0d6c\n\u014d\3\u014e\3\u014e\5\u014e\u0d70\n\u014e\3\u014f\3"+
		"\u014f\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\7\u0151\u0d7a\n"+
		"\u0151\f\u0151\16\u0151\u0d7d\13\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\7\u0151\u0d84\n\u0151\f\u0151\16\u0151\u0d87\13\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\5\u0151\u0d8d\n\u0151\3\u0152\3\u0152\3\u0153"+
		"\3\u0153\3\u0154\3\u0154\5\u0154\u0d95\n\u0154\3\u0155\3\u0155\3\u0155"+
		"\3\u0156\3\u0156\3\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0158"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0159\3\u0159\3\u0159"+
		"\7\u0159\u0dac\n\u0159\f\u0159\16\u0159\u0daf\13\u0159\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b\5\u015b\u0db8\n\u015b\3\u015c"+
		"\3\u015c\3\u015d\5\u015d\u0dbd\n\u015d\3\u015d\5\u015d\u0dc0\n\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015e\6\u015e\u0dc8\n\u015e\r"+
		"\u015e\16\u015e\u0dc9\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161\6\u0161"+
		"\u0dd1\n\u0161\r\u0161\16\u0161\u0dd2\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0163\3\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0165\3\u0165\3\u0166\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0169"+
		"\3\u0169\3\u016a\3\u016a\3\u016b\3\u016b\3\u016c\3\u016c\3\u016d\3\u016d"+
		"\3\u016e\3\u016e\3\u016f\3\u016f\3\u0170\3\u0170\3\u0171\3\u0171\3\u0172"+
		"\3\u0172\3\u0173\3\u0173\3\u0174\3\u0174\3\u0175\3\u0175\3\u0176\3\u0176"+
		"\3\u0177\3\u0177\3\u0178\3\u0178\3\u0179\3\u0179\3\u017a\3\u017a\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e"+
		"\u0e20\n\u017e\3\u017f\3\u017f\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181"+
		"\5\u0181\u0e29\n\u0181\3\u0181\5\u0181\u0e2c\n\u0181\3\u0181\5\u0181\u0e2f"+
		"\n\u0181\3\u0181\3\u0181\5\u0181\u0e33\n\u0181\3\u0182\3\u0182\3\u0182"+
		"\5\u0182\u0e38\n\u0182\3\u0182\5\u0182\u0e3b\n\u0182\3\u0182\5\u0182\u0e3e"+
		"\n\u0182\3\u0182\3\u0182\5\u0182\u0e42\n\u0182\3\u0183\3\u0183\3\u0183"+
		"\5\u0183\u0e47\n\u0183\3\u0183\5\u0183\u0e4a\n\u0183\3\u0183\5\u0183\u0e4d"+
		"\n\u0183\3\u0183\3\u0183\5\u0183\u0e51\n\u0183\3\u0184\3\u0184\3\u0184"+
		"\5\u0184\u0e56\n\u0184\3\u0184\3\u0184\5\u0184\u0e5a\n\u0184\3\u0185\3"+
		"\u0185\3\u0185\3\u0185\5\u0185\u0e60\n\u0185\3\u0185\3\u0185\5\u0185\u0e64"+
		"\n\u0185\3\u0185\3\u0185\5\u0185\u0e68\n\u0185\3\u0185\3\u0185\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\5\u0186\u0e76\n\u0186\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\5\u018c\u0e96\n\u018c"+
		"\3\u018c\3\u018c\5\u018c\u0e9a\n\u018c\3\u018c\3\u018c\3\u018d\3\u018d"+
		"\5\u018d\u0ea0\n\u018d\3\u018d\3\u018d\5\u018d\u0ea4\n\u018d\3\u018d\3"+
		"\u018d\5\u018d\u0ea8\n\u018d\3\u018d\3\u018d\3\u018e\3\u018e\3\u018f\3"+
		"\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u0eb3\n\u018f\3\u018f\3\u018f\3"+
		"\u018f\3\u018f\7\u018f\u0eb9\n\u018f\f\u018f\16\u018f\u0ebc\13\u018f\3"+
		"\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\5\u0190\u0ec7\n\u0190\3\u0190\3\u0190\3\u0190\3\u0191\3\u0191\5\u0191"+
		"\u0ece\n\u0191\3\u0191\3\u0191\5\u0191\u0ed2\n\u0191\3\u0191\3\u0191\5"+
		"\u0191\u0ed6\n\u0191\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3"+
		"\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0196\3\u0196\5\u0196\u0ef2\n\u0196\3\u0196\3\u0196\3\u0197\3\u0197"+
		"\5\u0197\u0ef8\n\u0197\3\u0197\3\u0197\5\u0197\u0efc\n\u0197\3\u0197\2"+
		"\2\u0198\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668"+
		":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a"+
		"\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222"+
		"\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a"+
		"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252"+
		"\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a"+
		"\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282"+
		"\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a"+
		"\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2"+
		"\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca"+
		"\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2"+
		"\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa"+
		"\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312"+
		"\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a"+
		"\u032c\2\22\23\2\f\16\20\20\26\26\"\"%%((\62\63\65\65<<>?FFHHLLRRVWmm"+
		"op\n\2\27\27\32\3299AATTXXdehh\4\2$$//\4\2\u0082\u0082\u008d\u008d\20"+
		"\2\24\24\27\27\32\32\37\37$$//99AAEETTXX\\\\dehh\5\2y\177\u008c\u008d"+
		"\u0095\u0096\5\2{{\u008d\u008d\u0092\u0093\4\2IIQQ\5\2IIQQ__\7\2,,aa\u0080"+
		"\u0081\u0088\u0089\u0090\u0091\4\288II\5\2;;CCMO\4\2++gg\6\2;;CCMOgg\4"+
		"\2,,aa\24\2\13\13\17\17\21\21\23\25\27!#$&\')\61\64\64\66;==@EGGIKMQS"+
		"UXlnn\u102c\2\u032e\3\2\2\2\4\u0330\3\2\2\2\6\u0332\3\2\2\2\b\u0338\3"+
		"\2\2\2\n\u0345\3\2\2\2\f\u0347\3\2\2\2\16\u0354\3\2\2\2\20\u0358\3\2\2"+
		"\2\22\u035d\3\2\2\2\24\u035f\3\2\2\2\26\u0361\3\2\2\2\30\u0363\3\2\2\2"+
		"\32\u0366\3\2\2\2\34\u03a5\3\2\2\2\36\u03ab\3\2\2\2 \u03ad\3\2\2\2\"\u03af"+
		"\3\2\2\2$\u03b1\3\2\2\2&\u03b5\3\2\2\2(\u03bd\3\2\2\2*\u03bf\3\2\2\2,"+
		"\u03c1\3\2\2\2.\u03c3\3\2\2\2\60\u03cc\3\2\2\2\62\u03d0\3\2\2\2\64\u03d8"+
		"\3\2\2\2\66\u03db\3\2\2\28\u041c\3\2\2\2:\u041e\3\2\2\2<\u0422\3\2\2\2"+
		">\u0425\3\2\2\2@\u0429\3\2\2\2B\u042b\3\2\2\2D\u042d\3\2\2\2F\u0435\3"+
		"\2\2\2H\u0441\3\2\2\2J\u0443\3\2\2\2L\u0452\3\2\2\2N\u045d\3\2\2\2P\u045f"+
		"\3\2\2\2R\u0467\3\2\2\2T\u046d\3\2\2\2V\u046f\3\2\2\2X\u0476\3\2\2\2Z"+
		"\u0483\3\2\2\2\\\u0485\3\2\2\2^\u0498\3\2\2\2`\u049e\3\2\2\2b\u04aa\3"+
		"\2\2\2d\u04ac\3\2\2\2f\u04b9\3\2\2\2h\u04bb\3\2\2\2j\u04c7\3\2\2\2l\u04dc"+
		"\3\2\2\2n\u04e2\3\2\2\2p\u04e9\3\2\2\2r\u04ee\3\2\2\2t\u04f3\3\2\2\2v"+
		"\u0505\3\2\2\2x\u0507\3\2\2\2z\u055a\3\2\2\2|\u055c\3\2\2\2~\u055f\3\2"+
		"\2\2\u0080\u0562\3\2\2\2\u0082\u0567\3\2\2\2\u0084\u0573\3\2\2\2\u0086"+
		"\u057d\3\2\2\2\u0088\u0588\3\2\2\2\u008a\u059a\3\2\2\2\u008c\u05a7\3\2"+
		"\2\2\u008e\u05a9\3\2\2\2\u0090\u05ad\3\2\2\2\u0092\u05af\3\2\2\2\u0094"+
		"\u05b9\3\2\2\2\u0096\u05c1\3\2\2\2\u0098\u05c9\3\2\2\2\u009a\u05d1\3\2"+
		"\2\2\u009c\u05d9\3\2\2\2\u009e\u05e1\3\2\2\2\u00a0\u05e6\3\2\2\2\u00a2"+
		"\u05ee\3\2\2\2\u00a4\u05f2\3\2\2\2\u00a6\u0603\3\2\2\2\u00a8\u0605\3\2"+
		"\2\2\u00aa\u060b\3\2\2\2\u00ac\u0614\3\2\2\2\u00ae\u0619\3\2\2\2\u00b0"+
		"\u0621\3\2\2\2\u00b2\u0623\3\2\2\2\u00b4\u062b\3\2\2\2\u00b6\u062f\3\2"+
		"\2\2\u00b8\u0631\3\2\2\2\u00ba\u0634\3\2\2\2\u00bc\u063d\3\2\2\2\u00be"+
		"\u0643\3\2\2\2\u00c0\u064f\3\2\2\2\u00c2\u0651\3\2\2\2\u00c4\u0656\3\2"+
		"\2\2\u00c6\u0659\3\2\2\2\u00c8\u0665\3\2\2\2\u00ca\u0673\3\2\2\2\u00cc"+
		"\u0683\3\2\2\2\u00ce\u0686\3\2\2\2\u00d0\u068e\3\2\2\2\u00d2\u0694\3\2"+
		"\2\2\u00d4\u0698\3\2\2\2\u00d6\u069a\3\2\2\2\u00d8\u069d\3\2\2\2\u00da"+
		"\u06a2\3\2\2\2\u00dc\u06a6\3\2\2\2\u00de\u06b8\3\2\2\2\u00e0\u06bc\3\2"+
		"\2\2\u00e2\u06c1\3\2\2\2\u00e4\u06c3\3\2\2\2\u00e6\u06c5\3\2\2\2\u00e8"+
		"\u06ca\3\2\2\2\u00ea\u06ce\3\2\2\2\u00ec\u06dc\3\2\2\2\u00ee\u06de\3\2"+
		"\2\2\u00f0\u06e5\3\2\2\2\u00f2\u06e9\3\2\2\2\u00f4\u06eb\3\2\2\2\u00f6"+
		"\u06f5\3\2\2\2\u00f8\u06f7\3\2\2\2\u00fa\u06fa\3\2\2\2\u00fc\u06fc\3\2"+
		"\2\2\u00fe\u0704\3\2\2\2\u0100\u070c\3\2\2\2\u0102\u070e\3\2\2\2\u0104"+
		"\u0712\3\2\2\2\u0106\u0715\3\2\2\2\u0108\u0719\3\2\2\2\u010a\u071d\3\2"+
		"\2\2\u010c\u071f\3\2\2\2\u010e\u0728\3\2\2\2\u0110\u072e\3\2\2\2\u0112"+
		"\u0734\3\2\2\2\u0114\u073b\3\2\2\2\u0116\u073e\3\2\2\2\u0118\u074b\3\2"+
		"\2\2\u011a\u0751\3\2\2\2\u011c\u0753\3\2\2\2\u011e\u0759\3\2\2\2\u0120"+
		"\u0761\3\2\2\2\u0122\u0773\3\2\2\2\u0124\u0775\3\2\2\2\u0126\u0777\3\2"+
		"\2\2\u0128\u0779\3\2\2\2\u012a\u0781\3\2\2\2\u012c\u078f\3\2\2\2\u012e"+
		"\u0791\3\2\2\2\u0130\u0794\3\2\2\2\u0132\u07a3\3\2\2\2\u0134\u07a5\3\2"+
		"\2\2\u0136\u07ab\3\2\2\2\u0138\u07b1\3\2\2\2\u013a\u07be\3\2\2\2\u013c"+
		"\u07c0\3\2\2\2\u013e\u07c7\3\2\2\2\u0140\u07d0\3\2\2\2\u0142\u07d3\3\2"+
		"\2\2\u0144\u07d6\3\2\2\2\u0146\u07d9\3\2\2\2\u0148\u07dc\3\2\2\2\u014a"+
		"\u07e2\3\2\2\2\u014c\u07ea\3\2\2\2\u014e\u07f5\3\2\2\2\u0150\u07f8\3\2"+
		"\2\2\u0152\u080b\3\2\2\2\u0154\u0811\3\2\2\2\u0156\u0819\3\2\2\2\u0158"+
		"\u0826\3\2\2\2\u015a\u082a\3\2\2\2\u015c\u0830\3\2\2\2\u015e\u0836\3\2"+
		"\2\2\u0160\u0838\3\2\2\2\u0162\u083e\3\2\2\2\u0164\u0843\3\2\2\2\u0166"+
		"\u0849\3\2\2\2\u0168\u084c\3\2\2\2\u016a\u0858\3\2\2\2\u016c\u085e\3\2"+
		"\2\2\u016e\u0875\3\2\2\2\u0170\u0885\3\2\2\2\u0172\u0887\3\2\2\2\u0174"+
		"\u088c\3\2\2\2\u0176\u0899\3\2\2\2\u0178\u089b\3\2\2\2\u017a\u08a4\3\2"+
		"\2\2\u017c\u08ac\3\2\2\2\u017e\u08b3\3\2\2\2\u0180\u08c2\3\2\2\2\u0182"+
		"\u08c7\3\2\2\2\u0184\u08c9\3\2\2\2\u0186\u08d1\3\2\2\2\u0188\u08d5\3\2"+
		"\2\2\u018a\u08dc\3\2\2\2\u018c\u08f0\3\2\2\2\u018e\u08f3\3\2\2\2\u0190"+
		"\u0907\3\2\2\2\u0192\u0918\3\2\2\2\u0194\u091a\3\2\2\2\u0196\u0926\3\2"+
		"\2\2\u0198\u092e\3\2\2\2\u019a\u0932\3\2\2\2\u019c\u093f\3\2\2\2\u019e"+
		"\u0943\3\2\2\2\u01a0\u0945\3\2\2\2\u01a2\u0949\3\2\2\2\u01a4\u095f\3\2"+
		"\2\2\u01a6\u0970\3\2\2\2\u01a8\u0974\3\2\2\2\u01aa\u0976\3\2\2\2\u01ac"+
		"\u097a\3\2\2\2\u01ae\u0982\3\2\2\2\u01b0\u0984\3\2\2\2\u01b2\u0998\3\2"+
		"\2\2\u01b4\u099a\3\2\2\2\u01b6\u099d\3\2\2\2\u01b8\u09a0\3\2\2\2\u01ba"+
		"\u09a7\3\2\2\2\u01bc\u09b3\3\2\2\2\u01be\u09c3\3\2\2\2\u01c0\u09c6\3\2"+
		"\2\2\u01c2\u09d8\3\2\2\2\u01c4\u09e1\3\2\2\2\u01c6\u09f0\3\2\2\2\u01c8"+
		"\u09f4\3\2\2\2\u01ca\u09f7\3\2\2\2\u01cc\u0a08\3\2\2\2\u01ce\u0a1c\3\2"+
		"\2\2\u01d0\u0a1f\3\2\2\2\u01d2\u0a2c\3\2\2\2\u01d4\u0a32\3\2\2\2\u01d6"+
		"\u0a38\3\2\2\2\u01d8\u0a42\3\2\2\2\u01da\u0a54\3\2\2\2\u01dc\u0a56\3\2"+
		"\2\2\u01de\u0a62\3\2\2\2\u01e0\u0a68\3\2\2\2\u01e2\u0a73\3\2\2\2\u01e4"+
		"\u0a78\3\2\2\2\u01e6\u0a7a\3\2\2\2\u01e8\u0a82\3\2\2\2\u01ea\u0a84\3\2"+
		"\2\2\u01ec\u0a9f\3\2\2\2\u01ee\u0ab7\3\2\2\2\u01f0\u0ac9\3\2\2\2\u01f2"+
		"\u0acd\3\2\2\2\u01f4\u0ad0\3\2\2\2\u01f6\u0ad9\3\2\2\2\u01f8\u0ae3\3\2"+
		"\2\2\u01fa\u0ae5\3\2\2\2\u01fc\u0afc\3\2\2\2\u01fe\u0b00\3\2\2\2\u0200"+
		"\u0b03\3\2\2\2\u0202\u0b0b\3\2\2\2\u0204\u0b0f\3\2\2\2\u0206\u0b11\3\2"+
		"\2\2\u0208\u0b15\3\2\2\2\u020a\u0b19\3\2\2\2\u020c\u0b1c\3\2\2\2\u020e"+
		"\u0b33\3\2\2\2\u0210\u0b40\3\2\2\2\u0212\u0b42\3\2\2\2\u0214\u0b45\3\2"+
		"\2\2\u0216\u0b4b\3\2\2\2\u0218\u0b53\3\2\2\2\u021a\u0b60\3\2\2\2\u021c"+
		"\u0b6c\3\2\2\2\u021e\u0b76\3\2\2\2\u0220\u0b7a\3\2\2\2\u0222\u0b80\3\2"+
		"\2\2\u0224\u0b90\3\2\2\2\u0226\u0b92\3\2\2\2\u0228\u0b9b\3\2\2\2\u022a"+
		"\u0bb2\3\2\2\2\u022c\u0bbf\3\2\2\2\u022e\u0bc1\3\2\2\2\u0230\u0bc6\3\2"+
		"\2\2\u0232\u0bd9\3\2\2\2\u0234\u0bdb\3\2\2\2\u0236\u0bde\3\2\2\2\u0238"+
		"\u0be5\3\2\2\2\u023a\u0bea\3\2\2\2\u023c\u0c24\3\2\2\2\u023e\u0c39\3\2"+
		"\2\2\u0240\u0c45\3\2\2\2\u0242\u0c5e\3\2\2\2\u0244\u0c69\3\2\2\2\u0246"+
		"\u0c78\3\2\2\2\u0248\u0c86\3\2\2\2\u024a\u0c92\3\2\2\2\u024c\u0c95\3\2"+
		"\2\2\u024e\u0c99\3\2\2\2\u0250\u0c9b\3\2\2\2\u0252\u0ca4\3\2\2\2\u0254"+
		"\u0cac\3\2\2\2\u0256\u0cc1\3\2\2\2\u0258\u0cce\3\2\2\2\u025a\u0cd0\3\2"+
		"\2\2\u025c\u0cd3\3\2\2\2\u025e\u0cd7\3\2\2\2\u0260\u0cdf\3\2\2\2\u0262"+
		"\u0ce4\3\2\2\2\u0264\u0ce6\3\2\2\2\u0266\u0ce9\3\2\2\2\u0268\u0ced\3\2"+
		"\2\2\u026a\u0cf7\3\2\2\2\u026c\u0cfc\3\2\2\2\u026e\u0cfe\3\2\2\2\u0270"+
		"\u0d06\3\2\2\2\u0272\u0d0a\3\2\2\2\u0274\u0d0c\3\2\2\2\u0276\u0d12\3\2"+
		"\2\2\u0278\u0d1a\3\2\2\2\u027a\u0d1c\3\2\2\2\u027c\u0d24\3\2\2\2\u027e"+
		"\u0d28\3\2\2\2\u0280\u0d2a\3\2\2\2\u0282\u0d2c\3\2\2\2\u0284\u0d2e\3\2"+
		"\2\2\u0286\u0d30\3\2\2\2\u0288\u0d32\3\2\2\2\u028a\u0d34\3\2\2\2\u028c"+
		"\u0d36\3\2\2\2\u028e\u0d38\3\2\2\2\u0290\u0d3a\3\2\2\2\u0292\u0d3c\3\2"+
		"\2\2\u0294\u0d3e\3\2\2\2\u0296\u0d41\3\2\2\2\u0298\u0d6b\3\2\2\2\u029a"+
		"\u0d6f\3\2\2\2\u029c\u0d71\3\2\2\2\u029e\u0d74\3\2\2\2\u02a0\u0d8c\3\2"+
		"\2\2\u02a2\u0d8e\3\2\2\2\u02a4\u0d90\3\2\2\2\u02a6\u0d94\3\2\2\2\u02a8"+
		"\u0d96\3\2\2\2\u02aa\u0d99\3\2\2\2\u02ac\u0d9c\3\2\2\2\u02ae\u0da1\3\2"+
		"\2\2\u02b0\u0da8\3\2\2\2\u02b2\u0db0\3\2\2\2\u02b4\u0db7\3\2\2\2\u02b6"+
		"\u0db9\3\2\2\2\u02b8\u0dbc\3\2\2\2\u02ba\u0dc7\3\2\2\2\u02bc\u0dcb\3\2"+
		"\2\2\u02be\u0dcd\3\2\2\2\u02c0\u0dd0\3\2\2\2\u02c2\u0dd4\3\2\2\2\u02c4"+
		"\u0dd9\3\2\2\2\u02c6\u0ddb\3\2\2\2\u02c8\u0de1\3\2\2\2\u02ca\u0de3\3\2"+
		"\2\2\u02cc\u0de5\3\2\2\2\u02ce\u0de7\3\2\2\2\u02d0\u0de9\3\2\2\2\u02d2"+
		"\u0deb\3\2\2\2\u02d4\u0ded\3\2\2\2\u02d6\u0def\3\2\2\2\u02d8\u0df1\3\2"+
		"\2\2\u02da\u0df3\3\2\2\2\u02dc\u0df5\3\2\2\2\u02de\u0df7\3\2\2\2\u02e0"+
		"\u0df9\3\2\2\2\u02e2\u0dfb\3\2\2\2\u02e4\u0dfd\3\2\2\2\u02e6\u0dff\3\2"+
		"\2\2\u02e8\u0e01\3\2\2\2\u02ea\u0e03\3\2\2\2\u02ec\u0e05\3\2\2\2\u02ee"+
		"\u0e07\3\2\2\2\u02f0\u0e09\3\2\2\2\u02f2\u0e0b\3\2\2\2\u02f4\u0e0d\3\2"+
		"\2\2\u02f6\u0e11\3\2\2\2\u02f8\u0e15\3\2\2\2\u02fa\u0e1f\3\2\2\2\u02fc"+
		"\u0e21\3\2\2\2\u02fe\u0e23\3\2\2\2\u0300\u0e25\3\2\2\2\u0302\u0e34\3\2"+
		"\2\2\u0304\u0e43\3\2\2\2\u0306\u0e52\3\2\2\2\u0308\u0e5b\3\2\2\2\u030a"+
		"\u0e6b\3\2\2\2\u030c\u0e77\3\2\2\2\u030e\u0e7a\3\2\2\2\u0310\u0e7f\3\2"+
		"\2\2\u0312\u0e84\3\2\2\2\u0314\u0e8c\3\2\2\2\u0316\u0e92\3\2\2\2\u0318"+
		"\u0e9d\3\2\2\2\u031a\u0eab\3\2\2\2\u031c\u0eb2\3\2\2\2\u031e\u0ebd\3\2"+
		"\2\2\u0320\u0ecb\3\2\2\2\u0322\u0ed9\3\2\2\2\u0324\u0ede\3\2\2\2\u0326"+
		"\u0ee3\3\2\2\2\u0328\u0eeb\3\2\2\2\u032a\u0eef\3\2\2\2\u032c\u0ef5\3\2"+
		"\2\2\u032e\u032f\5\b\5\2\u032f\3\3\2\2\2\u0330\u0331\5\b\5\2\u0331\5\3"+
		"\2\2\2\u0332\u0333\t\2\2\2\u0333\7\3\2\2\2\u0334\u0335\5\6\4\2\u0335\u0336"+
		"\5\n\6\2\u0336\u0339\3\2\2\2\u0337\u0339\5\u016a\u00b6\2\u0338\u0334\3"+
		"\2\2\2\u0338\u0337\3\2\2\2\u0339\u0340\3\2\2\2\u033a\u033b\7|\2\2\u033b"+
		"\u033c\5\6\4\2\u033c\u033d\5\n\6\2\u033d\u033f\3\2\2\2\u033e\u033a\3\2"+
		"\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341"+
		"\t\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0346\5$\23\2\u0344\u0346\3\2\2\2"+
		"\u0345\u0343\3\2\2\2\u0345\u0344\3\2\2\2\u0346\13\3\2\2\2\u0347\u034d"+
		"\5\16\b\2\u0348\u034c\7\u008d\2\2\u0349\u034c\5\u0220\u0111\2\u034a\u034c"+
		"\7\u0082\2\2\u034b\u0348\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034a\3\2\2"+
		"\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e\r"+
		"\3\2\2\2\u034f\u034d\3\2\2\2\u0350\u0355\5\20\t\2\u0351\u0355\5\36\20"+
		"\2\u0352\u0353\7k\2\2\u0353\u0355\7\u0082\2\2\u0354\u0350\3\2\2\2\u0354"+
		"\u0351\3\2\2\2\u0354\u0352\3\2\2\2\u0355\17\3\2\2\2\u0356\u0359\5\22\n"+
		"\2\u0357\u0359\7\24\2\2\u0358\u0356\3\2\2\2\u0358\u0357\3\2\2\2\u0359"+
		"\21\3\2\2\2\u035a\u035e\5\24\13\2\u035b\u035e\5\26\f\2\u035c\u035e\7\37"+
		"\2\2\u035d\u035a\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035c\3\2\2\2\u035e"+
		"\23\3\2\2\2\u035f\u0360\t\3\2\2\u0360\25\3\2\2\2\u0361\u0362\t\4\2\2\u0362"+
		"\27\3\2\2\2\u0363\u0364\5\32\16\2\u0364\u0365\7\u008d\2\2\u0365\31\3\2"+
		"\2\2\u0366\u036b\5\16\b\2\u0367\u036a\5\u0220\u0111\2\u0368\u036a\7\u0082"+
		"\2\2\u0369\u0367\3\2\2\2\u0369\u0368\3\2\2\2\u036a\u036d\3\2\2\2\u036b"+
		"\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c\33\3\2\2\2\u036d\u036b\3\2\2"+
		"\2\u036e\u0378\5\20\t\2\u036f\u0371\t\5\2\2\u0370\u036f\3\2\2\2\u0371"+
		"\u0374\3\2\2\2\u0372\u0370\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3\2"+
		"\2\2\u0374\u0372\3\2\2\2\u0375\u0377\5\u0220\u0111\2\u0376\u0372\3\2\2"+
		"\2\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037e"+
		"\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u037d\t\5\2\2\u037c\u037b\3\2\2\2\u037d"+
		"\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2"+
		"\2\2\u0380\u037e\3\2\2\2\u0381\u0382\5\u0220\u0111\2\u0382\u03a6\3\2\2"+
		"\2\u0383\u038d\5\36\20\2\u0384\u0386\t\5\2\2\u0385\u0384\3\2\2\2\u0386"+
		"\u0389\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u038a\3\2"+
		"\2\2\u0389\u0387\3\2\2\2\u038a\u038c\5\u0220\u0111\2\u038b\u0387\3\2\2"+
		"\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u03a6"+
		"\3\2\2\2\u038f\u038d\3\2\2\2\u0390\u0391\7k\2\2\u0391\u039b\7\u0082\2"+
		"\2\u0392\u0394\t\5\2\2\u0393\u0392\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393"+
		"\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2\u0397\u0395\3\2\2\2\u0398"+
		"\u039a\5\u0220\u0111\2\u0399\u0395\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399"+
		"\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03a1\3\2\2\2\u039d\u039b\3\2\2\2\u039e"+
		"\u03a0\t\5\2\2\u039f\u039e\3\2\2\2\u03a0\u03a3\3\2\2\2\u03a1\u039f\3\2"+
		"\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4"+
		"\u03a6\5\u0220\u0111\2\u03a5\u036e\3\2\2\2\u03a5\u0383\3\2\2\2\u03a5\u0390"+
		"\3\2\2\2\u03a6\35\3\2\2\2\u03a7\u03ac\5\4\3\2\u03a8\u03ac\7E\2\2\u03a9"+
		"\u03ac\5\u02f0\u0179\2\u03aa\u03ac\7\\\2\2\u03ab\u03a7\3\2\2\2\u03ab\u03a8"+
		"\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03aa\3\2\2\2\u03ac\37\3\2\2\2\u03ad"+
		"\u03ae\5\4\3\2\u03ae!\3\2\2\2\u03af\u03b0\5\4\3\2\u03b0#\3\2\2\2\u03b1"+
		"\u03b2\7\u008b\2\2\u03b2\u03b3\5&\24\2\u03b3\u03b4\7\u008c\2\2\u03b4%"+
		"\3\2\2\2\u03b5\u03ba\5(\25\2\u03b6\u03b7\7}\2\2\u03b7\u03b9\5(\25\2\u03b8"+
		"\u03b6\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2"+
		"\2\2\u03bb\'\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03be\5\f\7\2\u03be)\3"+
		"\2\2\2\u03bf\u03c0\7k\2\2\u03c0+\3\2\2\2\u03c1\u03c2\5\u00e0q\2\u03c2"+
		"-\3\2\2\2\u03c3\u03c8\5\60\31\2\u03c4\u03c5\7}\2\2\u03c5\u03c7\5\60\31"+
		"\2\u03c6\u03c4\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9"+
		"\3\2\2\2\u03c9/\3\2\2\2\u03ca\u03c8\3\2\2\2\u03cb\u03cd\5\62\32\2\u03cc"+
		"\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\5\64"+
		"\33\2\u03cf\61\3\2\2\2\u03d0\u03d1\5\6\4\2\u03d1\u03d2\7~\2\2\u03d2\63"+
		"\3\2\2\2\u03d3\u03d9\5\u00e0q\2\u03d4\u03d5\7Q\2\2\u03d5\u03d9\5,\27\2"+
		"\u03d6\u03d7\7I\2\2\u03d7\u03d9\5,\27\2\u03d8\u03d3\3\2\2\2\u03d8\u03d4"+
		"\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9\65\3\2\2\2\u03da\u03dc\7\22\2\2\u03db"+
		"\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03e1\58"+
		"\35\2\u03de\u03e0\5:\36\2\u03df\u03de\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1"+
		"\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03f4\3\2\2\2\u03e3\u03e1\3\2"+
		"\2\2\u03e4\u03eb\5\u0328\u0195\2\u03e5\u03eb\5\u032a\u0196\2\u03e6\u03eb"+
		"\7\u0090\2\2\u03e7\u03eb\7\u0091\2\2\u03e8\u03e9\7\u0094\2\2\u03e9\u03eb"+
		"\5\6\4\2\u03ea\u03e4\3\2\2\2\u03ea\u03e5\3\2\2\2\u03ea\u03e6\3\2\2\2\u03ea"+
		"\u03e7\3\2\2\2\u03ea\u03e8\3\2\2\2\u03eb\u03ef\3\2\2\2\u03ec\u03ee\5:"+
		"\36\2\u03ed\u03ec\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef"+
		"\u03f0\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f2\u03ea\3\2"+
		"\2\2\u03f3\u03f6\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5"+
		"\67\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f7\u041d\5\u02fa\u017e\2\u03f8\u041d"+
		"\5<\37\2\u03f9\u041d\5> \2\u03fa\u041d\5B\"\2\u03fb\u041d\5\u016a\u00b6"+
		"\2\u03fc\u041d\5F$\2\u03fd\u041d\5H%\2\u03fe\u0414\7C\2\2\u03ff\u040e"+
		"\5\f\7\2\u0400\u040f\5\u032c\u0197\2\u0401\u040f\5L\'\2\u0402\u0403\7"+
		"x\2\2\u0403\u0404\5D#\2\u0404\u0406\7y\2\2\u0405\u0407\5\u021e\u0110\2"+
		"\u0406\u0405\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0409\3\2\2\2\u0408\u040a"+
		"\5\u0224\u0113\2\u0409\u0408\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040f\3"+
		"\2\2\2\u040b\u040c\5\u021e\u0110\2\u040c\u040d\5\u0224\u0113\2\u040d\u040f"+
		"\3\2\2\2\u040e\u0400\3\2\2\2\u040e\u0401\3\2\2\2\u040e\u0402\3\2\2\2\u040e"+
		"\u040b\3\2\2\2\u040f\u0415\3\2\2\2\u0410\u0415\5b\62\2\u0411\u0412\5\u0220"+
		"\u0111\2\u0412\u0413\5\u0224\u0113\2\u0413\u0415\3\2\2\2\u0414\u03ff\3"+
		"\2\2\2\u0414\u0410\3\2\2\2\u0414\u0411\3\2\2\2\u0415\u041d\3\2\2\2\u0416"+
		"\u041d\5h\65\2\u0417\u041d\5p9\2\u0418\u041d\5r:\2\u0419\u041d\5t;\2\u041a"+
		"\u041d\5\u00a4S\2\u041b\u041d\5\u02ac\u0157\2\u041c\u03f7\3\2\2\2\u041c"+
		"\u03f8\3\2\2\2\u041c\u03f9\3\2\2\2\u041c\u03fa\3\2\2\2\u041c\u03fb\3\2"+
		"\2\2\u041c\u03fc\3\2\2\2\u041c\u03fd\3\2\2\2\u041c\u03fe\3\2\2\2\u041c"+
		"\u0416\3\2\2\2\u041c\u0417\3\2\2\2\u041c\u0418\3\2\2\2\u041c\u0419\3\2"+
		"\2\2\u041c\u041a\3\2\2\2\u041c\u041b\3\2\2\2\u041d9\3\2\2\2\u041e\u041f"+
		"\7x\2\2\u041f\u0420\5D#\2\u0420\u0421\7y\2\2\u0421;\3\2\2\2\u0422\u0423"+
		"\5\6\4\2\u0423\u0424\5\n\6\2\u0424=\3\2\2\2\u0425\u0426\7z\2\2\u0426\u0427"+
		"\5\u00e0q\2\u0427\u0428\7{\2\2\u0428?\3\2\2\2\u0429\u042a\5\66\34\2\u042a"+
		"A\3\2\2\2\u042b\u042c\t\6\2\2\u042cC\3\2\2\2\u042d\u0432\5\u00e0q\2\u042e"+
		"\u042f\7}\2\2\u042f\u0431\5\u00e0q\2\u0430\u042e\3\2\2\2\u0431\u0434\3"+
		"\2\2\2\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433E\3\2\2\2\u0434\u0432"+
		"\3\2\2\2\u0435\u0436\7_\2\2\u0436G\3\2\2\2\u0437\u0438\7\23\2\2\u0438"+
		"\u0439\7|\2\2\u0439\u043a\5\6\4\2\u043a\u043b\5\n\6\2\u043b\u0442\3\2"+
		"\2\2\u043c\u043d\7\23\2\2\u043d\u043e\7x\2\2\u043e\u043f\5D#\2\u043f\u0440"+
		"\7y\2\2\u0440\u0442\3\2\2\2\u0441\u0437\3\2\2\2\u0441\u043c\3\2\2\2\u0442"+
		"I\3\2\2\2\u0443\u0444\7C\2\2\u0444\u044e\5\f\7\2\u0445\u0447\7z\2\2\u0446"+
		"\u0448\5.\30\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\3\2"+
		"\2\2\u0449\u044b\7{\2\2\u044a\u044c\5L\'\2\u044b\u044a\3\2\2\2\u044b\u044c"+
		"\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044f\5L\'\2\u044e\u0445\3\2\2\2\u044e"+
		"\u044d\3\2\2\2\u044fK\3\2\2\2\u0450\u0453\5N(\2\u0451\u0453\5V,\2\u0452"+
		"\u0450\3\2\2\2\u0452\u0451\3\2\2\2\u0453M\3\2\2\2\u0454\u0455\7v\2\2\u0455"+
		"\u045e\7w\2\2\u0456\u0457\7v\2\2\u0457\u0459\5P)\2\u0458\u045a\7}\2\2"+
		"\u0459\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c"+
		"\7w\2\2\u045c\u045e\3\2\2\2\u045d\u0454\3\2\2\2\u045d\u0456\3\2\2\2\u045e"+
		"O\3\2\2\2\u045f\u0464\5R*\2\u0460\u0461\7}\2\2\u0461\u0463\5R*\2\u0462"+
		"\u0460\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3\2\2\2\u0464\u0465\3\2"+
		"\2\2\u0465Q\3\2\2\2\u0466\u0464\3\2\2\2\u0467\u0468\5\6\4\2\u0468\u0469"+
		"\7\u008a\2\2\u0469\u046a\5T+\2\u046aS\3\2\2\2\u046b\u046e\5\u00e0q\2\u046c"+
		"\u046e\5L\'\2\u046d\u046b\3\2\2\2\u046d\u046c\3\2\2\2\u046eU\3\2\2\2\u046f"+
		"\u0470\7v\2\2\u0470\u0472\5X-\2\u0471\u0473\7}\2\2\u0472\u0471\3\2\2\2"+
		"\u0472\u0473\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0475\7w\2\2\u0475W\3\2"+
		"\2\2\u0476\u047b\5Z.\2\u0477\u0478\7}\2\2\u0478\u047a\5Z.\2\u0479\u0477"+
		"\3\2\2\2\u047a\u047d\3\2\2\2\u047b\u0479\3\2\2\2\u047b\u047c\3\2\2\2\u047c"+
		"Y\3\2\2\2\u047d\u047b\3\2\2\2\u047e\u0484\5\u00e2r\2\u047f\u0480\7v\2"+
		"\2\u0480\u0481\5D#\2\u0481\u0482\7w\2\2\u0482\u0484\3\2\2\2\u0483\u047e"+
		"\3\2\2\2\u0483\u047f\3\2\2\2\u0484[\3\2\2\2\u0485\u0496\7C\2\2\u0486\u0487"+
		"\5\u021a\u010e\2\u0487\u0488\5\u0224\u0113\2\u0488\u0497\3\2\2\2\u0489"+
		"\u048a\5\u021c\u010f\2\u048a\u048b\7x\2\2\u048b\u048c\5D#\2\u048c\u048e"+
		"\7y\2\2\u048d\u048f\5\u021e\u0110\2\u048e\u048d\3\2\2\2\u048e\u048f\3"+
		"\2\2\2\u048f\u0491\3\2\2\2\u0490\u0492\5\u0224\u0113\2\u0491\u0490\3\2"+
		"\2\2\u0491\u0492\3\2\2\2\u0492\u0497\3\2\2\2\u0493\u0494\5\u0220\u0111"+
		"\2\u0494\u0495\5\u0224\u0113\2\u0495\u0497\3\2\2\2\u0496\u0486\3\2\2\2"+
		"\u0496\u0489\3\2\2\2\u0496\u0493\3\2\2\2\u0497]\3\2\2\2\u0498\u0499\7"+
		"C\2\2\u0499\u049a\5\"\22\2\u049a\u049b\7z\2\2\u049b\u049c\5\u00e0q\2\u049c"+
		"\u049d\7{\2\2\u049d_\3\2\2\2\u049e\u049f\7C\2\2\u049f\u04a0\5b\62\2\u04a0"+
		"a\3\2\2\2\u04a1\u04a2\7v\2\2\u04a2\u04ab\7w\2\2\u04a3\u04a4\7v\2\2\u04a4"+
		"\u04a6\5d\63\2\u04a5\u04a7\7}\2\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3\2"+
		"\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\7w\2\2\u04a9\u04ab\3\2\2\2\u04aa"+
		"\u04a1\3\2\2\2\u04aa\u04a3\3\2\2\2\u04abc\3\2\2\2\u04ac\u04b1\5f\64\2"+
		"\u04ad\u04ae\7}\2\2\u04ae\u04b0\5f\64\2\u04af\u04ad\3\2\2\2\u04b0\u04b3"+
		"\3\2\2\2\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2e\3\2\2\2\u04b3"+
		"\u04b1\3\2\2\2\u04b4\u04ba\5\66\34\2\u04b5\u04b6\5\6\4\2\u04b6\u04b7\7"+
		"\u008a\2\2\u04b7\u04b8\5\u00e0q\2\u04b8\u04ba\3\2\2\2\u04b9\u04b4\3\2"+
		"\2\2\u04b9\u04b5\3\2\2\2\u04bag\3\2\2\2\u04bb\u04bc\7c\2\2\u04bc\u04c5"+
		"\7z\2\2\u04bd\u04be\5j\66\2\u04be\u04bf\7{\2\2\u04bf\u04c6\3\2\2\2\u04c0"+
		"\u04c1\5\f\7\2\u04c1\u04c2\7{\2\2\u04c2\u04c6\3\2\2\2\u04c3\u04c4\7k\2"+
		"\2\u04c4\u04c6\7{\2\2\u04c5\u04bd\3\2\2\2\u04c5\u04c0\3\2\2\2\u04c5\u04c3"+
		"\3\2\2\2\u04c6i\3\2\2\2\u04c7\u04d0\5\6\4\2\u04c8\u04ca\5l\67\2\u04c9"+
		"\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04d1\3\2\2\2\u04cb\u04cc\7\u008e"+
		"\2\2\u04cc\u04ce\5\6\4\2\u04cd\u04cf\5l\67\2\u04ce\u04cd\3\2\2\2\u04ce"+
		"\u04cf\3\2\2\2\u04cf\u04d1\3\2\2\2\u04d0\u04c9\3\2\2\2\u04d0\u04cb\3\2"+
		"\2\2\u04d1\u04d9\3\2\2\2\u04d2\u04d3\7|\2\2\u04d3\u04d5\5\6\4\2\u04d4"+
		"\u04d6\5l\67\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d8\3\2"+
		"\2\2\u04d7\u04d2\3\2\2\2\u04d8\u04db\3\2\2\2\u04d9\u04d7\3\2\2\2\u04d9"+
		"\u04da\3\2\2\2\u04dak\3\2\2\2\u04db\u04d9\3\2\2\2\u04dc\u04de\7\u008b"+
		"\2\2\u04dd\u04df\5n8\2\u04de\u04dd\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04e0"+
		"\3\2\2\2\u04e0\u04e1\7\u008c\2\2\u04e1m\3\2\2\2\u04e2\u04e6\7}\2\2\u04e3"+
		"\u04e5\7}\2\2\u04e4\u04e3\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2"+
		"\2\2\u04e6\u04e7\3\2\2\2\u04e7o\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e9\u04ea"+
		"\7\33\2\2\u04ea\u04eb\7z\2\2\u04eb\u04ec\5\u00e0q\2\u04ec\u04ed\7{\2\2"+
		"\u04edq\3\2\2\2\u04ee\u04ef\7f\2\2\u04ef\u04f0\7z\2\2\u04f0\u04f1\5\u00e0"+
		"q\2\u04f1\u04f2\7{\2\2\u04f2s\3\2\2\2\u04f3\u04f4\7 \2\2\u04f4\u04f5\7"+
		"z\2\2\u04f5\u04f6\5\f\7\2\u04f6\u04f7\7{\2\2\u04f7u\3\2\2\2\u04f8\u0506"+
		"\5\u0080A\2\u04f9\u0506\5\66\34\2\u04fa\u04fb\7\u0080\2\2\u04fb\u0506"+
		"\5v<\2\u04fc\u04fd\7\u0081\2\2\u04fd\u0506\5v<\2\u04fe\u04ff\7\u0088\2"+
		"\2\u04ff\u0506\5v<\2\u0500\u0501\7\u0089\2\2\u0501\u0506\5v<\2\u0502\u0506"+
		"\5|?\2\u0503\u0506\5~@\2\u0504\u0506\5\u02a6\u0154\2\u0505\u04f8\3\2\2"+
		"\2\u0505\u04f9\3\2\2\2\u0505\u04fa\3\2\2\2\u0505\u04fc\3\2\2\2\u0505\u04fe"+
		"\3\2\2\2\u0505\u0500\3\2\2\2\u0505\u0502\3\2\2\2\u0505\u0503\3\2\2\2\u0505"+
		"\u0504\3\2\2\2\u0506w\3\2\2\2\u0507\u0508\7z\2\2\u0508\u0509\5\f\7\2\u0509"+
		"\u050a\7{\2\2\u050a\u050b\5z>\2\u050by\3\2\2\2\u050c\u055b\7\u0089\2\2"+
		"\u050d\u055b\7\u0088\2\2\u050e\u055b\7z\2\2\u050f\u055b\5\6\4\2\u0510"+
		"\u055b\5\u02fa\u017e\2\u0511\u055b\7\13\2\2\u0512\u055b\7\21\2\2\u0513"+
		"\u055b\7\23\2\2\u0514\u055b\7\24\2\2\u0515\u055b\7\25\2\2\u0516\u055b"+
		"\7\27\2\2\u0517\u055b\7\30\2\2\u0518\u055b\7\31\2\2\u0519\u055b\7\32\2"+
		"\2\u051a\u055b\7\33\2\2\u051b\u055b\7\34\2\2\u051c\u055b\7\35\2\2\u051d"+
		"\u055b\7\36\2\2\u051e\u055b\7\37\2\2\u051f\u055b\7 \2\2\u0520\u055b\7"+
		"!\2\2\u0521\u055b\7#\2\2\u0522\u055b\7$\2\2\u0523\u055b\7&\2\2\u0524\u055b"+
		"\7\'\2\2\u0525\u055b\7)\2\2\u0526\u055b\7*\2\2\u0527\u055b\7+\2\2\u0528"+
		"\u055b\7-\2\2\u0529\u055b\7.\2\2\u052a\u055b\7/\2\2\u052b\u055b\7\60\2"+
		"\2\u052c\u055b\7\61\2\2\u052d\u055b\7\64\2\2\u052e\u055b\7\66\2\2\u052f"+
		"\u055b\7\67\2\2\u0530\u055b\78\2\2\u0531\u055b\79\2\2\u0532\u055b\7:\2"+
		"\2\u0533\u055b\7;\2\2\u0534\u055b\7@\2\2\u0535\u055b\7A\2\2\u0536\u055b"+
		"\7B\2\2\u0537\u055b\7C\2\2\u0538\u055b\7E\2\2\u0539\u055b\7G\2\2\u053a"+
		"\u055b\7I\2\2\u053b\u055b\7J\2\2\u053c\u055b\7K\2\2\u053d\u055b\7M\2\2"+
		"\u053e\u055b\7N\2\2\u053f\u055b\7O\2\2\u0540\u055b\7P\2\2\u0541\u055b"+
		"\7Q\2\2\u0542\u055b\7S\2\2\u0543\u055b\7T\2\2\u0544\u055b\7U\2\2\u0545"+
		"\u055b\7X\2\2\u0546\u055b\7Y\2\2\u0547\u055b\7Z\2\2\u0548\u055b\7[\2\2"+
		"\u0549\u055b\7\\\2\2\u054a\u055b\7]\2\2\u054b\u055b\7^\2\2\u054c\u055b"+
		"\7_\2\2\u054d\u055b\7`\2\2\u054e\u055b\7b\2\2\u054f\u055b\7c\2\2\u0550"+
		"\u055b\7d\2\2\u0551\u055b\7e\2\2\u0552\u055b\7f\2\2\u0553\u055b\7g\2\2"+
		"\u0554\u055b\7h\2\2\u0555\u055b\7i\2\2\u0556\u055b\7j\2\2\u0557\u055b"+
		"\7k\2\2\u0558\u055b\7l\2\2\u0559\u055b\7n\2\2\u055a\u050c\3\2\2\2\u055a"+
		"\u050d\3\2\2\2\u055a\u050e\3\2\2\2\u055a\u050f\3\2\2\2\u055a\u0510\3\2"+
		"\2\2\u055a\u0511\3\2\2\2\u055a\u0512\3\2\2\2\u055a\u0513\3\2\2\2\u055a"+
		"\u0514\3\2\2\2\u055a\u0515\3\2\2\2\u055a\u0516\3\2\2\2\u055a\u0517\3\2"+
		"\2\2\u055a\u0518\3\2\2\2\u055a\u0519\3\2\2\2\u055a\u051a\3\2\2\2\u055a"+
		"\u051b\3\2\2\2\u055a\u051c\3\2\2\2\u055a\u051d\3\2\2\2\u055a\u051e\3\2"+
		"\2\2\u055a\u051f\3\2\2\2\u055a\u0520\3\2\2\2\u055a\u0521\3\2\2\2\u055a"+
		"\u0522\3\2\2\2\u055a\u0523\3\2\2\2\u055a\u0524\3\2\2\2\u055a\u0525\3\2"+
		"\2\2\u055a\u0526\3\2\2\2\u055a\u0527\3\2\2\2\u055a\u0528\3\2\2\2\u055a"+
		"\u0529\3\2\2\2\u055a\u052a\3\2\2\2\u055a\u052b\3\2\2\2\u055a\u052c\3\2"+
		"\2\2\u055a\u052d\3\2\2\2\u055a\u052e\3\2\2\2\u055a\u052f\3\2\2\2\u055a"+
		"\u0530\3\2\2\2\u055a\u0531\3\2\2\2\u055a\u0532\3\2\2\2\u055a\u0533\3\2"+
		"\2\2\u055a\u0534\3\2\2\2\u055a\u0535\3\2\2\2\u055a\u0536\3\2\2\2\u055a"+
		"\u0537\3\2\2\2\u055a\u0538\3\2\2\2\u055a\u0539\3\2\2\2\u055a\u053a\3\2"+
		"\2\2\u055a\u053b\3\2\2\2\u055a\u053c\3\2\2\2\u055a\u053d\3\2\2\2\u055a"+
		"\u053e\3\2\2\2\u055a\u053f\3\2\2\2\u055a\u0540\3\2\2\2\u055a\u0541\3\2"+
		"\2\2\u055a\u0542\3\2\2\2\u055a\u0543\3\2\2\2\u055a\u0544\3\2\2\2\u055a"+
		"\u0545\3\2\2\2\u055a\u0546\3\2\2\2\u055a\u0547\3\2\2\2\u055a\u0548\3\2"+
		"\2\2\u055a\u0549\3\2\2\2\u055a\u054a\3\2\2\2\u055a\u054b\3\2\2\2\u055a"+
		"\u054c\3\2\2\2\u055a\u054d\3\2\2\2\u055a\u054e\3\2\2\2\u055a\u054f\3\2"+
		"\2\2\u055a\u0550\3\2\2\2\u055a\u0551\3\2\2\2\u055a\u0552\3\2\2\2\u055a"+
		"\u0553\3\2\2\2\u055a\u0554\3\2\2\2\u055a\u0555\3\2\2\2\u055a\u0556\3\2"+
		"\2\2\u055a\u0557\3\2\2\2\u055a\u0558\3\2\2\2\u055a\u0559\3\2\2\2\u055b"+
		"{\3\2\2\2\u055c\u055d\7\u0090\2\2\u055d\u055e\5v<\2\u055e}\3\2\2\2\u055f"+
		"\u0560\7\u0091\2\2\u0560\u0561\5v<\2\u0561\177\3\2\2\2\u0562\u0563\7z"+
		"\2\2\u0563\u0564\5\f\7\2\u0564\u0565\7{\2\2\u0565\u0566\5v<\2\u0566\u0081"+
		"\3\2\2\2\u0567\u0570\5v<\2\u0568\u0569\7\u0082\2\2\u0569\u056f\5v<\2\u056a"+
		"\u056b\7\u0083\2\2\u056b\u056f\5v<\2\u056c\u056d\7\u0084\2\2\u056d\u056f"+
		"\5v<\2\u056e\u0568\3\2\2\2\u056e\u056a\3\2\2\2\u056e\u056c\3\2\2\2\u056f"+
		"\u0572\3\2\2\2\u0570\u056e\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0083\3\2"+
		"\2\2\u0572\u0570\3\2\2\2\u0573\u057a\5\u0082B\2\u0574\u0575\7\u0080\2"+
		"\2\u0575\u0579\5\u0082B\2\u0576\u0577\7\u0081\2\2\u0577\u0579\5\u0082"+
		"B\2\u0578\u0574\3\2\2\2\u0578\u0576\3\2\2\2\u0579\u057c\3\2\2\2\u057a"+
		"\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0085\3\2\2\2\u057c\u057a\3\2"+
		"\2\2\u057d\u0585\5\u0084C\2\u057e\u057f\7\u00a1\2\2\u057f\u0584\5\u0084"+
		"C\2\u0580\u0581\5\u02f6\u017c\2\u0581\u0582\5\u0084C\2\u0582\u0584\3\2"+
		"\2\2\u0583\u057e\3\2\2\2\u0583\u0580\3\2\2\2\u0584\u0587\3\2\2\2\u0585"+
		"\u0583\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0087\3\2\2\2\u0587\u0585\3\2"+
		"\2\2\u0588\u0597\5\u0086D\2\u0589\u058a\7\u008b\2\2\u058a\u0596\5\u0086"+
		"D\2\u058b\u058c\7\u008c\2\2\u058c\u0596\5\u0086D\2\u058d\u058e\7\u0097"+
		"\2\2\u058e\u0596\5\u0086D\2\u058f\u0590\7\u0098\2\2\u0590\u0596\5\u0086"+
		"D\2\u0591\u0592\7=\2\2\u0592\u0596\5\u008eH\2\u0593\u0594\7\17\2\2\u0594"+
		"\u0596\5\f\7\2\u0595\u0589\3\2\2\2\u0595\u058b\3\2\2\2\u0595\u058d\3\2"+
		"\2\2\u0595\u058f\3\2\2\2\u0595\u0591\3\2\2\2\u0595\u0593\3\2\2\2\u0596"+
		"\u0599\3\2\2\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u0089\3\2"+
		"\2\2\u0599\u0597\3\2\2\2\u059a\u059b\5\6\4\2\u059b\u059c\7\u008b\2\2\u059c"+
		"\u05a1\5\f\7\2\u059d\u059e\7}\2\2\u059e\u05a0\5\f\7\2\u059f\u059d\3\2"+
		"\2\2\u05a0\u05a3\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2"+
		"\u05a4\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05a5\7\u008c\2\2\u05a5\u05a6"+
		"\5\u008cG\2\u05a6\u008b\3\2\2\2\u05a7\u05a8\t\7\2\2\u05a8\u008d\3\2\2"+
		"\2\u05a9\u05ab\5\32\16\2\u05aa\u05ac\7\u008d\2\2\u05ab\u05aa\3\2\2\2\u05ab"+
		"\u05ac\3\2\2\2\u05ac\u008f\3\2\2\2\u05ad\u05ae\t\b\2\2\u05ae\u0091\3\2"+
		"\2\2\u05af\u05b6\5\u0088E\2\u05b0\u05b1\7\u0095\2\2\u05b1\u05b5\5\u0088"+
		"E\2\u05b2\u05b3\7\u0096\2\2\u05b3\u05b5\5\u0088E\2\u05b4\u05b0\3\2\2\2"+
		"\u05b4\u05b2\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b6\u05b7"+
		"\3\2\2\2\u05b7\u0093\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b9\u05be\5\u0092J"+
		"\2\u05ba\u05bb\7\u0085\2\2\u05bb\u05bd\5\u0092J\2\u05bc\u05ba\3\2\2\2"+
		"\u05bd\u05c0\3\2\2\2\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u0095"+
		"\3\2\2\2\u05c0\u05be\3\2\2\2\u05c1\u05c6\5\u0094K\2\u05c2\u05c3\7\u0087"+
		"\2\2\u05c3\u05c5\5\u0094K\2\u05c4\u05c2\3\2\2\2\u05c5\u05c8\3\2\2\2\u05c6"+
		"\u05c4\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u0097\3\2\2\2\u05c8\u05c6\3\2"+
		"\2\2\u05c9\u05ce\5\u0096L\2\u05ca\u05cb\7\u0086\2\2\u05cb\u05cd\5\u0096"+
		"L\2\u05cc\u05ca\3\2\2\2\u05cd\u05d0\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce"+
		"\u05cf\3\2\2\2\u05cf\u0099\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d1\u05d6\5\u0098"+
		"M\2\u05d2\u05d3\7\u0092\2\2\u05d3\u05d5\5\u0098M\2\u05d4\u05d2\3\2\2\2"+
		"\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u009b"+
		"\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d9\u05de\5\u009aN\2\u05da\u05db\7\u0093"+
		"\2\2\u05db\u05dd\5\u009aN\2\u05dc\u05da\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de"+
		"\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u009d\3\2\2\2\u05e0\u05de\3\2"+
		"\2\2\u05e1\u05e4\5\u009cO\2\u05e2\u05e3\7\u008f\2\2\u05e3\u05e5\5\u009e"+
		"P\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u009f\3\2\2\2\u05e6"+
		"\u05ec\5\u009eP\2\u05e7\u05e8\7\u008d\2\2\u05e8\u05e9\5\u00e0q\2\u05e9"+
		"\u05ea\7~\2\2\u05ea\u05eb\5\u00e0q\2\u05eb\u05ed\3\2\2\2\u05ec\u05e7\3"+
		"\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u00a1\3\2\2\2\u05ee\u05ef\5\u00a6T\2"+
		"\u05ef\u05f0\5\u02f4\u017b\2\u05f0\u05f1\5\u00b6\\\2\u05f1\u00a3\3\2\2"+
		"\2\u05f2\u05f4\7!\2\2\u05f3\u05f5\5\u00a8U\2\u05f4\u05f3\3\2\2\2\u05f4"+
		"\u05f5\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\5\u00eex\2\u05f7\u00a5"+
		"\3\2\2\2\u05f8\u05f9\7z\2\2\u05f9\u0604\7{\2\2\u05fa\u05fb\7z\2\2\u05fb"+
		"\u05fc\5\u00aaV\2\u05fc\u05fd\7{\2\2\u05fd\u0604\3\2\2\2\u05fe\u05ff\7"+
		"z\2\2\u05ff\u0600\5\u00b2Z\2\u0600\u0601\7{\2\2\u0601\u0604\3\2\2\2\u0602"+
		"\u0604\5\u00b4[\2\u0603\u05f8\3\2\2\2\u0603\u05fa\3\2\2\2\u0603\u05fe"+
		"\3\2\2\2\u0603\u0602\3\2\2\2\u0604\u00a7\3\2\2\2\u0605\u0607\7z\2\2\u0606"+
		"\u0608\5\u00aaV\2\u0607\u0606\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u0609"+
		"\3\2\2\2\u0609\u060a\7{\2\2\u060a\u00a9\3\2\2\2\u060b\u0610\5\u00acW\2"+
		"\u060c\u060d\7}\2\2\u060d\u060f\5\u00acW\2\u060e\u060c\3\2\2\2\u060f\u0612"+
		"\3\2\2\2\u0610\u060e\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u00ab\3\2\2\2\u0612"+
		"\u0610\3\2\2\2\u0613\u0615\5\u00aeX\2\u0614\u0613\3\2\2\2\u0614\u0615"+
		"\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617\5\f\7\2\u0617\u0618\5\6\4\2\u0618"+
		"\u00ad\3\2\2\2\u0619\u061a\t\t\2\2\u061a\u00af\3\2\2\2\u061b\u061d\7z"+
		"\2\2\u061c\u061e\5\u00b2Z\2\u061d\u061c\3\2\2\2\u061d\u061e\3\2\2\2\u061e"+
		"\u061f\3\2\2\2\u061f\u0622\7{\2\2\u0620\u0622\5\u00b4[\2\u0621\u061b\3"+
		"\2\2\2\u0621\u0620\3\2\2\2\u0622\u00b1\3\2\2\2\u0623\u0628\5\u00b4[\2"+
		"\u0624\u0625\7}\2\2\u0625\u0627\5\u00b4[\2\u0626\u0624\3\2\2\2\u0627\u062a"+
		"\3\2\2\2\u0628\u0626\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u00b3\3\2\2\2\u062a"+
		"\u0628\3\2\2\2\u062b\u062c\5\6\4\2\u062c\u00b5\3\2\2\2\u062d\u0630\5\u00e0"+
		"q\2\u062e\u0630\5\u00eex\2\u062f\u062d\3\2\2\2\u062f\u062e\3\2\2\2\u0630"+
		"\u00b7\3\2\2\2\u0631\u0632\5\u00ba^\2\u0632\u0633\5\u00bc_\2\u0633\u00b9"+
		"\3\2\2\2\u0634\u0636\5\u02c8\u0165\2\u0635\u0637\5\f\7\2\u0636\u0635\3"+
		"\2\2\2\u0636\u0637\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u0639\5\6\4\2\u0639"+
		"\u063a\78\2\2\u063a\u063b\5\u00e0q\2\u063b\u00bb\3\2\2\2\u063c\u063e\5"+
		"\u00be`\2\u063d\u063c\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2"+
		"\u063f\u0641\5\u00d4k\2\u0640\u0642\5\u00dan\2\u0641\u0640\3\2\2\2\u0641"+
		"\u0642\3\2\2\2\u0642\u00bd\3\2\2\2\u0643\u0647\5\u00c0a\2\u0644\u0646"+
		"\5\u00c0a\2\u0645\u0644\3\2\2\2\u0646\u0649\3\2\2\2\u0647\u0645\3\2\2"+
		"\2\u0647\u0648\3\2\2\2\u0648\u00bf\3\2\2\2\u0649\u0647\3\2\2\2\u064a\u0650"+
		"\5\u00ba^\2\u064b\u0650\5\u00c2b\2\u064c\u0650\5\u00c4c\2\u064d\u0650"+
		"\5\u00caf\2\u064e\u0650\5\u00ccg\2\u064f\u064a\3\2\2\2\u064f\u064b\3\2"+
		"\2\2\u064f\u064c\3\2\2\2\u064f\u064d\3\2\2\2\u064f\u064e\3\2\2\2\u0650"+
		"\u00c1\3\2\2\2\u0651\u0652\5\u02ca\u0166\2\u0652\u0653\5\6\4\2\u0653\u0654"+
		"\7\u008a\2\2\u0654\u0655\5\u00e0q\2\u0655\u00c3\3\2\2\2\u0656\u0657\5"+
		"\u02cc\u0167\2\u0657\u0658\5\u00e6t\2\u0658\u00c5\3\2\2\2\u0659\u065b"+
		"\5\u02ce\u0168\2\u065a\u065c\5\f\7\2\u065b\u065a\3\2\2\2\u065b\u065c\3"+
		"\2\2\2\u065c\u065d\3\2\2\2\u065d\u065e\5\6\4\2\u065e\u065f\78\2\2\u065f"+
		"\u0660\5\u00e0q\2\u0660\u0661\5\u02d0\u0169\2\u0661\u0662\5\u00e0q\2\u0662"+
		"\u0663\5\u02d2\u016a\2\u0663\u0664\5\u00e0q\2\u0664\u00c7\3\2\2\2\u0665"+
		"\u0667\5\u02ce\u0168\2\u0666\u0668\5\f\7\2\u0667\u0666\3\2\2\2\u0667\u0668"+
		"\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066a\5\6\4\2\u066a\u066b\78\2\2\u066b"+
		"\u066c\5\u00e0q\2\u066c\u066d\5\u02d0\u0169\2\u066d\u066e\5\u00e0q\2\u066e"+
		"\u066f\5\u02d2\u016a\2\u066f\u0670\5\u00e0q\2\u0670\u0671\5\u02d4\u016b"+
		"\2\u0671\u0672\5\6\4\2\u0672\u00c9\3\2\2\2\u0673\u0675\5\u02ce\u0168\2"+
		"\u0674\u0676\5\f\7\2\u0675\u0674\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0677"+
		"\3\2\2\2\u0677\u0678\5\6\4\2\u0678\u0679\78\2\2\u0679\u067a\5\u00e0q\2"+
		"\u067a\u067b\5\u02d0\u0169\2\u067b\u067c\5\u00e0q\2\u067c\u067d\5\u02d2"+
		"\u016a\2\u067d\u0681\5\u00e0q\2\u067e\u067f\5\u02d4\u016b\2\u067f\u0680"+
		"\5\6\4\2\u0680\u0682\3\2\2\2\u0681\u067e\3\2\2\2\u0681\u0682\3\2\2\2\u0682"+
		"\u00cb\3\2\2\2\u0683\u0684\5\u02d6\u016c\2\u0684\u0685\5\u00ceh\2\u0685"+
		"\u00cd\3\2\2\2\u0686\u068b\5\u00d0i\2\u0687\u0688\7}\2\2\u0688\u068a\5"+
		"\u00d0i\2\u0689\u0687\3\2\2\2\u068a\u068d\3\2\2\2\u068b\u0689\3\2\2\2"+
		"\u068b\u068c\3\2\2\2\u068c\u00cf\3\2\2\2\u068d\u068b\3\2\2\2\u068e\u0690"+
		"\5\u00e0q\2\u068f\u0691\5\u00d2j\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2"+
		"\2\2\u0691\u00d1\3\2\2\2\u0692\u0695\5\u02d8\u016d\2\u0693\u0695\5\u02da"+
		"\u016e\2\u0694\u0692\3\2\2\2\u0694\u0693\3\2\2\2\u0695\u00d3\3\2\2\2\u0696"+
		"\u0699\5\u00d6l\2\u0697\u0699\5\u00d8m\2\u0698\u0696\3\2\2\2\u0698\u0697"+
		"\3\2\2\2\u0699\u00d5\3\2\2\2\u069a\u069b\5\u02dc\u016f\2\u069b\u069c\5"+
		"\u00e0q\2\u069c\u00d7\3\2\2\2\u069d\u069e\5\u02de\u0170\2\u069e\u069f"+
		"\5\u00e0q\2\u069f\u06a0\5\u02e0\u0171\2\u06a0\u06a1\5\u00e0q\2\u06a1\u00d9"+
		"\3\2\2\2\u06a2\u06a3\5\u02d4\u016b\2\u06a3\u06a4\5\6\4\2\u06a4\u06a5\5"+
		"\u00bc_\2\u06a5\u00db\3\2\2\2\u06a6\u06a7\5v<\2\u06a7\u06a9\5\u00dep\2"+
		"\u06a8\u06aa\7\22\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab"+
		"\3\2\2\2\u06ab\u06ac\5\u00e0q\2\u06ac\u00dd\3\2\2\2\u06ad\u06b9\7\u008a"+
		"\2\2\u06ae\u06b9\7\u0099\2\2\u06af\u06b9\7\u009a\2\2\u06b0\u06b9\7\u009b"+
		"\2\2\u06b1\u06b9\7\u009c\2\2\u06b2\u06b9\7\u009d\2\2\u06b3\u06b9\7\u009e"+
		"\2\2\u06b4\u06b9\7\u009f\2\2\u06b5\u06b9\7\u00a0\2\2\u06b6\u06b9\7\u00a2"+
		"\2\2\u06b7\u06b9\5\u02f8\u017d\2\u06b8\u06ad\3\2\2\2\u06b8\u06ae\3\2\2"+
		"\2\u06b8\u06af\3\2\2\2\u06b8\u06b0\3\2\2\2\u06b8\u06b1\3\2\2\2\u06b8\u06b2"+
		"\3\2\2\2\u06b8\u06b3\3\2\2\2\u06b8\u06b4\3\2\2\2\u06b8\u06b5\3\2\2\2\u06b8"+
		"\u06b6\3\2\2\2\u06b8\u06b7\3\2\2\2\u06b9\u00df\3\2\2\2\u06ba\u06bd\5\u00dc"+
		"o\2\u06bb\u06bd\5\u00e2r\2\u06bc\u06ba\3\2\2\2\u06bc\u06bb\3\2\2\2\u06bd"+
		"\u00e1\3\2\2\2\u06be\u06c2\5\u00a2R\2\u06bf\u06c2\5\u00b8]\2\u06c0\u06c2"+
		"\5\u00a0Q\2\u06c1\u06be\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1\u06c0\3\2\2"+
		"\2\u06c2\u00e3\3\2\2\2\u06c3\u06c4\5\u00e0q\2\u06c4\u00e5\3\2\2\2\u06c5"+
		"\u06c6\5\u00e0q\2\u06c6\u00e7\3\2\2\2\u06c7\u06cb\5\u00f4{\2\u06c8\u06cb"+
		"\5\u00f6|\2\u06c9\u06cb\5\u00eav\2\u06ca\u06c7\3\2\2\2\u06ca\u06c8\3\2"+
		"\2\2\u06ca\u06c9\3\2\2\2\u06cb\u00e9\3\2\2\2\u06cc\u06cf\5\u00eex\2\u06cd"+
		"\u06cf\5\u00ecw\2\u06ce\u06cc\3\2\2\2\u06ce\u06cd\3\2\2\2\u06cf\u00eb"+
		"\3\2\2\2\u06d0\u06dd\5\u00f2z\2\u06d1\u06dd\5\u0104\u0083\2\u06d2\u06dd"+
		"\5\u0108\u0085\2\u06d3\u06dd\5\u011a\u008e\2\u06d4\u06dd\5\u012c\u0097"+
		"\2\u06d5\u06dd\5\u0138\u009d\2\u06d6\u06dd\5\u0144\u00a3\2\u06d7\u06dd"+
		"\5\u0146\u00a4\2\u06d8\u06dd\5\u0148\u00a5\2\u06d9\u06dd\5\u014a\u00a6"+
		"\2\u06da\u06dd\5\u014e\u00a8\2\u06db\u06dd\5\u029a\u014e\2\u06dc\u06d0"+
		"\3\2\2\2\u06dc\u06d1\3\2\2\2\u06dc\u06d2\3\2\2\2\u06dc\u06d3\3\2\2\2\u06dc"+
		"\u06d4\3\2\2\2\u06dc\u06d5\3\2\2\2\u06dc\u06d6\3\2\2\2\u06dc\u06d7\3\2"+
		"\2\2\u06dc\u06d8\3\2\2\2\u06dc\u06d9\3\2\2\2\u06dc\u06da\3\2\2\2\u06dc"+
		"\u06db\3\2\2\2\u06dd\u00ed\3\2\2\2\u06de\u06e0\7v\2\2\u06df\u06e1\5\u00f0"+
		"y\2\u06e0\u06df\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2"+
		"\u06e3\7w\2\2\u06e3\u00ef\3\2\2\2\u06e4\u06e6\5\u00e8u\2\u06e5\u06e4\3"+
		"\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8"+
		"\u00f1\3\2\2\2\u06e9\u06ea\7\177\2\2\u06ea\u00f3\3\2\2\2\u06eb\u06ec\5"+
		"\6\4\2\u06ec\u06ed\7~\2\2\u06ed\u06ee\5\u00e8u\2\u06ee\u00f5\3\2\2\2\u06ef"+
		"\u06f0\5\u00f8}\2\u06f0\u06f1\7\177\2\2\u06f1\u06f6\3\2\2\2\u06f2\u06f3"+
		"\5\u0102\u0082\2\u06f3\u06f4\7\177\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06ef"+
		"\3\2\2\2\u06f5\u06f2\3\2\2\2\u06f6\u00f7\3\2\2\2\u06f7\u06f8\5\u00fa~"+
		"\2\u06f8\u06f9\5\u00fc\177\2\u06f9\u00f9\3\2\2\2\u06fa\u06fb\5\f\7\2\u06fb"+
		"\u00fb\3\2\2\2\u06fc\u0701\5\u00fe\u0080\2\u06fd\u06fe\7}\2\2\u06fe\u0700"+
		"\5\u00fe\u0080\2\u06ff\u06fd\3\2\2\2\u0700\u0703\3\2\2\2\u0701\u06ff\3"+
		"\2\2\2\u0701\u0702\3\2\2\2\u0702\u00fd\3\2\2\2\u0703\u0701\3\2\2\2\u0704"+
		"\u0707\5\6\4\2\u0705\u0706\7\u008a\2\2\u0706\u0708\5\u0100\u0081\2\u0707"+
		"\u0705\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u00ff\3\2\2\2\u0709\u070d\5\u00e0"+
		"q\2\u070a\u070d\5\u0224\u0113\2\u070b\u070d\5\u02c4\u0163\2\u070c\u0709"+
		"\3\2\2\2\u070c\u070a\3\2\2\2\u070c\u070b\3\2\2\2\u070d\u0101\3\2\2\2\u070e"+
		"\u070f\7\35\2\2\u070f\u0710\5\f\7\2\u0710\u0711\5\u0196\u00cc\2\u0711"+
		"\u0103\3\2\2\2\u0712\u0713\5\u0106\u0084\2\u0713\u0714\7\177\2\2\u0714"+
		"\u0105\3\2\2\2\u0715\u0716\5\u00e0q\2\u0716\u0107\3\2\2\2\u0717\u071a"+
		"\5\u010c\u0087\2\u0718\u071a\5\u010e\u0088\2\u0719\u0717\3\2\2\2\u0719"+
		"\u0718\3\2\2\2\u071a\u0109\3\2\2\2\u071b\u071e\5\u00eex\2\u071c\u071e"+
		"\5\u00ecw\2\u071d\u071b\3\2\2\2\u071d\u071c\3\2\2\2\u071e\u010b\3\2\2"+
		"\2\u071f\u0720\7\66\2\2\u0720\u0721\7z\2\2\u0721\u0722\5\u00e6t\2\u0722"+
		"\u0723\7{\2\2\u0723\u0726\5\u010a\u0086\2\u0724\u0725\7&\2\2\u0725\u0727"+
		"\5\u010a\u0086\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u010d\3"+
		"\2\2\2\u0728\u0729\7^\2\2\u0729\u072a\7z\2\2\u072a\u072b\5\u00e0q\2\u072b"+
		"\u072c\7{\2\2\u072c\u072d\5\u0110\u0089\2\u072d\u010f\3\2\2\2\u072e\u0730"+
		"\7v\2\2\u072f\u0731\5\u0112\u008a\2\u0730\u072f\3\2\2\2\u0730\u0731\3"+
		"\2\2\2\u0731\u0732\3\2\2\2\u0732\u0733\7w\2\2\u0733\u0111\3\2\2\2\u0734"+
		"\u0738\5\u0114\u008b\2\u0735\u0737\5\u0114\u008b\2\u0736\u0735\3\2\2\2"+
		"\u0737\u073a\3\2\2\2\u0738\u0736\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u0113"+
		"\3\2\2\2\u073a\u0738\3\2\2\2\u073b\u073c\5\u0116\u008c\2\u073c\u073d\5"+
		"\u00f0y\2\u073d\u0115\3\2\2\2\u073e\u0742\5\u0118\u008d\2\u073f\u0741"+
		"\5\u0118\u008d\2\u0740\u073f\3\2\2\2\u0741\u0744\3\2\2\2\u0742\u0740\3"+
		"\2\2\2\u0742\u0743\3\2\2\2\u0743\u0117\3\2\2\2\u0744\u0742\3\2\2\2\u0745"+
		"\u0746\7\30\2\2\u0746\u0747\5\u00e4s\2\u0747\u0748\7~\2\2\u0748\u074c"+
		"\3\2\2\2\u0749\u074a\7 \2\2\u074a\u074c\7~\2\2\u074b\u0745\3\2\2\2\u074b"+
		"\u0749\3\2\2\2\u074c\u0119\3\2\2\2\u074d\u0752\5\u011c\u008f\2\u074e\u0752"+
		"\5\u011e\u0090\2\u074f\u0752\5\u0120\u0091\2\u0750\u0752\5\u012a\u0096"+
		"\2\u0751\u074d\3\2\2\2\u0751\u074e\3\2\2\2\u0751\u074f\3\2\2\2\u0751\u0750"+
		"\3\2\2\2\u0752\u011b\3\2\2\2\u0753\u0754\7n\2\2\u0754\u0755\7z\2\2\u0755"+
		"\u0756\5\u00e6t\2\u0756\u0757\7{\2\2\u0757\u0758\5\u00eav\2\u0758\u011d"+
		"\3\2\2\2\u0759\u075a\7#\2\2\u075a\u075b\5\u00eav\2\u075b\u075c\7n\2\2"+
		"\u075c\u075d\7z\2\2\u075d\u075e\5\u00e6t\2\u075e\u075f\7{\2\2\u075f\u0760"+
		"\7\177\2\2\u0760\u011f\3\2\2\2\u0761\u0762\7\60\2\2\u0762\u0764\7z\2\2"+
		"\u0763\u0765\5\u0122\u0092\2\u0764\u0763\3\2\2\2\u0764\u0765\3\2\2\2\u0765"+
		"\u0766\3\2\2\2\u0766\u0768\7\177\2\2\u0767\u0769\5\u0124\u0093\2\u0768"+
		"\u0767\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076c\7\177"+
		"\2\2\u076b\u076d\5\u0126\u0094\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2"+
		"\2\u076d\u076e\3\2\2\2\u076e\u076f\7{\2\2\u076f\u0770\5\u00eav\2\u0770"+
		"\u0121\3\2\2\2\u0771\u0774\5\u00f8}\2\u0772\u0774\5\u0128\u0095\2\u0773"+
		"\u0771\3\2\2\2\u0773\u0772\3\2\2\2\u0774\u0123\3\2\2\2\u0775\u0776\5\u00e6"+
		"t\2\u0776\u0125\3\2\2\2\u0777\u0778\5\u0128\u0095\2\u0778\u0127\3\2\2"+
		"\2\u0779\u077e\5\u0106\u0084\2\u077a\u077b\7}\2\2\u077b\u077d\5\u0106"+
		"\u0084\2\u077c\u077a\3\2\2\2\u077d\u0780\3\2\2\2\u077e\u077c\3\2\2\2\u077e"+
		"\u077f\3\2\2\2\u077f\u0129\3\2\2\2\u0780\u077e\3\2\2\2\u0781\u0782\7\61"+
		"\2\2\u0782\u0783\7z\2\2\u0783\u0784\5\u00fa~\2\u0784\u0785\5\6\4\2\u0785"+
		"\u0786\78\2\2\u0786\u0787\5\u00e0q\2\u0787\u0788\7{\2\2\u0788\u0789\5"+
		"\u00eav\2\u0789\u012b\3\2\2\2\u078a\u0790\5\u012e\u0098\2\u078b\u0790"+
		"\5\u0130\u0099\2\u078c\u0790\5\u0132\u009a\2\u078d\u0790\5\u0134\u009b"+
		"\2\u078e\u0790\5\u0136\u009c\2\u078f\u078a\3\2\2\2\u078f\u078b\3\2\2\2"+
		"\u078f\u078c\3\2\2\2\u078f\u078d\3\2\2\2\u078f\u078e\3\2\2\2\u0790\u012d"+
		"\3\2\2\2\u0791\u0792\7\25\2\2\u0792\u0793\7\177\2\2\u0793\u012f\3\2\2"+
		"\2\u0794\u0795\7\36\2\2\u0795\u0796\7\177\2\2\u0796\u0131\3\2\2\2\u0797"+
		"\u0798\7\64\2\2\u0798\u0799\5\6\4\2\u0799\u079a\7\177\2\2\u079a\u07a4"+
		"\3\2\2\2\u079b\u079c\7\64\2\2\u079c\u079d\7\30\2\2\u079d\u079e\5\u00e4"+
		"s\2\u079e\u079f\7\177\2\2\u079f\u07a4\3\2\2\2\u07a0\u07a1\7\64\2\2\u07a1"+
		"\u07a2\7 \2\2\u07a2\u07a4\7\177\2\2\u07a3\u0797\3\2\2\2\u07a3\u079b\3"+
		"\2\2\2\u07a3\u07a0\3\2\2\2\u07a4\u0133\3\2\2\2\u07a5\u07a7\7S\2\2\u07a6"+
		"\u07a8\5\u00e0q\2\u07a7\u07a6\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07a9"+
		"\3\2\2\2\u07a9\u07aa\7\177\2\2\u07aa\u0135\3\2\2\2\u07ab\u07ad\7`\2\2"+
		"\u07ac\u07ae\5\u00e0q\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae"+
		"\u07af\3\2\2\2\u07af\u07b0\7\177\2\2\u07b0\u0137\3\2\2\2\u07b1\u07b2\7"+
		"b\2\2\u07b2\u07b4\5\u00eex\2\u07b3\u07b5\5\u013a\u009e\2\u07b4\u07b3\3"+
		"\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7\3\2\2\2\u07b6\u07b8\5\u0142\u00a2"+
		"\2\u07b7\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u0139\3\2\2\2\u07b9\u07bb"+
		"\5\u013c\u009f\2\u07ba\u07bc\5\u0140\u00a1\2\u07bb\u07ba\3\2\2\2\u07bb"+
		"\u07bc\3\2\2\2\u07bc\u07bf\3\2\2\2\u07bd\u07bf\5\u0140\u00a1\2\u07be\u07b9"+
		"\3\2\2\2\u07be\u07bd\3\2\2\2\u07bf\u013b\3\2\2\2\u07c0\u07c4\5\u013e\u00a0"+
		"\2\u07c1\u07c3\5\u013e\u00a0\2\u07c2\u07c1\3\2\2\2\u07c3\u07c6\3\2\2\2"+
		"\u07c4\u07c2\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u013d\3\2\2\2\u07c6\u07c4"+
		"\3\2\2\2\u07c7\u07c8\7\31\2\2\u07c8\u07c9\7z\2\2\u07c9\u07cb\5\36\20\2"+
		"\u07ca\u07cc\5\6\4\2\u07cb\u07ca\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cd"+
		"\3\2\2\2\u07cd\u07ce\7{\2\2\u07ce\u07cf\5\u00eex\2\u07cf\u013f\3\2\2\2"+
		"\u07d0\u07d1\7\31\2\2\u07d1\u07d2\5\u00eex\2\u07d2\u0141\3\2\2\2\u07d3"+
		"\u07d4\7-\2\2\u07d4\u07d5\5\u00eex\2\u07d5\u0143\3\2\2\2\u07d6\u07d7\7"+
		"\33\2\2\u07d7\u07d8\5\u00eex\2\u07d8\u0145\3\2\2\2\u07d9\u07da\7f\2\2"+
		"\u07da\u07db\5\u00eex\2\u07db\u0147\3\2\2\2\u07dc\u07dd\7@\2\2\u07dd\u07de"+
		"\7z\2\2\u07de\u07df\5\u00e0q\2\u07df\u07e0\7{\2\2\u07e0\u07e1\5\u00ea"+
		"v\2\u07e1\u0149\3\2\2\2\u07e2\u07e3\7i\2\2\u07e3\u07e4\7z\2\2\u07e4\u07e5"+
		"\5\u014c\u00a7\2\u07e5\u07e6\7{\2\2\u07e6\u07e7\5\u00eav\2\u07e7\u014b"+
		"\3\2\2\2\u07e8\u07eb\5\u00f8}\2\u07e9\u07eb\5\u00e0q\2\u07ea\u07e8\3\2"+
		"\2\2\u07ea\u07e9\3\2\2\2\u07eb\u014d\3\2\2\2\u07ec\u07ed\5\u02e6\u0174"+
		"\2\u07ed\u07ee\7S\2\2\u07ee\u07ef\5\u00e0q\2\u07ef\u07f0\7\177\2\2\u07f0"+
		"\u07f6\3\2\2\2\u07f1\u07f2\5\u02e6\u0174\2\u07f2\u07f3\7\25\2\2\u07f3"+
		"\u07f4\7\177\2\2\u07f4\u07f6\3\2\2\2\u07f5\u07ec\3\2\2\2\u07f5\u07f1\3"+
		"\2\2\2\u07f6\u014f\3\2\2\2\u07f7\u07f9\7\4\2\2\u07f8\u07f7\3\2\2\2\u07f8"+
		"\u07f9\3\2\2\2\u07f9\u07fb\3\2\2\2\u07fa\u07fc\5\u0158\u00ad\2\u07fb\u07fa"+
		"\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fe\3\2\2\2\u07fd\u07ff\5\u015c\u00af"+
		"\2\u07fe\u07fd\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0803\3\2\2\2\u0800\u0802"+
		"\5\u025e\u0130\2\u0801\u0800\3\2\2\2\u0802\u0805\3\2\2\2\u0803\u0801\3"+
		"\2\2\2\u0803\u0804\3\2\2\2\u0804\u0807\3\2\2\2\u0805\u0803\3\2\2\2\u0806"+
		"\u0808\5\u0164\u00b3\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0809"+
		"\3\2\2\2\u0809\u080a\7\2\2\3\u080a\u0151\3\2\2\2\u080b\u080c\7B\2\2\u080c"+
		"\u080d\5\u0154\u00ab\2\u080d\u080f\5\u0156\u00ac\2\u080e\u0810\7\177\2"+
		"\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0153\3\2\2\2\u0811\u0816"+
		"\5\6\4\2\u0812\u0813\7|\2\2\u0813\u0815\5\6\4\2\u0814\u0812\3\2\2\2\u0815"+
		"\u0818\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0155\3\2"+
		"\2\2\u0818\u0816\3\2\2\2\u0819\u081b\7v\2\2\u081a\u081c\5\u0158\u00ad"+
		"\2\u081b\u081a\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081e\3\2\2\2\u081d\u081f"+
		"\5\u015c\u00af\2\u081e\u081d\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0821\3"+
		"\2\2\2\u0820\u0822\5\u0164\u00b3\2\u0821\u0820\3\2\2\2\u0821\u0822\3\2"+
		"\2\2\u0822\u0823\3\2\2\2\u0823\u0824\7w\2\2\u0824\u0157\3\2\2\2\u0825"+
		"\u0827\5\u015a\u00ae\2\u0826\u0825\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u0826"+
		"\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u0159\3\2\2\2\u082a\u082b\7+\2\2\u082b"+
		"\u082c\5\u02e4\u0173\2\u082c\u082d\5\6\4\2\u082d\u082e\7\177\2\2\u082e"+
		"\u015b\3\2\2\2\u082f\u0831\5\u015e\u00b0\2\u0830\u082f\3\2\2\2\u0831\u0832"+
		"\3\2\2\2\u0832\u0830\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u015d\3\2\2\2\u0834"+
		"\u0837\5\u0160\u00b1\2\u0835\u0837\5\u0162\u00b2\2\u0836\u0834\3\2\2\2"+
		"\u0836\u0835\3\2\2\2\u0837\u015f\3\2\2\2\u0838\u0839\7i\2\2\u0839\u083a"+
		"\5\6\4\2\u083a\u083b\7\u008a\2\2\u083b\u083c\5\b\5\2\u083c\u083d\7\177"+
		"\2\2\u083d\u0161\3\2\2\2\u083e\u083f\7i\2\2\u083f\u0840\5\2\2\2\u0840"+
		"\u0841\7\177\2\2\u0841\u0163\3\2\2\2\u0842\u0844\5\u0166\u00b4\2\u0843"+
		"\u0842\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0843\3\2\2\2\u0845\u0846\3\2"+
		"\2\2\u0846\u0165\3\2\2\2\u0847\u084a\5\u0152\u00aa\2\u0848\u084a\5\u0168"+
		"\u00b5\2\u0849\u0847\3\2\2\2\u0849\u0848\3\2\2\2\u084a\u0167\3\2\2\2\u084b"+
		"\u084d\5\u0264\u0133\2\u084c\u084b\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084f"+
		"\3\2\2\2\u084e\u0850\5\u018e\u00c8\2\u084f\u084e\3\2\2\2\u084f\u0850\3"+
		"\2\2\2\u0850\u0856\3\2\2\2\u0851\u0857\5\u0300\u0181\2\u0852\u0857\5\u0302"+
		"\u0182\2\u0853\u0857\5\u0304\u0183\2\u0854\u0857\5\u0306\u0184\2\u0855"+
		"\u0857\5\u0308\u0185\2\u0856\u0851\3\2\2\2\u0856\u0852\3\2\2\2\u0856\u0853"+
		"\3\2\2\2\u0856\u0854\3\2\2\2\u0856\u0855\3\2\2\2\u0857\u0169\3\2\2\2\u0858"+
		"\u0859\5\6\4\2\u0859\u085a\7\u008e\2\2\u085a\u085b\5\6\4\2\u085b\u085c"+
		"\5\n\6\2\u085c\u016b\3\2\2\2\u085d\u085f\5\u0264\u0133\2\u085e\u085d\3"+
		"\2\2\2\u085e\u085f\3\2\2\2\u085f\u0861\3\2\2\2\u0860\u0862\5\u016e\u00b8"+
		"\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864\3\2\2\2\u0863\u0865"+
		"\5\u02e2\u0172\2\u0864\u0863\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u0866\3"+
		"\2\2\2\u0866\u0867\7\34\2\2\u0867\u0869\5\6\4\2\u0868\u086a\5\u0172\u00ba"+
		"\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086c\3\2\2\2\u086b\u086d"+
		"\5\u0178\u00bd\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086f\3"+
		"\2\2\2\u086e\u0870\5\u017c\u00bf\2\u086f\u086e\3\2\2\2\u086f\u0870\3\2"+
		"\2\2\u0870\u0871\3\2\2\2\u0871\u0873\5\u0188\u00c5\2\u0872\u0874\7\177"+
		"\2\2\u0873\u0872\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u016d\3\2\2\2\u0875"+
		"\u0879\5\u0170\u00b9\2\u0876\u0878\5\u0170\u00b9\2\u0877\u0876\3\2\2\2"+
		"\u0878\u087b\3\2\2\2\u0879\u0877\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u016f"+
		"\3\2\2\2\u087b\u0879\3\2\2\2\u087c\u0886\7C\2\2\u087d\u0886\7O\2\2\u087e"+
		"\u0886\7N\2\2\u087f\u0886\7;\2\2\u0880\u0886\7M\2\2\u0881\u0886\7\13\2"+
		"\2\u0882\u0886\7U\2\2\u0883\u0886\7[\2\2\u0884\u0886\5\u0280\u0141\2\u0885"+
		"\u087c\3\2\2\2\u0885\u087d\3\2\2\2\u0885\u087e\3\2\2\2\u0885\u087f\3\2"+
		"\2\2\u0885\u0880\3\2\2\2\u0885\u0881\3\2\2\2\u0885\u0882\3\2\2\2\u0885"+
		"\u0883\3\2\2\2\u0885\u0884\3\2\2\2\u0886\u0171\3\2\2\2\u0887\u0888\7\u008b"+
		"\2\2\u0888\u0889\5\u0174\u00bb\2\u0889\u088a\7\u008c\2\2\u088a\u0173\3"+
		"\2\2\2\u088b\u088d\5\u0264\u0133\2\u088c\u088b\3\2\2\2\u088c\u088d\3\2"+
		"\2\2\u088d\u088e\3\2\2\2\u088e\u0896\5\u0176\u00bc\2\u088f\u0891\7}\2"+
		"\2\u0890\u0892\5\u0264\u0133\2\u0891\u0890\3\2\2\2\u0891\u0892\3\2\2\2"+
		"\u0892\u0893\3\2\2\2\u0893\u0895\5\u0176\u00bc\2\u0894\u088f\3\2\2\2\u0895"+
		"\u0898\3\2\2\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0175\3\2"+
		"\2\2\u0898\u0896\3\2\2\2\u0899\u089a\5\6\4\2\u089a\u0177\3\2\2\2\u089b"+
		"\u089c\7~\2\2\u089c\u08a1\5\36\20\2\u089d\u089e\7}\2\2\u089e\u08a0\5 "+
		"\21\2\u089f\u089d\3\2\2\2\u08a0\u08a3\3\2\2\2\u08a1\u089f\3\2\2\2\u08a1"+
		"\u08a2\3\2\2\2\u08a2\u0179\3\2\2\2\u08a3\u08a1\3\2\2\2\u08a4\u08a9\5 "+
		"\21\2\u08a5\u08a6\7}\2\2\u08a6\u08a8\5 \21\2\u08a7\u08a5\3\2\2\2\u08a8"+
		"\u08ab\3\2\2\2\u08a9\u08a7\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa\u017b\3\2"+
		"\2\2\u08ab\u08a9\3\2\2\2\u08ac\u08b0\5\u017e\u00c0\2\u08ad\u08af\5\u017e"+
		"\u00c0\2\u08ae\u08ad\3\2\2\2\u08af\u08b2\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b0"+
		"\u08b1\3\2\2\2\u08b1\u017d\3\2\2\2\u08b2\u08b0\3\2\2\2\u08b3\u08b4\5\u02cc"+
		"\u0167\2\u08b4\u08b5\5\u0176\u00bc\2\u08b5\u08b6\7~\2\2\u08b6\u08b7\5"+
		"\u0180\u00c1\2\u08b7\u017f\3\2\2\2\u08b8\u08c3\5\u0186\u00c4\2\u08b9\u08bc"+
		"\5\u0182\u00c2\2\u08ba\u08bb\7}\2\2\u08bb\u08bd\5\u0184\u00c3\2\u08bc"+
		"\u08ba\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08c0\3\2\2\2\u08be\u08bf\7}"+
		"\2\2\u08bf\u08c1\5\u0186\u00c4\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2\2"+
		"\2\u08c1\u08c3\3\2\2\2\u08c2\u08b8\3\2\2\2\u08c2\u08b9\3\2\2\2\u08c3\u0181"+
		"\3\2\2\2\u08c4\u08c8\5\36\20\2\u08c5";
	private static final String _serializedATNSegment1 =
		"\u08c8\7\34\2\2\u08c6\u08c8\7]\2\2\u08c7\u08c4\3\2\2\2\u08c7\u08c5\3\2"+
		"\2\2\u08c7\u08c6\3\2\2\2\u08c8\u0183\3\2\2\2\u08c9\u08ce\5 \21\2\u08ca"+
		"\u08cb\7}\2\2\u08cb\u08cd\5 \21\2\u08cc\u08ca\3\2\2\2\u08cd\u08d0\3\2"+
		"\2\2\u08ce\u08cc\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u0185\3\2\2\2\u08d0"+
		"\u08ce\3\2\2\2\u08d1\u08d2\7C\2\2\u08d2\u08d3\7z\2\2\u08d3\u08d4\7{\2"+
		"\2\u08d4\u0187\3\2\2\2\u08d5\u08d7\7v\2\2\u08d6\u08d8\5\u018a\u00c6\2"+
		"\u08d7\u08d6\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08da"+
		"\7w\2\2\u08da\u0189\3\2\2\2\u08db\u08dd\5\u018c\u00c7\2\u08dc\u08db\3"+
		"\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08dc\3\2\2\2\u08de\u08df\3\2\2\2\u08df"+
		"\u018b\3\2\2\2\u08e0\u08e2\5\u0264\u0133\2\u08e1\u08e0\3\2\2\2\u08e1\u08e2"+
		"\3\2\2\2\u08e2\u08e4\3\2\2\2\u08e3\u08e5\5\u018e\u00c8\2\u08e4\u08e3\3"+
		"\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08ed\3\2\2\2\u08e6\u08ee\5\u0192\u00ca"+
		"\2\u08e7\u08e8\7\u0089\2\2\u08e8\u08e9\5\6\4\2\u08e9\u08ea\7z\2\2\u08ea"+
		"\u08eb\7{\2\2\u08eb\u08ec\5\u0208\u0105\2\u08ec\u08ee\3\2\2\2\u08ed\u08e6"+
		"\3\2\2\2\u08ed\u08e7\3\2\2\2\u08ee\u08f1\3\2\2\2\u08ef\u08f1\7\3\2\2\u08f0"+
		"\u08e1\3\2\2\2\u08f0\u08ef\3\2\2\2\u08f1\u018d\3\2\2\2\u08f2\u08f4\5\u0190"+
		"\u00c9\2\u08f3\u08f2\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f3\3\2\2\2\u08f5"+
		"\u08f6\3\2\2\2\u08f6\u018f\3\2\2\2\u08f7\u0908\7C\2\2\u08f8\u0908\7O\2"+
		"\2\u08f9\u0908\7N\2\2\u08fa\u0908\7;\2\2\u08fb\u0908\7M\2\2\u08fc\u0908"+
		"\7P\2\2\u08fd\u0908\7l\2\2\u08fe\u0908\7j\2\2\u08ff\u0908\7U\2\2\u0900"+
		"\u0908\7J\2\2\u0901\u0908\7\13\2\2\u0902\u0908\7\21\2\2\u0903\u0908\7"+
		"[\2\2\u0904\u0908\7g\2\2\u0905\u0908\7+\2\2\u0906\u0908\5\u02e2\u0172"+
		"\2\u0907\u08f7\3\2\2\2\u0907\u08f8\3\2\2\2\u0907\u08f9\3\2\2\2\u0907\u08fa"+
		"\3\2\2\2\u0907\u08fb\3\2\2\2\u0907\u08fc\3\2\2\2\u0907\u08fd\3\2\2\2\u0907"+
		"\u08fe\3\2\2\2\u0907\u08ff\3\2\2\2\u0907\u0900\3\2\2\2\u0907\u0901\3\2"+
		"\2\2\u0907\u0902\3\2\2\2\u0907\u0903\3\2\2\2\u0907\u0904\3\2\2\2\u0907"+
		"\u0905\3\2\2\2\u0907\u0906\3\2\2\2\u0908\u0191\3\2\2\2\u0909\u0919\5\u0310"+
		"\u0189\2\u090a\u0919\5\u0194\u00cb\2\u090b\u0919\5\u030a\u0186\2\u090c"+
		"\u090d\5\u01f0\u00f9\2\u090d\u090e\5\u01f2\u00fa\2\u090e\u0919\3\2\2\2"+
		"\u090f\u0919\5\u0316\u018c\2\u0910\u0911\5*\26\2\u0911\u0912\5\u0318\u018d"+
		"\2\u0912\u0919\3\2\2\2\u0913\u0919\5\u0300\u0181\2\u0914\u0919\5\u0302"+
		"\u0182\2\u0915\u0919\5\u0304\u0183\2\u0916\u0919\5\u0306\u0184\2\u0917"+
		"\u0919\5\u0308\u0185\2\u0918\u0909\3\2\2\2\u0918\u090a\3\2\2\2\u0918\u090b"+
		"\3\2\2\2\u0918\u090c\3\2\2\2\u0918\u090f\3\2\2\2\u0918\u0910\3\2\2\2\u0918"+
		"\u0913\3\2\2\2\u0918\u0914\3\2\2\2\u0918\u0915\3\2\2\2\u0918\u0916\3\2"+
		"\2\2\u0918\u0917\3\2\2\2\u0919\u0193\3\2\2\2\u091a\u0924\5\f\7\2\u091b"+
		"\u091c\5 \21\2\u091c\u091d\7|\2\2\u091d\u091e\5\u0312\u018a\2\u091e\u0925"+
		"\3\2\2\2\u091f\u0925\5\u0318\u018d\2\u0920\u0925\5\u030e\u0188\2\u0921"+
		"\u0925\5\u0312\u018a\2\u0922\u0925\5\u031e\u0190\2\u0923\u0925\5\u030c"+
		"\u0187\2\u0924\u091b\3\2\2\2\u0924\u091f\3\2\2\2\u0924\u0920\3\2\2\2\u0924"+
		"\u0921\3\2\2\2\u0924\u0922\3\2\2\2\u0924\u0923\3\2\2\2\u0925\u0195\3\2"+
		"\2\2\u0926\u092b\5\u0198\u00cd\2\u0927\u0928\7}\2\2\u0928\u092a\5\u0198"+
		"\u00cd\2\u0929\u0927\3\2\2\2\u092a\u092d\3\2\2\2\u092b\u0929\3\2\2\2\u092b"+
		"\u092c\3\2\2\2\u092c\u0197\3\2\2\2\u092d\u092b\3\2\2\2\u092e\u092f\5\6"+
		"\4\2\u092f\u0930\7\u008a\2\2\u0930\u0931\5\u00e4s\2\u0931\u0199\3\2\2"+
		"\2\u0932\u0937\5\u019c\u00cf\2\u0933\u0934\7}\2\2\u0934\u0936\5\u019c"+
		"\u00cf\2\u0935\u0933\3\2\2\2\u0936\u0939\3\2\2\2\u0937\u0935\3\2\2\2\u0937"+
		"\u0938\3\2\2\2\u0938\u019b\3\2\2\2\u0939\u0937\3\2\2\2\u093a\u0940\5\6"+
		"\4\2\u093b\u093c\5\6\4\2\u093c\u093d\7\u008a\2\2\u093d\u093e\5\u019e\u00d0"+
		"\2\u093e\u0940\3\2\2\2\u093f\u093a\3\2\2\2\u093f\u093b\3\2\2\2\u0940\u019d"+
		"\3\2\2\2\u0941\u0944\5\u00e0q\2\u0942\u0944\5\u0224\u0113\2\u0943\u0941"+
		"\3\2\2\2\u0943\u0942\3\2\2\2\u0944\u019f\3\2\2\2\u0945\u0946\5\u01a2\u00d2"+
		"\2\u0946\u0947\5\u01ac\u00d7\2\u0947\u01a1\3\2\2\2\u0948\u094a\5\u0264"+
		"\u0133\2\u0949\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c\3\2\2\2\u094b"+
		"\u094d\5\u01a4\u00d3\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094f"+
		"\3\2\2\2\u094e\u0950\5\u02e2\u0172\2\u094f\u094e\3\2\2\2\u094f\u0950\3"+
		"\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\5\u01a8\u00d5\2\u0952\u0954\5\u01aa"+
		"\u00d6\2\u0953\u0955\5\u0172\u00ba\2\u0954\u0953\3\2\2\2\u0954\u0955\3"+
		"\2\2\2\u0955\u0956\3\2\2\2\u0956\u0958\7z\2\2\u0957\u0959\5\u01ae\u00d8"+
		"\2\u0958\u0957\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u095c"+
		"\7{\2\2\u095b\u095d\5\u017c\u00bf\2\u095c\u095b\3\2\2\2\u095c\u095d\3"+
		"\2\2\2\u095d\u01a3\3\2\2\2\u095e\u0960\5\u01a6\u00d4\2\u095f\u095e\3\2"+
		"\2\2\u0960\u0961\3\2\2\2\u0961\u095f\3\2\2\2\u0961\u0962\3\2\2\2\u0962"+
		"\u01a5\3\2\2\2\u0963\u0971\7C\2\2\u0964\u0971\7O\2\2\u0965\u0971\7N\2"+
		"\2\u0966\u0971\7;\2\2\u0967\u0971\7M\2\2\u0968\u0971\7[\2\2\u0969\u0971"+
		"\7j\2\2\u096a\u0971\7U\2\2\u096b\u0971\7J\2\2\u096c\u0971\7\13\2\2\u096d"+
		"\u0971\7+\2\2\u096e\u0971\7\21\2\2\u096f\u0971\5\u028a\u0146\2\u0970\u0963"+
		"\3\2\2\2\u0970\u0964\3\2\2\2\u0970\u0965\3\2\2\2\u0970\u0966\3\2\2\2\u0970"+
		"\u0967\3\2\2\2\u0970\u0968\3\2\2\2\u0970\u0969\3\2\2\2\u0970\u096a\3\2"+
		"\2\2\u0970\u096b\3\2\2\2\u0970\u096c\3\2\2\2\u0970\u096d\3\2\2\2\u0970"+
		"\u096e\3\2\2\2\u0970\u096f\3\2\2\2\u0971\u01a7\3\2\2\2\u0972\u0975\5\f"+
		"\7\2\u0973\u0975\7k\2\2\u0974\u0972\3\2\2\2\u0974\u0973\3\2\2\2\u0975"+
		"\u01a9\3\2\2\2\u0976\u0977\5 \21\2\u0977\u01ab\3\2\2\2\u0978\u097b\5\u00ee"+
		"x\2\u0979\u097b\7\177\2\2\u097a\u0978\3\2\2\2\u097a\u0979\3\2\2\2\u097b"+
		"\u01ad\3\2\2\2\u097c\u0983\5\u01b8\u00dd\2\u097d\u0980\5\u01b0\u00d9\2"+
		"\u097e\u097f\7}\2\2\u097f\u0981\5\u01b8\u00dd\2\u0980\u097e\3\2\2\2\u0980"+
		"\u0981\3\2\2\2\u0981\u0983\3\2\2\2\u0982\u097c\3\2\2\2\u0982\u097d\3\2"+
		"\2\2\u0983\u01af\3\2\2\2\u0984\u0989\5\u01b2\u00da\2\u0985\u0986\7}\2"+
		"\2\u0986\u0988\5\u01b2\u00da\2\u0987\u0985\3\2\2\2\u0988\u098b\3\2\2\2"+
		"\u0989\u0987\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u01b1\3\2\2\2\u098b\u0989"+
		"\3\2\2\2\u098c\u098e\5\u0264\u0133\2\u098d\u098c\3\2\2\2\u098d\u098e\3"+
		"\2\2\2\u098e\u0990\3\2\2\2\u098f\u0991\5\u01b6\u00dc\2\u0990\u098f\3\2"+
		"\2\2\u0990\u0991\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0993\5\f\7\2\u0993"+
		"\u0995\5\6\4\2\u0994\u0996\5\u01b4\u00db\2\u0995\u0994\3\2\2\2\u0995\u0996"+
		"\3\2\2\2\u0996\u0999\3\2\2\2\u0997\u0999\5\u02f2\u017a\2\u0998\u098d\3"+
		"\2\2\2\u0998\u0997\3\2\2\2\u0999\u01b3\3\2\2\2\u099a\u099b\7\u008a\2\2"+
		"\u099b\u099c\5\u00e0q\2\u099c\u01b5\3\2\2\2\u099d\u099e\t\n\2\2\u099e"+
		"\u01b7\3\2\2\2\u099f\u09a1\5\u0264\u0133\2\u09a0\u099f\3\2\2\2\u09a0\u09a1"+
		"\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u09a3\7K\2\2\u09a3\u09a4\5\u021a\u010e"+
		"\2\u09a4\u09a5\5\6\4\2\u09a5\u01b9\3\2\2\2\u09a6\u09a8\5\u0264\u0133\2"+
		"\u09a7\u09a6\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09aa\3\2\2\2\u09a9\u09ab"+
		"\5\u01bc\u00df\2\u09aa\u09a9\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ac\3"+
		"\2\2\2\u09ac\u09ad\5\f\7\2\u09ad\u09ae\5\u01aa\u00d6\2\u09ae\u09af\7v"+
		"\2\2\u09af\u09b0\5\u01c0\u00e1\2\u09b0\u09b1\7w\2\2\u09b1\u01bb\3\2\2"+
		"\2\u09b2\u09b4\5\u01be\u00e0\2\u09b3\u09b2\3\2\2\2\u09b4\u09b5\3\2\2\2"+
		"\u09b5\u09b3\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u01bd\3\2\2\2\u09b7\u09c4"+
		"\7C\2\2\u09b8\u09c4\7O\2\2\u09b9\u09c4\7N\2\2\u09ba\u09c4\7;\2\2\u09bb"+
		"\u09c4\7M\2\2\u09bc\u09c4\7[\2\2\u09bd\u09c4\7j\2\2\u09be\u09c4\7U\2\2"+
		"\u09bf\u09c4\7J\2\2\u09c0\u09c4\7\13\2\2\u09c1\u09c4\7+\2\2\u09c2\u09c4"+
		"\5\u028c\u0147\2\u09c3\u09b7\3\2\2\2\u09c3\u09b8\3\2\2\2\u09c3\u09b9\3"+
		"\2\2\2\u09c3\u09ba\3\2\2\2\u09c3\u09bb\3\2\2\2\u09c3\u09bc\3\2\2\2\u09c3"+
		"\u09bd\3\2\2\2\u09c3\u09be\3\2\2\2\u09c3\u09bf\3\2\2\2\u09c3\u09c0\3\2"+
		"\2\2\u09c3\u09c1\3\2\2\2\u09c3\u09c2\3\2\2\2\u09c4\u01bf\3\2\2\2\u09c5"+
		"\u09c7\5\u0264\u0133\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c9"+
		"\3\2\2\2\u09c8\u09ca\5\u01c6\u00e4\2\u09c9\u09c8\3\2\2\2\u09c9\u09ca\3"+
		"\2\2\2\u09ca\u09d5\3\2\2\2\u09cb\u09cc\5\u02e8\u0175\2\u09cc\u09ce\5\u01c8"+
		"\u00e5\2\u09cd\u09cf\5\u01c4\u00e3\2\u09ce\u09cd\3\2\2\2\u09ce\u09cf\3"+
		"\2\2\2\u09cf\u09d6\3\2\2\2\u09d0\u09d1\5\u02ea\u0176\2\u09d1\u09d3\5\u01c8"+
		"\u00e5\2\u09d2\u09d4\5\u01c2\u00e2\2\u09d3\u09d2\3\2\2\2\u09d3\u09d4\3"+
		"\2\2\2\u09d4\u09d6\3\2\2\2\u09d5\u09cb\3\2\2\2\u09d5\u09d0\3\2\2\2\u09d6"+
		"\u01c1\3\2\2\2\u09d7\u09d9\5\u0264\u0133\2\u09d8\u09d7\3\2\2\2\u09d8\u09d9"+
		"\3\2\2\2\u09d9\u09db\3\2\2\2\u09da\u09dc\5\u01c6\u00e4\2\u09db\u09da\3"+
		"\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09dd\3\2\2\2\u09dd\u09de\5\u02e8\u0175"+
		"\2\u09de\u09df\5\u01c8\u00e5\2\u09df\u01c3\3\2\2\2\u09e0\u09e2\5\u0264"+
		"\u0133\2\u09e1\u09e0\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e4\3\2\2\2\u09e3"+
		"\u09e5\5\u01c6\u00e4\2\u09e4\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e6"+
		"\3\2\2\2\u09e6\u09e7\5\u02ea\u0176\2\u09e7\u09e8\5\u01c8\u00e5\2\u09e8"+
		"\u01c5\3\2\2\2\u09e9\u09f1\7N\2\2\u09ea\u09f1\7;\2\2\u09eb\u09f1\7M\2"+
		"\2\u09ec\u09ed\7N\2\2\u09ed\u09f1\7;\2\2\u09ee\u09ef\7;\2\2\u09ef\u09f1"+
		"\7N\2\2\u09f0\u09e9\3\2\2\2\u09f0\u09ea\3\2\2\2\u09f0\u09eb\3\2\2\2\u09f0"+
		"\u09ec\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f1\u01c7\3\2\2\2\u09f2\u09f5\5\u00ee"+
		"x\2\u09f3\u09f5\7\177\2\2\u09f4\u09f2\3\2\2\2\u09f4\u09f3\3\2\2\2\u09f5"+
		"\u01c9\3\2\2\2\u09f6\u09f8\5\u0264\u0133\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8"+
		"\3\2\2\2\u09f8\u09fa\3\2\2\2\u09f9\u09fb\5\u01cc\u00e7\2\u09fa\u09f9\3"+
		"\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd\7)\2\2\u09fd"+
		"\u0a06\5\f\7\2\u09fe\u09ff\5\u019a\u00ce\2\u09ff\u0a00\7\177\2\2\u0a00"+
		"\u0a07\3\2\2\2\u0a01\u0a02\5\u01aa\u00d6\2\u0a02\u0a03\7v\2\2\u0a03\u0a04"+
		"\5\u01d0\u00e9\2\u0a04\u0a05\7w\2\2\u0a05\u0a07\3\2\2\2\u0a06\u09fe\3"+
		"\2\2\2\u0a06\u0a01\3\2\2\2\u0a07\u01cb\3\2\2\2\u0a08\u0a0c\5\u01ce\u00e8"+
		"\2\u0a09\u0a0b\5\u01ce\u00e8\2\u0a0a\u0a09\3\2\2\2\u0a0b\u0a0e\3\2\2\2"+
		"\u0a0c\u0a0a\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u01cd\3\2\2\2\u0a0e\u0a0c"+
		"\3\2\2\2\u0a0f\u0a1d\7C\2\2\u0a10\u0a1d\7O\2\2\u0a11\u0a1d\7N\2\2\u0a12"+
		"\u0a1d\7;\2\2\u0a13\u0a1d\7M\2\2\u0a14\u0a1d\7[\2\2\u0a15\u0a1d\7j\2\2"+
		"\u0a16\u0a1d\7U\2\2\u0a17\u0a1d\7J\2\2\u0a18\u0a1d\7\13\2\2\u0a19\u0a1d"+
		"\7+\2\2\u0a1a\u0a1d\7\21\2\2\u0a1b\u0a1d\5\u028e\u0148\2\u0a1c\u0a0f\3"+
		"\2\2\2\u0a1c\u0a10\3\2\2\2\u0a1c\u0a11\3\2\2\2\u0a1c\u0a12\3\2\2\2\u0a1c"+
		"\u0a13\3\2\2\2\u0a1c\u0a14\3\2\2\2\u0a1c\u0a15\3\2\2\2\u0a1c\u0a16\3\2"+
		"\2\2\u0a1c\u0a17\3\2\2\2\u0a1c\u0a18\3\2\2\2\u0a1c\u0a19\3\2\2\2\u0a1c"+
		"\u0a1a\3\2\2\2\u0a1c\u0a1b\3\2\2\2\u0a1d\u01cf\3\2\2\2\u0a1e\u0a20\5\u0264"+
		"\u0133\2\u0a1f\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a29\3\2\2\2\u0a21"+
		"\u0a22\5\u02ec\u0177\2\u0a22\u0a23\5\u00eex\2\u0a23\u0a24\5\u01d4\u00eb"+
		"\2\u0a24\u0a2a\3\2\2\2\u0a25\u0a26\5\u02ee\u0178\2\u0a26\u0a27\5\u00ee"+
		"x\2\u0a27\u0a28\5\u01d2\u00ea\2\u0a28\u0a2a\3\2\2\2\u0a29\u0a21\3\2\2"+
		"\2\u0a29\u0a25\3\2\2\2\u0a2a\u01d1\3\2\2\2\u0a2b\u0a2d\5\u0264\u0133\2"+
		"\u0a2c\u0a2b\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u0a2f"+
		"\5\u02ec\u0177\2\u0a2f\u0a30\5\u00eex\2\u0a30\u01d3\3\2\2\2\u0a31\u0a33"+
		"\5\u0264\u0133\2\u0a32\u0a31\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3"+
		"\2\2\2\u0a34\u0a35\5\u02ee\u0178\2\u0a35\u0a36\5\u00eex\2\u0a36\u01d5"+
		"\3\2\2\2\u0a37\u0a39\5\u0264\u0133\2\u0a38\u0a37\3\2\2\2\u0a38\u0a39\3"+
		"\2\2\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a3c\5\u01d8\u00ed\2\u0a3b\u0a3a\3\2"+
		"\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0a3e\5\u01dc\u00ef"+
		"\2\u0a3e\u0a3f\7v\2\2\u0a3f\u0a40\5\u01c0\u00e1\2\u0a40\u0a41\7w\2\2\u0a41"+
		"\u01d7\3\2\2\2\u0a42\u0a46\5\u01da\u00ee\2\u0a43\u0a45\5\u01da\u00ee\2"+
		"\u0a44\u0a43\3\2\2\2\u0a45\u0a48\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a47"+
		"\3\2\2\2\u0a47\u01d9\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a49\u0a55\7C\2\2\u0a4a"+
		"\u0a55\7O\2\2\u0a4b\u0a55\7N\2\2\u0a4c\u0a55\7;\2\2\u0a4d\u0a55\7M\2\2"+
		"\u0a4e\u0a55\7j\2\2\u0a4f\u0a55\7U\2\2\u0a50\u0a55\7J\2\2\u0a51\u0a55"+
		"\7\13\2\2\u0a52\u0a55\7+\2\2\u0a53\u0a55\5\u0290\u0149\2\u0a54\u0a49\3"+
		"\2\2\2\u0a54\u0a4a\3\2\2\2\u0a54\u0a4b\3\2\2\2\u0a54\u0a4c\3\2\2\2\u0a54"+
		"\u0a4d\3\2\2\2\u0a54\u0a4e\3\2\2\2\u0a54\u0a4f\3\2\2\2\u0a54\u0a50\3\2"+
		"\2\2\u0a54\u0a51\3\2\2\2\u0a54\u0a52\3\2\2\2\u0a54\u0a53\3\2\2\2\u0a55"+
		"\u01db\3\2\2\2\u0a56\u0a5a\5\f\7\2\u0a57\u0a58\5 \21\2\u0a58\u0a59\7|"+
		"\2\2\u0a59\u0a5b\3\2\2\2\u0a5a\u0a57\3\2\2\2\u0a5a\u0a5b\3\2\2\2\u0a5b"+
		"\u0a5c\3\2\2\2\u0a5c\u0a5d\7_\2\2\u0a5d\u0a5e\7x\2\2\u0a5e\u0a5f\5\u01ae"+
		"\u00d8\2\u0a5f\u0a60\7y\2\2\u0a60\u01dd\3\2\2\2\u0a61\u0a63\5\u0264\u0133"+
		"\2\u0a62\u0a61\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a65"+
		"\5\u01e0\u00f1\2\u0a65\u0a66\5\u01e4\u00f3\2\u0a66\u0a67\5\u01f2\u00fa"+
		"\2\u0a67\u01df\3\2\2\2\u0a68\u0a6c\5\u01e2\u00f2\2\u0a69\u0a6b\5\u01e2"+
		"\u00f2\2\u0a6a\u0a69\3\2\2\2\u0a6b\u0a6e\3\2\2\2\u0a6c\u0a6a\3\2\2\2\u0a6c"+
		"\u0a6d\3\2\2\2\u0a6d\u01e1\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6f\u0a74\7O"+
		"\2\2\u0a70\u0a74\7[\2\2\u0a71\u0a74\7+\2\2\u0a72\u0a74\5\u0292\u014a\2"+
		"\u0a73\u0a6f\3\2\2\2\u0a73\u0a70\3\2\2\2\u0a73\u0a71\3\2\2\2\u0a73\u0a72"+
		"\3\2\2\2\u0a74\u01e3\3\2\2\2\u0a75\u0a79\5\u01e6\u00f4\2\u0a76\u0a79\5"+
		"\u01ea\u00f6\2\u0a77\u0a79\5\u01f0\u00f9\2\u0a78\u0a75\3\2\2\2\u0a78\u0a76"+
		"\3\2\2\2\u0a78\u0a77\3\2\2\2\u0a79\u01e5\3\2\2\2\u0a7a\u0a7b\5\f\7\2\u0a7b"+
		"\u0a7c\7G\2\2\u0a7c\u0a7d\5\u01e8\u00f5\2\u0a7d\u0a7e\7z\2\2\u0a7e\u0a7f"+
		"\5\f\7\2\u0a7f\u0a80\5\6\4\2\u0a80\u0a81\7{\2\2\u0a81\u01e7\3\2\2\2\u0a82"+
		"\u0a83\t\13\2\2\u0a83\u01e9\3\2\2\2\u0a84\u0a85\5\f\7\2\u0a85\u0a86\7"+
		"G\2\2\u0a86\u0a87\5\u01ec\u00f7\2\u0a87\u0a88\7z\2\2\u0a88\u0a89\5\f\7"+
		"\2\u0a89\u0a8a\5\6\4\2\u0a8a\u0a8b\7}\2\2\u0a8b\u0a8c\5\f\7\2\u0a8c\u0a8d"+
		"\5\6\4\2\u0a8d\u0a8e\7{\2\2\u0a8e\u01eb\3\2\2\2\u0a8f\u0aa0\7\u0080\2"+
		"\2\u0a90\u0aa0\7\u0081\2\2\u0a91\u0aa0\7\u0082\2\2\u0a92\u0aa0\7\u0083"+
		"\2\2\u0a93\u0aa0\7\u0084\2\2\u0a94\u0aa0\7\u0085\2\2\u0a95\u0aa0\7\u0086"+
		"\2\2\u0a96\u0aa0\7\u0087\2\2\u0a97\u0aa0\7\u00a1\2\2\u0a98\u0aa0\5\u02f6"+
		"\u017c\2\u0a99\u0aa0\7\u0095\2\2\u0a9a\u0aa0\7\u0096\2\2\u0a9b\u0aa0\7"+
		"\u008c\2\2\u0a9c\u0aa0\7\u008b\2\2\u0a9d\u0aa0\7\u0098\2\2\u0a9e\u0aa0"+
		"\7\u0097\2\2\u0a9f\u0a8f\3\2\2\2\u0a9f\u0a90\3\2\2\2\u0a9f\u0a91\3\2\2"+
		"\2\u0a9f\u0a92\3\2\2\2\u0a9f\u0a93\3\2\2\2\u0a9f\u0a94\3\2\2\2\u0a9f\u0a95"+
		"\3\2\2\2\u0a9f\u0a96\3\2\2\2\u0a9f\u0a97\3\2\2\2\u0a9f\u0a98\3\2\2\2\u0a9f"+
		"\u0a99\3\2\2\2\u0a9f\u0a9a\3\2\2\2\u0a9f\u0a9b\3\2\2\2\u0a9f\u0a9c\3\2"+
		"\2\2\u0a9f\u0a9d\3\2\2\2\u0a9f\u0a9e\3\2\2\2\u0aa0\u01ed\3\2\2\2\u0aa1"+
		"\u0ab8\7\u0080\2\2\u0aa2\u0ab8\7\u0081\2\2\u0aa3\u0ab8\7\u0088\2\2\u0aa4"+
		"\u0ab8\7\u0089\2\2\u0aa5\u0ab8\7\u0090\2\2\u0aa6\u0ab8\7\u0091\2\2\u0aa7"+
		"\u0ab8\7a\2\2\u0aa8\u0ab8\7,\2\2\u0aa9\u0ab8\7\u0082\2\2\u0aaa\u0ab8\7"+
		"\u0083\2\2\u0aab\u0ab8\7\u0084\2\2\u0aac\u0ab8\7\u0085\2\2\u0aad\u0ab8"+
		"\7\u0086\2\2\u0aae\u0ab8\7\u0087\2\2\u0aaf\u0ab8\7\u00a1\2\2\u0ab0\u0ab8"+
		"\5\u02f6\u017c\2\u0ab1\u0ab8\7\u0095\2\2\u0ab2\u0ab8\7\u0096\2\2\u0ab3"+
		"\u0ab8\7\u008c\2\2\u0ab4\u0ab8\7\u008b\2\2\u0ab5\u0ab8\7\u0098\2\2\u0ab6"+
		"\u0ab8\7\u0097\2\2\u0ab7\u0aa1\3\2\2\2\u0ab7\u0aa2\3\2\2\2\u0ab7\u0aa3"+
		"\3\2\2\2\u0ab7\u0aa4\3\2\2\2\u0ab7\u0aa5\3\2\2\2\u0ab7\u0aa6\3\2\2\2\u0ab7"+
		"\u0aa7\3\2\2\2\u0ab7\u0aa8\3\2\2\2\u0ab7\u0aa9\3\2\2\2\u0ab7\u0aaa\3\2"+
		"\2\2\u0ab7\u0aab\3\2\2\2\u0ab7\u0aac\3\2\2\2\u0ab7\u0aad\3\2\2\2\u0ab7"+
		"\u0aae\3\2\2\2\u0ab7\u0aaf\3\2\2\2\u0ab7\u0ab0\3\2\2\2\u0ab7\u0ab1\3\2"+
		"\2\2\u0ab7\u0ab2\3\2\2\2\u0ab7\u0ab3\3\2\2\2\u0ab7\u0ab4\3\2\2\2\u0ab7"+
		"\u0ab5\3\2\2\2\u0ab7\u0ab6\3\2\2\2\u0ab8\u01ef\3\2\2\2\u0ab9\u0aba\7\67"+
		"\2\2\u0aba\u0abb\7G\2\2\u0abb\u0abc\5\f\7\2\u0abc\u0abd\7z\2\2\u0abd\u0abe"+
		"\5\f\7\2\u0abe\u0abf\5\6\4\2\u0abf\u0ac0\7{\2\2\u0ac0\u0aca\3\2\2\2\u0ac1"+
		"\u0ac2\7*\2\2\u0ac2\u0ac3\7G\2\2\u0ac3\u0ac4\5\f\7\2\u0ac4\u0ac5\7z\2"+
		"\2\u0ac5\u0ac6\5\f\7\2\u0ac6\u0ac7\5\6\4\2\u0ac7\u0ac8\7{\2\2\u0ac8\u0aca"+
		"\3\2\2\2\u0ac9\u0ab9\3\2\2\2\u0ac9\u0ac1\3\2\2\2\u0aca\u01f1\3\2\2\2\u0acb"+
		"\u0ace\5\u00eex\2\u0acc\u0ace\7\177\2\2\u0acd\u0acb\3\2\2\2\u0acd\u0acc"+
		"\3\2\2\2\u0ace\u01f3\3\2\2\2\u0acf\u0ad1\5\u0264\u0133\2\u0ad0\u0acf\3"+
		"\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad3\3\2\2\2\u0ad2\u0ad4\5\u01f6\u00fc"+
		"\2\u0ad3\u0ad2\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad6"+
		"\5\u01fa\u00fe\2\u0ad6\u0ad7\5\u01fe\u0100\2\u0ad7\u01f5\3\2\2\2\u0ad8"+
		"\u0ada\5\u01f8\u00fd\2\u0ad9\u0ad8\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0ad9"+
		"\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u01f7\3\2\2\2\u0add\u0ae4\7O\2\2\u0ade"+
		"\u0ae4\7N\2\2\u0adf\u0ae4\7;\2\2\u0ae0\u0ae4\7M\2\2\u0ae1\u0ae4\7+\2\2"+
		"\u0ae2\u0ae4\5\u0294\u014b\2\u0ae3\u0add\3\2\2\2\u0ae3\u0ade\3\2\2\2\u0ae3"+
		"\u0adf\3\2\2\2\u0ae3\u0ae0\3\2\2\2\u0ae3\u0ae1\3\2\2\2\u0ae3\u0ae2\3\2"+
		"\2\2\u0ae4\u01f9\3\2\2\2\u0ae5\u0ae6\5\6\4\2\u0ae6\u0ae8\7z\2\2\u0ae7"+
		"\u0ae9\5\u01ae\u00d8\2\u0ae8\u0ae7\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aea"+
		"\3\2\2\2\u0aea\u0aec\7{\2\2\u0aeb\u0aed\5\u01fc\u00ff\2\u0aec\u0aeb\3"+
		"\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u01fb\3\2\2\2\u0aee\u0aef\7~\2\2\u0aef"+
		"\u0af0\7\23\2\2\u0af0\u0af2\7z\2\2\u0af1\u0af3\5.\30\2\u0af2\u0af1\3\2"+
		"\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0afd\7{\2\2\u0af5"+
		"\u0af6\7~\2\2\u0af6\u0af7\7_\2\2\u0af7\u0af9\7z\2\2\u0af8\u0afa\5.\30"+
		"\2\u0af9\u0af8\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0afd"+
		"\7{\2\2\u0afc\u0aee\3\2\2\2\u0afc\u0af5\3\2\2\2\u0afd\u01fd\3\2\2\2\u0afe"+
		"\u0b01\5\u00eex\2\u0aff\u0b01\7\177\2\2\u0b00\u0afe\3\2\2\2\u0b00\u0aff"+
		"\3\2\2\2\u0b01\u01ff\3\2\2\2\u0b02\u0b04\5\u0264\u0133\2\u0b03\u0b02\3"+
		"\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b06\5\u0202\u0102"+
		"\2\u0b06\u0b07\5\6\4\2\u0b07\u0b08\7z\2\2\u0b08\u0b09\7{\2\2\u0b09\u0b0a"+
		"\5\u0204\u0103\2\u0b0a\u0201\3\2\2\2\u0b0b\u0b0c\5\u0298\u014d\2\u0b0c"+
		"\u0203\3\2\2\2\u0b0d\u0b10\5\u00eex\2\u0b0e\u0b10\7\177\2\2\u0b0f\u0b0d"+
		"\3\2\2\2\u0b0f\u0b0e\3\2\2\2\u0b10\u0205\3\2\2\2\u0b11\u0b12\5\u0296\u014c"+
		"\2\u0b12\u0207\3\2\2\2\u0b13\u0b16\5\u00eex\2\u0b14\u0b16\7\177\2\2\u0b15"+
		"\u0b13\3\2\2\2\u0b15\u0b14\3\2\2\2\u0b16\u0209\3\2\2\2\u0b17\u0b1a\5\u00ee"+
		"x\2\u0b18\u0b1a\7\177\2\2\u0b19\u0b17\3\2\2\2\u0b19\u0b18\3\2\2\2\u0b1a"+
		"\u020b\3\2\2\2\u0b1b\u0b1d\5\u0264\u0133\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d"+
		"\3\2\2\2\u0b1d\u0b1f\3\2\2\2\u0b1e\u0b20\5\u020e\u0108\2\u0b1f\u0b1e\3"+
		"\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0b22\3\2\2\2\u0b21\u0b23\5\u02e2\u0172"+
		"\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b25"+
		"\7]\2\2\u0b25\u0b27\5\6\4\2\u0b26\u0b28\5\u0172\u00ba\2\u0b27\u0b26\3"+
		"\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b2a\3\2\2\2\u0b29\u0b2b\5\u0212\u010a"+
		"\2\u0b2a\u0b29\3\2\2\2\u0b2a\u0b2b\3\2\2\2\u0b2b\u0b2d\3\2\2\2\u0b2c\u0b2e"+
		"\5\u017c\u00bf\2\u0b2d\u0b2c\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\3"+
		"\2\2\2\u0b2f\u0b31\5\u0214\u010b\2\u0b30\u0b32\7\177\2\2\u0b31\u0b30\3"+
		"\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u020d\3\2\2\2\u0b33\u0b37\5\u0210\u0109"+
		"\2\u0b34\u0b36\5\u0210\u0109\2\u0b35\u0b34\3\2\2\2\u0b36\u0b39\3\2\2\2"+
		"\u0b37\u0b35\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u020f\3\2\2\2\u0b39\u0b37"+
		"\3\2\2\2\u0b3a\u0b41\7C\2\2\u0b3b\u0b41\7O\2\2\u0b3c\u0b41\7N\2\2\u0b3d"+
		"\u0b41\7;\2\2\u0b3e\u0b41\7M\2\2\u0b3f\u0b41\5\u0282\u0142\2\u0b40\u0b3a"+
		"\3\2\2\2\u0b40\u0b3b\3\2\2\2\u0b40\u0b3c\3\2\2\2\u0b40\u0b3d\3\2\2\2\u0b40"+
		"\u0b3e\3\2\2\2\u0b40\u0b3f\3\2\2\2\u0b41\u0211\3\2\2\2\u0b42\u0b43\7~"+
		"\2\2\u0b43\u0b44\5\u017a\u00be\2\u0b44\u0213\3\2\2\2\u0b45\u0b47\7v\2"+
		"\2\u0b46\u0b48\5\u0216\u010c\2\u0b47\u0b46\3\2\2\2\u0b47\u0b48\3\2\2\2"+
		"\u0b48\u0b49\3\2\2\2\u0b49\u0b4a\7w\2\2\u0b4a\u0215\3\2\2\2\u0b4b\u0b4f"+
		"\5\u0218\u010d\2\u0b4c\u0b4e\5\u0218\u010d\2\u0b4d\u0b4c\3\2\2\2\u0b4e"+
		"\u0b51\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50\u0217\3\2"+
		"\2\2\u0b51\u0b4f\3\2\2\2\u0b52\u0b54\5\u0264\u0133\2\u0b53\u0b52\3\2\2"+
		"\2\u0b53\u0b54\3\2\2\2\u0b54\u0b56\3\2\2\2\u0b55\u0b57\5\u018e\u00c8\2"+
		"\u0b56\u0b55\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57\u0b5e\3\2\2\2\u0b58\u0b5f"+
		"\5\u0192\u00ca\2\u0b59\u0b5a\7.\2\2\u0b5a\u0b5b\5\u02be\u0160\2\u0b5b"+
		"\u0b5c\5\u02c0\u0161\2\u0b5c\u0b5d\7\177\2\2\u0b5d\u0b5f\3\2\2\2\u0b5e"+
		"\u0b58\3\2\2\2\u0b5e\u0b59\3\2\2\2\u0b5f\u0219\3\2\2\2\u0b60\u0b68\5\16"+
		"\b\2\u0b61\u0b63\t\5\2\2\u0b62\u0b61\3\2\2\2\u0b63\u0b66\3\2\2\2\u0b64"+
		"\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b67\3\2\2\2\u0b66\u0b64\3\2"+
		"\2\2\u0b67\u0b69\5\u0220\u0111\2\u0b68\u0b64\3\2\2\2\u0b69\u0b6a\3\2\2"+
		"\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u021b\3\2\2\2\u0b6c\u0b72"+
		"\5\16\b\2\u0b6d\u0b71\5\u0220\u0111\2\u0b6e\u0b71\7\u008d\2\2\u0b6f\u0b71"+
		"\7\u0082\2\2\u0b70\u0b6d\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b6f\3\2\2"+
		"\2\u0b71\u0b74\3\2\2\2\u0b72\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u021d"+
		"\3\2\2\2\u0b74\u0b72\3\2\2\2\u0b75\u0b77\5\u0220\u0111\2\u0b76\u0b75\3"+
		"\2\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79"+
		"\u021f\3\2\2\2\u0b7a\u0b7c\7x\2\2\u0b7b\u0b7d\5\u0222\u0112\2\u0b7c\u0b7b"+
		"\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e\u0b7f\7y\2\2\u0b7f"+
		"\u0221\3\2\2\2\u0b80\u0b84\7}\2\2\u0b81\u0b83\7}\2\2\u0b82\u0b81\3\2\2"+
		"\2\u0b83\u0b86\3\2\2\2\u0b84\u0b82\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0223"+
		"\3\2\2\2\u0b86\u0b84\3\2\2\2\u0b87\u0b88\7v\2\2\u0b88\u0b91\7w\2\2\u0b89"+
		"\u0b8a\7v\2\2\u0b8a\u0b8c\5\u0226\u0114\2\u0b8b\u0b8d\7}\2\2\u0b8c\u0b8b"+
		"\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b8f\7w\2\2\u0b8f"+
		"\u0b91\3\2\2\2\u0b90\u0b87\3\2\2\2\u0b90\u0b89\3\2\2\2\u0b91\u0225\3\2"+
		"\2\2\u0b92\u0b97\5\u019e\u00d0\2\u0b93\u0b94\7}\2\2\u0b94\u0b96\5\u019e"+
		"\u00d0\2\u0b95\u0b93\3\2\2\2\u0b96\u0b99\3\2\2\2\u0b97\u0b95\3\2\2\2\u0b97"+
		"\u0b98\3\2\2\2\u0b98\u0227\3\2\2\2\u0b99\u0b97\3\2\2\2\u0b9a\u0b9c\5\u0264"+
		"\u0133\2\u0b9b\u0b9a\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9e\3\2\2\2\u0b9d"+
		"\u0b9f\5\u022a\u0116\2\u0b9e\u0b9d\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba1"+
		"\3\2\2\2\u0ba0\u0ba2\5\u02e2\u0172\2\u0ba1\u0ba0\3\2\2\2\u0ba1\u0ba2\3"+
		"\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3\u0ba4\7:\2\2\u0ba4\u0ba6\5\6\4\2\u0ba5"+
		"\u0ba7\5\u022e\u0118\2\u0ba6\u0ba5\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0ba9"+
		"\3\2\2\2\u0ba8\u0baa\5\u0234\u011b\2\u0ba9\u0ba8\3\2\2\2\u0ba9\u0baa\3"+
		"\2\2\2\u0baa\u0bac\3\2\2\2\u0bab\u0bad\5\u017c\u00bf\2\u0bac\u0bab\3\2"+
		"\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bb0\5\u0236\u011c"+
		"\2\u0baf\u0bb1\7\177\2\2\u0bb0\u0baf\3\2\2\2\u0bb0\u0bb1\3\2\2\2\u0bb1"+
		"\u0229\3\2\2\2\u0bb2\u0bb6\5\u022c\u0117\2\u0bb3\u0bb5\5\u022c\u0117\2"+
		"\u0bb4\u0bb3\3\2\2\2\u0bb5\u0bb8\3\2\2\2\u0bb6\u0bb4\3\2\2\2\u0bb6\u0bb7"+
		"\3\2\2\2\u0bb7\u022b\3\2\2\2\u0bb8\u0bb6\3\2\2\2\u0bb9\u0bc0\7C\2\2\u0bba"+
		"\u0bc0\7O\2\2\u0bbb\u0bc0\7N\2\2\u0bbc\u0bc0\7;\2\2\u0bbd\u0bc0\7M\2\2"+
		"\u0bbe\u0bc0\5\u0284\u0143\2\u0bbf\u0bb9\3\2\2\2\u0bbf\u0bba\3\2\2\2\u0bbf"+
		"\u0bbb\3\2\2\2\u0bbf\u0bbc\3\2\2\2\u0bbf\u0bbd\3\2\2\2\u0bbf\u0bbe\3\2"+
		"\2\2\u0bc0\u022d\3\2\2\2\u0bc1\u0bc2\7\u008b\2\2\u0bc2\u0bc3\5\u0230\u0119"+
		"\2\u0bc3\u0bc4\7\u008c\2\2\u0bc4\u022f\3\2\2\2\u0bc5\u0bc7\5\u0264\u0133"+
		"\2\u0bc6\u0bc5\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc9\3\2\2\2\u0bc8\u0bca"+
		"\5\u0232\u011a\2\u0bc9\u0bc8\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcb\3"+
		"\2\2\2\u0bcb\u0bd6\5\u0176\u00bc\2\u0bcc\u0bce\7}\2\2\u0bcd\u0bcf\5\u0264"+
		"\u0133\2\u0bce\u0bcd\3\2\2\2\u0bce\u0bcf\3\2\2\2\u0bcf\u0bd1\3\2\2\2\u0bd0"+
		"\u0bd2\5\u0232\u011a\2\u0bd1\u0bd0\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd3"+
		"\3\2\2\2\u0bd3\u0bd5\5\u0176\u00bc\2\u0bd4\u0bcc\3\2\2\2\u0bd5\u0bd8\3"+
		"\2\2\2\u0bd6\u0bd4\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0231\3\2\2\2\u0bd8"+
		"\u0bd6\3\2\2\2\u0bd9\u0bda\t\f\2\2\u0bda\u0233\3\2\2\2\u0bdb\u0bdc\7~"+
		"\2\2\u0bdc\u0bdd\5\u017a\u00be\2\u0bdd\u0235\3\2\2\2\u0bde\u0be0\7v\2"+
		"\2\u0bdf\u0be1\5\u0238\u011d\2\u0be0\u0bdf\3\2\2\2\u0be0\u0be1\3\2\2\2"+
		"\u0be1\u0be2\3\2\2\2\u0be2\u0be3\7w\2\2\u0be3\u0237\3\2\2\2\u0be4\u0be6"+
		"\5\u023a\u011e\2\u0be5\u0be4\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be5\3"+
		"\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0239\3\2\2\2\u0be9\u0beb\5\u0264\u0133"+
		"\2\u0bea\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bed\3\2\2\2\u0bec\u0bee"+
		"\7C\2\2\u0bed\u0bec\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0c21\3\2\2\2\u0bef"+
		"\u0c0b\5\f\7\2\u0bf0\u0bf2\5\6\4\2\u0bf1\u0bf3\5\u0172\u00ba\2\u0bf2\u0bf1"+
		"\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bf6\7z\2\2\u0bf5"+
		"\u0bf7\5\u01ae\u00d8\2\u0bf6\u0bf5\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0bf8"+
		"\3\2\2\2\u0bf8\u0bfa\7{\2\2\u0bf9\u0bfb\5\u017c\u00bf\2\u0bfa\u0bf9\3"+
		"\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd\7\177\2\2\u0bfd"+
		"\u0c0c\3\2\2\2\u0bfe\u0bff\5\6\4\2\u0bff\u0c00\7v\2\2\u0c00\u0c01\5\u0240"+
		"\u0121\2\u0c01\u0c02\7w\2\2\u0c02\u0c0c\3\2\2\2\u0c03\u0c04\7_\2\2\u0c04"+
		"\u0c05\7x\2\2\u0c05\u0c06\5\u01ae\u00d8\2\u0c06\u0c07\7y\2\2\u0c07\u0c08"+
		"\7v\2\2\u0c08\u0c09\5\u0240\u0121\2\u0c09\u0c0a\7w\2\2\u0c0a\u0c0c\3\2"+
		"\2\2\u0c0b\u0bf0\3\2\2\2\u0c0b\u0bfe\3\2\2\2\u0c0b\u0c03\3\2\2\2\u0c0c"+
		"\u0c22\3\2\2\2\u0c0d\u0c0e\7k\2\2\u0c0e\u0c10\5\6\4\2\u0c0f\u0c11\5\u0172"+
		"\u00ba\2\u0c10\u0c0f\3\2\2\2\u0c10\u0c11\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12"+
		"\u0c14\7z\2\2\u0c13\u0c15\5\u01ae\u00d8\2\u0c14\u0c13\3\2\2\2\u0c14\u0c15"+
		"\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c18\7{\2\2\u0c17\u0c19\5\u017c\u00bf"+
		"\2\u0c18\u0c17\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1b"+
		"\7\177\2\2\u0c1b\u0c22\3\2\2\2\u0c1c\u0c1d\7)\2\2\u0c1d\u0c1e\5\f\7\2"+
		"\u0c1e\u0c1f\5\6\4\2\u0c1f\u0c20\7\177\2\2\u0c20\u0c22\3\2\2\2\u0c21\u0bef"+
		"\3\2\2\2\u0c21\u0c0d\3\2\2\2\u0c21\u0c1c\3\2\2\2\u0c22\u023b\3\2\2\2\u0c23"+
		"\u0c25\5\u0264\u0133\2\u0c24\u0c23\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c27"+
		"\3\2\2\2\u0c26\u0c28\7C\2\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28"+
		"\u0c29\3\2\2\2\u0c29\u0c2a\5\u01a8\u00d5\2\u0c2a\u0c2c\5\6\4\2\u0c2b\u0c2d"+
		"\5\u0172\u00ba\2\u0c2c\u0c2b\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c2e\3"+
		"\2\2\2\u0c2e\u0c30\7z\2\2\u0c2f\u0c31\5\u01ae\u00d8\2\u0c30\u0c2f\3\2"+
		"\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c34\7{\2\2\u0c33"+
		"\u0c35\5\u017c\u00bf\2\u0c34\u0c33\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c36"+
		"\3\2\2\2\u0c36\u0c37\7\177\2\2\u0c37\u023d\3\2\2\2\u0c38\u0c3a\5\u0264"+
		"\u0133\2\u0c39\u0c38\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3c\3\2\2\2\u0c3b"+
		"\u0c3d\7C\2\2\u0c3c\u0c3b\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e\3\2"+
		"\2\2\u0c3e\u0c3f\5\f\7\2\u0c3f\u0c40\5\6\4\2\u0c40\u0c41\7v\2\2\u0c41"+
		"\u0c42\5\u0240\u0121\2\u0c42\u0c43\7w\2\2\u0c43\u023f\3\2\2\2\u0c44\u0c46"+
		"\5\u0264\u0133\2\u0c45\u0c44\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c5b\3"+
		"\2\2\2\u0c47\u0c48\5\u02e8\u0175\2\u0c48\u0c4f\7\177\2\2\u0c49\u0c4b\5"+
		"\u0264\u0133\2\u0c4a\u0c49\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c\3\2"+
		"\2\2\u0c4c\u0c4d\5\u02ea\u0176\2\u0c4d\u0c4e\7\177\2\2\u0c4e\u0c50\3\2"+
		"\2\2\u0c4f\u0c4a\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c5c\3\2\2\2\u0c51"+
		"\u0c52\5\u02ea\u0176\2\u0c52\u0c59\7\177\2\2\u0c53\u0c55\5\u0264\u0133"+
		"\2\u0c54\u0c53\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c57"+
		"\5\u02e8\u0175\2\u0c57\u0c58\7\177\2\2\u0c58\u0c5a\3\2\2\2\u0c59\u0c54"+
		"\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5c\3\2\2\2\u0c5b\u0c47\3\2\2\2\u0c5b"+
		"\u0c51\3\2\2\2\u0c5c\u0241\3\2\2\2\u0c5d\u0c5f\5\u0264\u0133\2\u0c5e\u0c5d"+
		"\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0c61\3\2\2\2\u0c60\u0c62\7C\2\2\u0c61"+
		"\u0c60\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c64\7)"+
		"\2\2\u0c64\u0c65\5\f\7\2\u0c65\u0c66\5\6\4\2\u0c66\u0c67\7\177\2\2\u0c67"+
		"\u0243\3\2\2\2\u0c68\u0c6a\5\u0264\u0133\2\u0c69\u0c68\3\2\2\2\u0c69\u0c6a"+
		"\3\2\2\2\u0c6a\u0c6c\3\2\2\2\u0c6b\u0c6d\7C\2\2\u0c6c\u0c6b\3\2\2\2\u0c6c"+
		"\u0c6d\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\5\f\7\2\u0c6f\u0c70\7_"+
		"\2\2\u0c70\u0c71\7x\2\2\u0c71\u0c72\5\u01ae\u00d8\2\u0c72\u0c73\7y\2\2"+
		"\u0c73\u0c74\7v\2\2\u0c74\u0c75\5\u0240\u0121\2\u0c75\u0c76\7w\2\2\u0c76"+
		"\u0245\3\2\2\2\u0c77\u0c79\5\u0264\u0133\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79"+
		"\3\2\2\2\u0c79\u0c7b\3\2\2\2\u0c7a\u0c7c\5\u024c\u0127\2\u0c7b\u0c7a\3"+
		"\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c7e\7\'\2\2\u0c7e"+
		"\u0c80\5\6\4\2\u0c7f\u0c81\5\u0248\u0125\2\u0c80\u0c7f\3\2\2\2\u0c80\u0c81"+
		"\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c84\5\u024a\u0126\2\u0c83\u0c85\7"+
		"\177\2\2\u0c84\u0c83\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0247\3\2\2\2\u0c86"+
		"\u0c87\7~\2\2\u0c87\u0c88\5\24\13\2\u0c88\u0249\3\2\2\2\u0c89\u0c8a\7"+
		"v\2\2\u0c8a\u0c93\7w\2\2\u0c8b\u0c8c\7v\2\2\u0c8c\u0c8e\5\u0250\u0129"+
		"\2\u0c8d\u0c8f\7}\2\2\u0c8e\u0c8d\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u0c90"+
		"\3\2\2\2\u0c90\u0c91\7w\2\2\u0c91\u0c93\3\2\2\2\u0c92\u0c89\3\2\2\2\u0c92"+
		"\u0c8b\3\2\2\2\u0c93\u024b\3\2\2\2\u0c94\u0c96\5\u024e\u0128\2\u0c95\u0c94"+
		"\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u0c95\3\2\2\2\u0c97\u0c98\3\2\2\2\u0c98"+
		"\u024d\3\2\2\2\u0c99\u0c9a\t\r\2\2\u0c9a\u024f\3\2\2\2\u0c9b\u0ca0\5\u0252"+
		"\u012a\2\u0c9c\u0c9d\7}\2\2\u0c9d\u0c9f\5\u0252\u012a\2\u0c9e\u0c9c\3"+
		"\2\2\2\u0c9f\u0ca2\3\2\2\2\u0ca0\u0c9e\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1"+
		"\u0251\3\2\2\2\u0ca2\u0ca0\3\2\2\2\u0ca3\u0ca5\5\u0264\u0133\2\u0ca4\u0ca3"+
		"\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca9\5\6\4\2\u0ca7"+
		"\u0ca8\7\u008a\2\2\u0ca8\u0caa\5\u00e4s\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0caa"+
		"\3\2\2\2\u0caa\u0253\3\2\2\2\u0cab\u0cad\5\u0264\u0133\2\u0cac\u0cab\3"+
		"\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0caf\3\2\2\2\u0cae\u0cb0\5\u0256\u012c"+
		"\2\u0caf\u0cae\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb2"+
		"\7!\2\2\u0cb2\u0cb3\5\u01a8\u00d5\2\u0cb3\u0cb5\5\6\4\2\u0cb4\u0cb6\5"+
		"\u022e\u0118\2\u0cb5\u0cb4\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb7\3\2"+
		"\2\2\u0cb7\u0cb9\7z\2\2\u0cb8\u0cba\5\u01ae\u00d8\2\u0cb9\u0cb8\3\2\2"+
		"\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbd\7{\2\2\u0cbc\u0cbe"+
		"\5\u017c\u00bf\2\u0cbd\u0cbc\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cbf\3"+
		"\2\2\2\u0cbf\u0cc0\7\177\2\2\u0cc0\u0255\3\2\2\2\u0cc1\u0cc5\5\u0258\u012d"+
		"\2\u0cc2\u0cc4\5\u0258\u012d\2\u0cc3\u0cc2\3\2\2\2\u0cc4\u0cc7\3\2\2\2"+
		"\u0cc5\u0cc3\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0257\3\2\2\2\u0cc7\u0cc5"+
		"\3\2\2\2\u0cc8\u0ccf\7C\2\2\u0cc9\u0ccf\7O\2\2\u0cca\u0ccf\7N\2\2\u0ccb"+
		"\u0ccf\7;\2\2\u0ccc\u0ccf\7M\2\2\u0ccd\u0ccf\5\u0286\u0144\2\u0cce\u0cc8"+
		"\3\2\2\2\u0cce\u0cc9\3\2\2\2\u0cce\u0cca\3\2\2\2\u0cce\u0ccb\3\2\2\2\u0cce"+
		"\u0ccc\3\2\2\2\u0cce\u0ccd\3\2\2\2\u0ccf\u0259\3\2\2\2\u0cd0\u0cd1\5\u025c"+
		"\u012f\2\u0cd1\u025b\3\2\2\2\u0cd2\u0cd4\5\u025e\u0130\2\u0cd3\u0cd2\3"+
		"\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd3\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6"+
		"\u025d\3\2\2\2\u0cd7\u0cd8\7x\2\2\u0cd8\u0cd9\5\u0260\u0131\2\u0cd9\u0cdb"+
		"\5\u026e\u0138\2\u0cda\u0cdc\7}\2\2\u0cdb\u0cda\3\2\2\2\u0cdb\u0cdc\3"+
		"\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd\u0cde\7y\2\2\u0cde\u025f\3\2\2\2\u0cdf"+
		"\u0ce0\5\u0262\u0132\2\u0ce0\u0ce1\7~\2\2\u0ce1\u0261\3\2\2\2\u0ce2\u0ce5"+
		"\5\u02fe\u0180\2\u0ce3\u0ce5\5\6\4\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce3\3"+
		"\2\2\2\u0ce5\u0263\3\2\2\2\u0ce6\u0ce7\5\u0266\u0134\2\u0ce7\u0265\3\2"+
		"\2\2\u0ce8\u0cea\5\u0268\u0135\2\u0ce9\u0ce8\3\2\2\2\u0cea\u0ceb\3\2\2"+
		"\2\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0267\3\2\2\2\u0ced\u0cef"+
		"\7x\2\2\u0cee\u0cf0\5\u026a\u0136\2\u0cef\u0cee\3\2\2\2\u0cef\u0cf0\3"+
		"\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf3\5\u026e\u0138\2\u0cf2\u0cf4\7}"+
		"\2\2\u0cf3\u0cf2\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5"+
		"\u0cf6\7y\2\2\u0cf6\u0269\3\2\2\2\u0cf7\u0cf8\5\u026c\u0137\2\u0cf8\u0cf9"+
		"\7~\2\2\u0cf9\u026b\3\2\2\2\u0cfa\u0cfd\5\u02fe\u0180\2\u0cfb\u0cfd\5"+
		"\6\4\2\u0cfc\u0cfa\3\2\2\2\u0cfc\u0cfb\3\2\2\2\u0cfd\u026d\3\2\2\2\u0cfe"+
		"\u0d03\5\u0270\u0139\2\u0cff\u0d00\7}\2\2\u0d00\u0d02\5\u0270\u0139\2"+
		"\u0d01\u0cff\3\2\2\2\u0d02\u0d05\3\2\2\2\u0d03\u0d01\3\2\2\2\u0d03\u0d04"+
		"\3\2\2\2\u0d04\u026f\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d06\u0d08\5\u0272\u013a"+
		"\2\u0d07\u0d09\5\u0274\u013b\2\u0d08\u0d07\3\2\2\2\u0d08\u0d09\3\2\2\2"+
		"\u0d09\u0271\3\2\2\2\u0d0a\u0d0b\5\4\3\2\u0d0b\u0273\3\2\2\2\u0d0c\u0d0e"+
		"\7z\2\2\u0d0d\u0d0f\5\u0276\u013c\2\u0d0e\u0d0d\3\2\2\2\u0d0e\u0d0f\3"+
		"\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u0d11\7{\2\2\u0d11\u0275\3\2\2\2\u0d12"+
		"\u0d17\5\u0278\u013d\2\u0d13\u0d14\7}\2\2\u0d14\u0d16\5\u0278\u013d\2"+
		"\u0d15\u0d13\3\2\2\2\u0d16\u0d19\3\2\2\2\u0d17\u0d15\3\2\2\2\u0d17\u0d18"+
		"\3\2\2\2\u0d18\u0277\3\2\2\2\u0d19\u0d17\3\2\2\2\u0d1a\u0d1b\5\u027e\u0140"+
		"\2\u0d1b\u0279\3\2\2\2\u0d1c\u0d21\5\u027c\u013f\2\u0d1d\u0d1e\7}\2\2"+
		"\u0d1e\u0d20\5\u027c\u013f\2\u0d1f\u0d1d\3\2\2\2\u0d20\u0d23\3\2\2\2\u0d21"+
		"\u0d1f\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u027b\3\2\2\2\u0d23\u0d21\3\2"+
		"\2\2\u0d24\u0d25\5\6\4\2\u0d25\u0d26\7\u008a\2\2\u0d26\u0d27\5\u027e\u0140"+
		"\2\u0d27\u027d\3\2\2\2\u0d28\u0d29\5\u00e0q\2\u0d29\u027f\3\2\2\2\u0d2a"+
		"\u0d2b\7g\2\2\u0d2b\u0281\3\2\2\2\u0d2c\u0d2d\7g\2\2\u0d2d\u0283\3\2\2"+
		"\2\u0d2e\u0d2f\7g\2\2\u0d2f\u0285\3\2\2\2\u0d30\u0d31\7g\2\2\u0d31\u0287"+
		"\3\2\2\2\u0d32\u0d33\7g\2\2\u0d33\u0289\3\2\2\2\u0d34\u0d35\7g\2\2\u0d35"+
		"\u028b\3\2\2\2\u0d36\u0d37\7g\2\2\u0d37\u028d\3\2\2\2\u0d38\u0d39\7g\2"+
		"\2\u0d39\u028f\3\2\2\2\u0d3a\u0d3b\7g\2\2\u0d3b\u0291\3\2\2\2\u0d3c\u0d3d"+
		"\7g\2\2\u0d3d\u0293\3\2\2\2\u0d3e\u0d3f\7g\2\2\u0d3f\u0295\3\2\2\2\u0d40"+
		"\u0d42\5\u0264\u0133\2\u0d41\u0d40\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d4b"+
		"\3\2\2\2\u0d43\u0d45\7+\2\2\u0d44\u0d43\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45"+
		"\u0d47\3\2\2\2\u0d46\u0d48\7g\2\2\u0d47\u0d46\3\2\2\2\u0d47\u0d48\3\2"+
		"\2\2\u0d48\u0d4c\3\2\2\2\u0d49\u0d4a\7g\2\2\u0d4a\u0d4c\7+\2\2\u0d4b\u0d44"+
		"\3\2\2\2\u0d4b\u0d49\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d4e\7\u0089\2"+
		"\2\u0d4e\u0d4f\5\6\4\2\u0d4f\u0d50\7z\2\2\u0d50\u0d51\7{\2\2\u0d51\u0d52"+
		"\5\u0208\u0105\2\u0d52\u0297\3\2\2\2\u0d53\u0d55\t\16\2\2\u0d54\u0d53"+
		"\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d6c\7[\2\2\u0d57"+
		"\u0d58\7+\2\2\u0d58\u0d59\7g\2\2\u0d59\u0d6c\7[\2\2\u0d5a\u0d5b\7g\2\2"+
		"\u0d5b\u0d5c\7+\2\2\u0d5c\u0d6c\7[\2\2\u0d5d\u0d5e\7+\2\2\u0d5e\u0d5f"+
		"\7[\2\2\u0d5f\u0d6c\7g\2\2\u0d60\u0d61\7g\2\2\u0d61\u0d62\7[\2\2\u0d62"+
		"\u0d6c\7+\2\2\u0d63\u0d64\7[\2\2\u0d64\u0d6c\t\16\2\2\u0d65\u0d66\7[\2"+
		"\2\u0d66\u0d67\7+\2\2\u0d67\u0d6c\7g\2\2\u0d68\u0d69\7[\2\2\u0d69\u0d6a"+
		"\7g\2\2\u0d6a\u0d6c\7+\2\2\u0d6b\u0d54\3\2\2\2\u0d6b\u0d57\3\2\2\2\u0d6b"+
		"\u0d5a\3\2\2\2\u0d6b\u0d5d\3\2\2\2\u0d6b\u0d60\3\2\2\2\u0d6b\u0d63\3\2"+
		"\2\2\u0d6b\u0d65\3\2\2\2\u0d6b\u0d68\3\2\2\2\u0d6c\u0299\3\2\2\2\u0d6d"+
		"\u0d70\5\u029c\u014f\2\u0d6e\u0d70\5\u02ae\u0158\2\u0d6f\u0d6d\3\2\2\2"+
		"\u0d6f\u0d6e\3\2\2\2\u0d70\u029b\3\2\2\2\u0d71\u0d72\7g\2\2\u0d72\u0d73"+
		"\5\u00eex\2\u0d73\u029d\3\2\2\2\u0d74\u0d75\5\u02a0\u0151\2\u0d75\u029f"+
		"\3\2\2\2\u0d76\u0d7b\5\20\t\2\u0d77\u0d7a\5\u0220\u0111\2\u0d78\u0d7a"+
		"\7\u008d\2\2\u0d79\u0d77\3\2\2\2\u0d79\u0d78\3\2\2\2\u0d7a\u0d7d\3\2\2"+
		"\2\u0d7b\u0d79\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7e\3\2\2\2\u0d7d\u0d7b"+
		"\3\2\2\2\u0d7e\u0d7f\7\u0082\2\2\u0d7f\u0d8d\3\2\2\2\u0d80\u0d85\5\36"+
		"\20\2\u0d81\u0d84\5\u0220\u0111\2\u0d82\u0d84\7\u008d\2\2\u0d83\u0d81"+
		"\3\2\2\2\u0d83\u0d82\3\2\2\2\u0d84\u0d87\3\2\2\2\u0d85\u0d83\3\2\2\2\u0d85"+
		"\u0d86\3\2\2\2\u0d86\u0d88\3\2\2\2\u0d87\u0d85\3\2\2\2\u0d88\u0d89\7\u0082"+
		"\2\2\u0d89\u0d8d\3\2\2\2\u0d8a\u0d8b\7k\2\2\u0d8b\u0d8d\7\u0082\2\2\u0d8c"+
		"\u0d76\3\2\2\2\u0d8c\u0d80\3\2\2\2\u0d8c\u0d8a\3\2\2\2\u0d8d\u02a1\3\2"+
		"\2\2\u0d8e\u0d8f\5\f\7\2\u0d8f\u02a3\3\2\2\2\u0d90\u0d91\5\66\34\2\u0d91"+
		"\u02a5\3\2\2\2\u0d92\u0d95\5\u02a8\u0155\2\u0d93\u0d95\5\u02aa\u0156\2"+
		"\u0d94\u0d92\3\2\2\2\u0d94\u0d93\3\2\2\2\u0d95\u02a7\3\2\2\2\u0d96\u0d97"+
		"\7\u0082\2\2\u0d97\u0d98\5v<\2\u0d98\u02a9\3\2\2\2\u0d99\u0d9a\7\u0085"+
		"\2\2\u0d9a\u0d9b\5v<\2\u0d9b\u02ab\3\2\2\2\u0d9c\u0d9d\7Y\2\2\u0d9d\u0d9e"+
		"\7z\2\2\u0d9e\u0d9f\5\u02a2\u0152\2\u0d9f\u0da0\7{\2\2\u0da0\u02ad\3\2"+
		"\2\2\u0da1\u0da2\7.\2\2\u0da2\u0da3\7z\2\2\u0da3\u0da4\5\u02a0\u0151\2"+
		"\u0da4\u0da5\5\u02b0\u0159\2\u0da5\u0da6\7{\2\2\u0da6\u0da7\5\u00eav\2"+
		"\u0da7\u02af\3\2\2\2\u0da8\u0dad\5\u02b2\u015a\2\u0da9\u0daa\7}\2\2\u0daa"+
		"\u0dac\5\u02b2\u015a\2\u0dab\u0da9\3\2\2\2\u0dac\u0daf\3\2\2\2\u0dad\u0dab"+
		"\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae\u02b1\3\2\2\2\u0daf\u0dad\3\2\2\2\u0db0"+
		"\u0db1\5\6\4\2\u0db1\u0db2\7\u008a\2\2\u0db2\u0db3\5\u02b4\u015b\2\u0db3"+
		"\u02b3\3\2\2\2\u0db4\u0db5\7\u0085\2\2\u0db5\u0db8\5,\27\2\u0db6\u0db8"+
		"\5\u00e0q\2\u0db7\u0db4\3\2\2\2\u0db7\u0db6\3\2\2\2\u0db8\u02b5\3\2\2"+
		"\2\u0db9\u0dba\5\u02b8\u015d\2\u0dba\u02b7\3\2\2\2\u0dbb\u0dbd\5\u0264"+
		"\u0133\2\u0dbc\u0dbb\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0dbf\3\2\2\2\u0dbe"+
		"\u0dc0\5\u02ba\u015e\2\u0dbf\u0dbe\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dc1"+
		"\3\2\2\2\u0dc1\u0dc2\7.\2\2\u0dc2\u0dc3\5\u02be\u0160\2\u0dc3\u0dc4\5"+
		"\u02c0\u0161\2\u0dc4\u0dc5\7\177\2\2\u0dc5\u02b9\3\2\2\2\u0dc6\u0dc8\5"+
		"\u02bc\u015f\2\u0dc7\u0dc6\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dc7\3\2"+
		"\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u02bb\3\2\2\2\u0dcb\u0dcc\t\17\2\2\u0dcc"+
		"\u02bd\3\2\2\2\u0dcd\u0dce\5\f\7\2\u0dce\u02bf\3\2\2\2\u0dcf\u0dd1\5\u02c2"+
		"\u0162\2\u0dd0\u0dcf\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u0dd0\3\2\2\2\u0dd2"+
		"\u0dd3\3\2\2\2\u0dd3\u02c1\3\2\2\2\u0dd4\u0dd5\5\6\4\2\u0dd5\u0dd6\7x"+
		"\2\2\u0dd6\u0dd7\5\u00e4s\2\u0dd7\u0dd8\7y\2\2\u0dd8\u02c3\3\2\2\2\u0dd9"+
		"\u0dda\5\u02c6\u0164\2\u0dda\u02c5\3\2\2\2\u0ddb\u0ddc\7Z\2\2\u0ddc\u0ddd"+
		"\5\u02a2\u0152\2\u0ddd\u0dde\7x\2\2\u0dde\u0ddf\5\u00e0q\2\u0ddf\u0de0"+
		"\7y\2\2\u0de0\u02c7\3\2\2\2\u0de1\u0de2\7\62\2\2\u0de2\u02c9\3\2\2\2\u0de3"+
		"\u0de4\7?\2\2\u0de4\u02cb\3\2\2\2\u0de5\u0de6\7m\2\2\u0de6\u02cd\3\2\2"+
		"\2\u0de7\u0de8\7>\2\2\u0de8\u02cf\3\2\2\2\u0de9\u0dea\7F\2\2\u0dea\u02d1"+
		"\3\2\2\2\u0deb\u0dec\7(\2\2\u0dec\u02d3\3\2\2\2\u0ded\u0dee\7<\2\2\u0dee"+
		"\u02d5\3\2\2\2\u0def\u0df0\7H\2\2\u0df0\u02d7\3\2\2\2\u0df1\u0df2\7\20"+
		"\2\2\u0df2\u02d9\3\2\2\2\u0df3\u0df4\7\"\2\2\u0df4\u02db\3\2\2\2\u0df5"+
		"\u0df6\7V\2\2\u0df6\u02dd\3\2\2\2\u0df7\u0df8\7\65\2\2\u0df8\u02df\3\2"+
		"\2\2\u0df9\u0dfa\7\26\2\2\u0dfa\u02e1\3\2\2\2\u0dfb\u0dfc\7L\2\2\u0dfc"+
		"\u02e3\3\2\2\2\u0dfd\u0dfe\7\r\2\2\u0dfe\u02e5\3\2\2\2\u0dff\u0e00\7o"+
		"\2\2\u0e00\u02e7\3\2\2\2\u0e01\u0e02\7\63\2\2\u0e02\u02e9\3\2\2\2\u0e03"+
		"\u0e04\7W\2\2\u0e04\u02eb\3\2\2\2\u0e05\u0e06\7\f\2\2\u0e06\u02ed\3\2"+
		"\2\2\u0e07\u0e08\7R\2\2\u0e08\u02ef\3\2\2\2\u0e09\u0e0a\7%\2\2\u0e0a\u02f1"+
		"\3\2\2\2\u0e0b\u0e0c\7\16\2\2\u0e0c\u02f3\3\2\2\2\u0e0d\u0e0e\7\u008a"+
		"\2\2\u0e0e\u0e0f\7\u008c\2\2\u0e0f\u0e10\6\u017b\2\3\u0e10\u02f5\3\2\2"+
		"\2\u0e11\u0e12\7\u008c\2\2\u0e12\u0e13\7\u008c\2\2\u0e13\u0e14\6\u017c"+
		"\3\3\u0e14\u02f7\3\2\2\2\u0e15\u0e16\7\u008c\2\2\u0e16\u0e17\7\u0098\2"+
		"\2\u0e17\u0e18\6\u017d\4\3\u0e18\u02f9\3\2\2\2\u0e19\u0e20\5\u02fc\u017f"+
		"\2\u0e1a\u0e20\7q\2\2\u0e1b\u0e20\7s\2\2\u0e1c\u0e20\7t\2\2\u0e1d\u0e20"+
		"\7u\2\2\u0e1e\u0e20\7D\2\2\u0e1f\u0e19\3\2\2\2\u0e1f\u0e1a\3\2\2\2\u0e1f"+
		"\u0e1b\3\2\2\2\u0e1f\u0e1c\3\2\2\2\u0e1f\u0e1d\3\2\2\2\u0e1f\u0e1e\3\2"+
		"\2\2\u0e20\u02fb\3\2\2\2\u0e21\u0e22\t\20\2\2\u0e22\u02fd\3\2\2\2\u0e23"+
		"\u0e24\t\21\2\2\u0e24\u02ff\3\2\2\2\u0e25\u0e26\7\34\2\2\u0e26\u0e28\5"+
		"\6\4\2\u0e27\u0e29\5\u0172\u00ba\2\u0e28\u0e27\3\2\2\2\u0e28\u0e29\3\2"+
		"\2\2\u0e29\u0e2b\3\2\2\2\u0e2a\u0e2c\5\u0178\u00bd\2\u0e2b\u0e2a\3\2\2"+
		"\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2e\3\2\2\2\u0e2d\u0e2f\5\u017c\u00bf\2"+
		"\u0e2e\u0e2d\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u0e32"+
		"\5\u0188\u00c5\2\u0e31\u0e33\7\177\2\2\u0e32\u0e31\3\2\2\2\u0e32\u0e33"+
		"\3\2\2\2\u0e33\u0301\3\2\2\2\u0e34\u0e35\7]\2\2\u0e35\u0e37\5\6\4\2\u0e36"+
		"\u0e38\5\u0172\u00ba\2\u0e37\u0e36\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e3a"+
		"\3\2\2\2\u0e39\u0e3b\5\u0212\u010a\2\u0e3a\u0e39\3\2\2\2\u0e3a\u0e3b\3"+
		"\2\2\2\u0e3b\u0e3d\3\2\2\2\u0e3c\u0e3e\5\u017c\u00bf\2\u0e3d\u0e3c\3\2"+
		"\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e41\5\u0214\u010b"+
		"\2\u0e40\u0e42\7\177\2\2\u0e41\u0e40\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42"+
		"\u0303\3\2\2\2\u0e43\u0e44\7:\2\2\u0e44\u0e46\5\6\4\2\u0e45\u0e47\5\u022e"+
		"\u0118\2\u0e46\u0e45\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0e49\3\2\2\2\u0e48"+
		"\u0e4a\5\u0234\u011b\2\u0e49\u0e48\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a\u0e4c"+
		"\3\2\2\2\u0e4b\u0e4d\5\u017c\u00bf\2\u0e4c\u0e4b\3\2\2\2\u0e4c\u0e4d\3"+
		"\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u0e50\5\u0236\u011c\2\u0e4f\u0e51\7\177"+
		"\2\2\u0e50\u0e4f\3\2\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0305\3\2\2\2\u0e52"+
		"\u0e53\7\'\2\2\u0e53\u0e55\5\6\4\2\u0e54\u0e56\5\u0248\u0125\2\u0e55\u0e54"+
		"\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e59\5\u024a\u0126"+
		"\2\u0e58\u0e5a\7\177\2\2\u0e59\u0e58\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a"+
		"\u0307\3\2\2\2\u0e5b\u0e5c\7!\2\2\u0e5c\u0e5d\5\u01a8\u00d5\2\u0e5d\u0e5f"+
		"\5\6\4\2\u0e5e\u0e60\5\u022e\u0118\2\u0e5f\u0e5e\3\2\2\2\u0e5f\u0e60\3"+
		"\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e63\7z\2\2\u0e62\u0e64\5\u01ae\u00d8"+
		"\2\u0e63\u0e62\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e67"+
		"\7{\2\2\u0e66\u0e68\5\u017c\u00bf\2\u0e67\u0e66\3\2\2\2\u0e67\u0e68\3"+
		"\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e6a\7\177\2\2\u0e6a\u0309\3\2\2\2\u0e6b"+
		"\u0e6c\7)\2\2\u0e6c\u0e75\5\f\7\2\u0e6d\u0e6e\5\u019a\u00ce\2\u0e6e\u0e6f"+
		"\7\177\2\2\u0e6f\u0e76\3\2\2\2\u0e70\u0e71\5\u01aa\u00d6\2\u0e71\u0e72"+
		"\7v\2\2\u0e72\u0e73\5\u01d0\u00e9\2\u0e73\u0e74\7w\2\2\u0e74\u0e76\3\2"+
		"\2\2\u0e75\u0e6d\3\2\2\2\u0e75\u0e70\3\2\2\2\u0e76\u030b\3\2\2\2\u0e77"+
		"\u0e78\5\u019a\u00ce\2\u0e78\u0e79\7\177\2\2\u0e79\u030d\3\2\2\2\u0e7a"+
		"\u0e7b\5\u01aa\u00d6\2\u0e7b\u0e7c\7v\2\2\u0e7c\u0e7d\5\u01c0\u00e1\2"+
		"\u0e7d\u0e7e\7w\2\2\u0e7e\u030f\3\2\2\2\u0e7f\u0e80\7\35\2\2\u0e80\u0e81"+
		"\5\f\7\2\u0e81\u0e82\5\u0196\u00cc\2\u0e82\u0e83\7\177\2\2\u0e83\u0311"+
		"\3\2\2\2\u0e84\u0e85\7_\2\2\u0e85\u0e86\7x\2\2\u0e86\u0e87\5\u01ae\u00d8"+
		"\2\u0e87\u0e88\7y\2\2\u0e88\u0e89\7v\2\2\u0e89\u0e8a\5\u01c0\u00e1\2\u0e8a"+
		"\u0e8b\7w\2\2\u0e8b\u0313\3\2\2\2\u0e8c\u0e8d\7\u0089\2\2\u0e8d\u0e8e"+
		"\5\6\4\2\u0e8e\u0e8f\7z\2\2\u0e8f\u0e90\7{\2\2\u0e90\u0e91\5\u0208\u0105"+
		"\2\u0e91\u0315\3\2\2\2\u0e92\u0e93\5\6\4\2\u0e93\u0e95\7z\2\2\u0e94\u0e96"+
		"\5\u01ae\u00d8\2\u0e95\u0e94\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u0e97\3"+
		"\2\2\2\u0e97\u0e99\7{\2\2\u0e98\u0e9a\5\u01fc\u00ff\2\u0e99\u0e98\3\2"+
		"\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9c\5\u020a\u0106"+
		"\2\u0e9c\u0317\3\2\2\2\u0e9d\u0e9f\5\u031a\u018e\2\u0e9e\u0ea0\5\u0172"+
		"\u00ba\2\u0e9f\u0e9e\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea1\3\2\2\2\u0ea1"+
		"\u0ea3\7z\2\2\u0ea2\u0ea4\5\u01ae\u00d8\2\u0ea3\u0ea2\3\2\2\2\u0ea3\u0ea4"+
		"\3\2\2\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0ea7\7{\2\2\u0ea6\u0ea8\5\u017c\u00bf"+
		"\2\u0ea7\u0ea6\3\2\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u0ea9\3\2\2\2\u0ea9\u0eaa"+
		"\5\u01ac\u00d7\2\u0eaa\u0319\3\2\2\2\u0eab\u0eac\5\u031c\u018f\2\u0eac"+
		"\u031b\3\2\2\2\u0ead\u0eb3\5\6\4\2\u0eae\u0eaf\5\6\4\2\u0eaf\u0eb0\7\u008e"+
		"\2\2\u0eb0\u0eb1\5\6\4\2\u0eb1\u0eb3\3\2\2\2\u0eb2\u0ead\3\2\2\2\u0eb2"+
		"\u0eae\3\2\2\2\u0eb3\u0eba\3\2\2\2\u0eb4\u0eb5\5\n\6\2\u0eb5\u0eb6\7|"+
		"\2\2\u0eb6\u0eb7\5\6\4\2\u0eb7\u0eb9\3\2\2\2\u0eb8\u0eb4\3\2\2\2\u0eb9"+
		"\u0ebc\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u031d\3\2"+
		"\2\2\u0ebc\u0eba\3\2\2\2\u0ebd\u0ebe\7G\2\2\u0ebe\u0ebf\5\u01ee\u00f8"+
		"\2\u0ebf\u0ec0\7z\2\2\u0ec0\u0ec1\5\f\7\2\u0ec1\u0ec6\5\6\4\2\u0ec2\u0ec3"+
		"\7}\2\2\u0ec3\u0ec4\5\f\7\2\u0ec4\u0ec5\5\6\4\2\u0ec5\u0ec7\3\2\2\2\u0ec6"+
		"\u0ec2\3\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ec9\7{"+
		"\2\2\u0ec9\u0eca\5\u01f2\u00fa\2\u0eca\u031f\3\2\2\2\u0ecb\u0ecd\5\6\4"+
		"\2\u0ecc\u0ece\5\u0172\u00ba\2\u0ecd\u0ecc\3\2\2\2\u0ecd\u0ece\3\2\2\2"+
		"\u0ece\u0ecf\3\2\2\2\u0ecf\u0ed1\7z\2\2\u0ed0\u0ed2\5\u01ae\u00d8\2\u0ed1"+
		"\u0ed0\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u0ed3\3\2\2\2\u0ed3\u0ed5\7{"+
		"\2\2\u0ed4\u0ed6\5\u017c\u00bf\2\u0ed5\u0ed4\3\2\2\2\u0ed5\u0ed6\3\2\2"+
		"\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0ed8\7\177\2\2\u0ed8\u0321\3\2\2\2\u0ed9"+
		"\u0eda\5\6\4\2\u0eda\u0edb\7v\2\2\u0edb\u0edc\5\u0240\u0121\2\u0edc\u0edd"+
		"\7w\2\2\u0edd\u0323\3\2\2\2\u0ede\u0edf\7)\2\2\u0edf\u0ee0\5\f\7\2\u0ee0"+
		"\u0ee1\5\6\4\2\u0ee1\u0ee2\7\177\2\2\u0ee2\u0325\3\2\2\2\u0ee3\u0ee4\7"+
		"_\2\2\u0ee4\u0ee5\7x\2\2\u0ee5\u0ee6\5\u01ae\u00d8\2\u0ee6\u0ee7\7y\2"+
		"\2\u0ee7\u0ee8\7v\2\2\u0ee8\u0ee9\5\u0240\u0121\2\u0ee9\u0eea\7w\2\2\u0eea"+
		"\u0327\3\2\2\2\u0eeb\u0eec\7|\2\2\u0eec\u0eed\5\6\4\2\u0eed\u0eee\5\n"+
		"\6\2\u0eee\u0329\3\2\2\2\u0eef\u0ef1\7z\2\2\u0ef0\u0ef2\5.\30\2\u0ef1"+
		"\u0ef0\3\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3\u0ef4\7{"+
		"\2\2\u0ef4\u032b\3\2\2\2\u0ef5\u0ef7\7z\2\2\u0ef6\u0ef8\5.\30\2\u0ef7"+
		"\u0ef6\3\2\2\2\u0ef7\u0ef8\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efb\7{"+
		"\2\2\u0efa\u0efc\5L\'\2\u0efb\u0efa\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc"+
		"\u032d\3\2\2\2\u019e\u0338\u0340\u0345\u034b\u034d\u0354\u0358\u035d\u0369"+
		"\u036b\u0372\u0378\u037e\u0387\u038d\u0395\u039b\u03a1\u03a5\u03ab\u03ba"+
		"\u03c8\u03cc\u03d8\u03db\u03e1\u03ea\u03ef\u03f4\u0406\u0409\u040e\u0414"+
		"\u041c\u0432\u0441\u0447\u044b\u044e\u0452\u0459\u045d\u0464\u046d\u0472"+
		"\u047b\u0483\u048e\u0491\u0496\u04a6\u04aa\u04b1\u04b9\u04c5\u04c9\u04ce"+
		"\u04d0\u04d5\u04d9\u04de\u04e6\u0505\u055a\u056e\u0570\u0578\u057a\u0583"+
		"\u0585\u0595\u0597\u05a1\u05ab\u05b4\u05b6\u05be\u05c6\u05ce\u05d6\u05de"+
		"\u05e4\u05ec\u05f4\u0603\u0607\u0610\u0614\u061d\u0621\u0628\u062f\u0636"+
		"\u063d\u0641\u0647\u064f\u065b\u0667\u0675\u0681\u068b\u0690\u0694\u0698"+
		"\u06a9\u06b8\u06bc\u06c1\u06ca\u06ce\u06dc\u06e0\u06e7\u06f5\u0701\u0707"+
		"\u070c\u0719\u071d\u0726\u0730\u0738\u0742\u074b\u0751\u0764\u0768\u076c"+
		"\u0773\u077e\u078f\u07a3\u07a7\u07ad\u07b4\u07b7\u07bb\u07be\u07c4\u07cb"+
		"\u07ea\u07f5\u07f8\u07fb\u07fe\u0803\u0807\u080f\u0816\u081b\u081e\u0821"+
		"\u0828\u0832\u0836\u0845\u0849\u084c\u084f\u0856\u085e\u0861\u0864\u0869"+
		"\u086c\u086f\u0873\u0879\u0885\u088c\u0891\u0896\u08a1\u08a9\u08b0\u08bc"+
		"\u08c0\u08c2\u08c7\u08ce\u08d7\u08de\u08e1\u08e4\u08ed\u08f0\u08f5\u0907"+
		"\u0918\u0924\u092b\u0937\u093f\u0943\u0949\u094c\u094f\u0954\u0958\u095c"+
		"\u0961\u0970\u0974\u097a\u0980\u0982\u0989\u098d\u0990\u0995\u0998\u09a0"+
		"\u09a7\u09aa\u09b5\u09c3\u09c6\u09c9\u09ce\u09d3\u09d5\u09d8\u09db\u09e1"+
		"\u09e4\u09f0\u09f4\u09f7\u09fa\u0a06\u0a0c\u0a1c\u0a1f\u0a29\u0a2c\u0a32"+
		"\u0a38\u0a3b\u0a46\u0a54\u0a5a\u0a62\u0a6c\u0a73\u0a78\u0a9f\u0ab7\u0ac9"+
		"\u0acd\u0ad0\u0ad3\u0adb\u0ae3\u0ae8\u0aec\u0af2\u0af9\u0afc\u0b00\u0b03"+
		"\u0b0f\u0b15\u0b19\u0b1c\u0b1f\u0b22\u0b27\u0b2a\u0b2d\u0b31\u0b37\u0b40"+
		"\u0b47\u0b4f\u0b53\u0b56\u0b5e\u0b64\u0b6a\u0b70\u0b72\u0b78\u0b7c\u0b84"+
		"\u0b8c\u0b90\u0b97\u0b9b\u0b9e\u0ba1\u0ba6\u0ba9\u0bac\u0bb0\u0bb6\u0bbf"+
		"\u0bc6\u0bc9\u0bce\u0bd1\u0bd6\u0be0\u0be7\u0bea\u0bed\u0bf2\u0bf6\u0bfa"+
		"\u0c0b\u0c10\u0c14\u0c18\u0c21\u0c24\u0c27\u0c2c\u0c30\u0c34\u0c39\u0c3c"+
		"\u0c45\u0c4a\u0c4f\u0c54\u0c59\u0c5b\u0c5e\u0c61\u0c69\u0c6c\u0c78\u0c7b"+
		"\u0c80\u0c84\u0c8e\u0c92\u0c97\u0ca0\u0ca4\u0ca9\u0cac\u0caf\u0cb5\u0cb9"+
		"\u0cbd\u0cc5\u0cce\u0cd5\u0cdb\u0ce4\u0ceb\u0cef\u0cf3\u0cfc\u0d03\u0d08"+
		"\u0d0e\u0d17\u0d21\u0d41\u0d44\u0d47\u0d4b\u0d54\u0d6b\u0d6f\u0d79\u0d7b"+
		"\u0d83\u0d85\u0d8c\u0d94\u0dad\u0db7\u0dbc\u0dbf\u0dc9\u0dd2\u0e1f\u0e28"+
		"\u0e2b\u0e2e\u0e32\u0e37\u0e3a\u0e3d\u0e41\u0e46\u0e49\u0e4c\u0e50\u0e55"+
		"\u0e59\u0e5f\u0e63\u0e67\u0e75\u0e95\u0e99\u0e9f\u0ea3\u0ea7\u0eb2\u0eba"+
		"\u0ec6\u0ecd\u0ed1\u0ed5\u0ef1\u0ef7\u0efb";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}